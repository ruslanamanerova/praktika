{"version":3,"file":"index.mjs","sources":["../../src/inputnumber/BaseInputNumber.vue","../../src/inputnumber/InputNumber.vue","../../src/inputnumber/InputNumber.vue?vue&type=template&id=69c5d972&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputNumberStyle from 'primevue/inputnumber/style';\n\nexport default {\n    name: 'BaseInputNumber',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: Number,\n            default: null\n        },\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: undefined\n        },\n        incrementIcon: {\n            type: String,\n            default: undefined\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: undefined\n        },\n        decrementIcon: {\n            type: String,\n            default: undefined\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        roundingMode: {\n            type: String,\n            default: 'halfExpand',\n            validator(value) {\n                return ['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven'].includes(value);\n            }\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: InputNumberStyle,\n    provide() {\n        return {\n            $pcInputNumber: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <span :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <InputText\n            ref=\"input\"\n            :id=\"inputId\"\n            role=\"spinbutton\"\n            :class=\"[cx('pcInput'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"formattedValue\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"modelValue\"\n            :inputmode=\"mode === 'decimal' && !minFractionDigits ? 'numeric' : 'decimal'\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :placeholder=\"placeholder\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            @input=\"onUserInput\"\n            @keydown=\"onInputKeyDown\"\n            @keypress=\"onInputKeyPress\"\n            @paste=\"onPaste\"\n            @click=\"onInputClick\"\n            @focus=\"onInputFocus\"\n            @blur=\"onInputBlur\"\n            :pt=\"ptm('pcInput')\"\n            :unstyled=\"unstyled\"\n        />\n        <span v-if=\"showButtons && buttonLayout === 'stacked'\" :class=\"cx('buttonGroup')\" v-bind=\"ptm('buttonGroup')\">\n            <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n                <button :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                    <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                        <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n            <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n                <button :class=\"[cx('decrementButton'), decrementButtonClass]\" v-on=\"downButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('decrementButton')\">\n                    <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                        <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n        </span>\n        <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n            <button v-if=\"showButtons && buttonLayout !== 'stacked'\" :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                    <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n            <button\n                v-if=\"showButtons && buttonLayout !== 'stacked'\"\n                :class=\"[cx('decrementButton'), decrementButtonClass]\"\n                v-on=\"downButtonListeners\"\n                :disabled=\"disabled\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                type=\"button\"\n                v-bind=\"ptm('decrementButton')\"\n            >\n                <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                    <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <!-- TODO: decrementButton* and incrementButton* are deprecated since v4.0-->\n    </span>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseInputNumber from './BaseInputNumber.vue';\n\nexport default {\n    name: 'InputNumber',\n    extends: BaseInputNumber,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'input', 'focus', 'blur'],\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_modelValue: this.modelValue,\n            focused: false\n        };\n    },\n    watch: {\n        modelValue(newValue) {\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits,\n                roundingMode: this.roundingMode\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            if (event.altKey || event.ctrlKey || event.metaKey) {\n                this.isSpecialChar = true;\n                this.lastValue = this.$refs.input.$el.value;\n\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            switch (event.code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                case 'NumpadEnter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    event.preventDefault();\n\n                    if (!ObjectUtils.isEmpty(this.min)) {\n                        this.updateModel(event, this.min);\n                    }\n\n                    break;\n\n                case 'End':\n                    event.preventDefault();\n\n                    if (!ObjectUtils.isEmpty(this.max)) {\n                        this.updateModel(event, this.max);\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let char = event.key;\n            let isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if (event.code !== 'Enter') {\n                event.preventDefault();\n            }\n\n            if ((Number(char) >= 0 && Number(char) <= 9) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== DomHandler.getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    } else if (operation === 'delete-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    } else if (operation === 'delete-range' || operation === 'spin') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                    }\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_modelValue = value;\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== DomHandler.getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n\n            if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n                DomHandler.clearSelection();\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_modelValue >= this.max;\n        },\n        minBoundry() {\n            return this.d_modelValue <= this.min;\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        InputText,\n        AngleUpIcon,\n        AngleDownIcon\n    }\n};\n</script>\n","<template>\n    <span :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <InputText\n            ref=\"input\"\n            :id=\"inputId\"\n            role=\"spinbutton\"\n            :class=\"[cx('pcInput'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"formattedValue\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"modelValue\"\n            :inputmode=\"mode === 'decimal' && !minFractionDigits ? 'numeric' : 'decimal'\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :placeholder=\"placeholder\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            @input=\"onUserInput\"\n            @keydown=\"onInputKeyDown\"\n            @keypress=\"onInputKeyPress\"\n            @paste=\"onPaste\"\n            @click=\"onInputClick\"\n            @focus=\"onInputFocus\"\n            @blur=\"onInputBlur\"\n            :pt=\"ptm('pcInput')\"\n            :unstyled=\"unstyled\"\n        />\n        <span v-if=\"showButtons && buttonLayout === 'stacked'\" :class=\"cx('buttonGroup')\" v-bind=\"ptm('buttonGroup')\">\n            <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n                <button :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                    <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                        <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n            <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n                <button :class=\"[cx('decrementButton'), decrementButtonClass]\" v-on=\"downButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('decrementButton')\">\n                    <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                        <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n        </span>\n        <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n            <button v-if=\"showButtons && buttonLayout !== 'stacked'\" :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                    <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n            <button\n                v-if=\"showButtons && buttonLayout !== 'stacked'\"\n                :class=\"[cx('decrementButton'), decrementButtonClass]\"\n                v-on=\"downButtonListeners\"\n                :disabled=\"disabled\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                type=\"button\"\n                v-bind=\"ptm('decrementButton')\"\n            >\n                <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                    <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <!-- TODO: decrementButton* and incrementButton* are deprecated since v4.0-->\n    </span>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseInputNumber from './BaseInputNumber.vue';\n\nexport default {\n    name: 'InputNumber',\n    extends: BaseInputNumber,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'input', 'focus', 'blur'],\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_modelValue: this.modelValue,\n            focused: false\n        };\n    },\n    watch: {\n        modelValue(newValue) {\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits,\n                roundingMode: this.roundingMode\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            if (event.altKey || event.ctrlKey || event.metaKey) {\n                this.isSpecialChar = true;\n                this.lastValue = this.$refs.input.$el.value;\n\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            switch (event.code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                case 'NumpadEnter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    event.preventDefault();\n\n                    if (!ObjectUtils.isEmpty(this.min)) {\n                        this.updateModel(event, this.min);\n                    }\n\n                    break;\n\n                case 'End':\n                    event.preventDefault();\n\n                    if (!ObjectUtils.isEmpty(this.max)) {\n                        this.updateModel(event, this.max);\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let char = event.key;\n            let isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if (event.code !== 'Enter') {\n                event.preventDefault();\n            }\n\n            if ((Number(char) >= 0 && Number(char) <= 9) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== DomHandler.getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    } else if (operation === 'delete-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    } else if (operation === 'delete-range' || operation === 'spin') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                    }\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_modelValue = value;\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== DomHandler.getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n\n            if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n                DomHandler.clearSelection();\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_modelValue >= this.max;\n        },\n        minBoundry() {\n            return this.d_modelValue <= this.min;\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        InputText,\n        AngleUpIcon,\n        AngleDownIcon\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","modelValue","type","Number","format","Boolean","showButtons","buttonLayout","String","incrementButtonClass","decrementButtonClass","incrementButtonIcon","undefined","incrementIcon","decrementButtonIcon","decrementIcon","locale","localeMatcher","mode","prefix","suffix","currency","currencyDisplay","useGrouping","minFractionDigits","maxFractionDigits","roundingMode","validator","value","includes","min","max","step","allowEmpty","highlightOnFocus","readonly","variant","invalid","disabled","placeholder","inputId","inputClass","Object","inputStyle","ariaLabelledby","ariaLabel","style","InputNumberStyle","provide","$pcInputNumber","$parentInstance","BaseInputNumber","inheritAttrs","emits","numberFormat","_numeral","_decimal","_group","_minusSign","_currency","_suffix","_prefix","_index","groupChar","isSpecialChar","prefixChar","suffixChar","timer","data","d_modelValue","focused","watch","newValue","oldValue","updateConstructParser","created","constructParser","methods","getOptions","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","numerals","_toConsumableArray","reverse","index","Map","map","d","i","RegExp","concat","join","getGroupingExpression","getMinusSignExpression","getCurrencyExpression","getDecimalExpression","getSuffixExpression","getPrefixExpression","get","escapeRegExp","text","replace","formatter","_objectSpread","trim","charAt","split","formatValue","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","_this","clearTimer","setTimeout","spin","$refs","input","currentValue","$el","validateValue","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyUp","onUpButtonKeyDown","code","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","lastValue","onInputKeyDown","altKey","ctrlKey","metaKey","target","selectionStart","selectionEnd","inputValue","newValueStr","isNumeralChar","setAttribute","deleteChar","_this$getDecimalCharI","getDecimalCharIndexes","decimalCharIndex","decimalCharIndexWithoutPrefix","decimalLength","getDecimalLength","test","lastIndex","slice","setSelectionRange","insertedText","isDecimalMode","updateValue","deleteRange","_this$getDecimalCharI2","ObjectUtils","isEmpty","onInputKeyPress","char","key","isDecimalSign","isMinusSign","insert","onPaste","clipboardData","window","getData","filteredData","allowMinusSign","val","search","filteredVal","getCharIndexes","minusCharIndex","suffixCharIndex","currencyCharIndex","sign","arguments","length","minusCharIndexOnText","_this$getCharIndexes","insertText","resolvedOptions","operation","charIndex","start","end","textSplit","initCursor","valueLength","prefixLength","onInputClick","DomHandler","getSelection","resetRegex","valueStr","insertedValueStr","isValueChanged","$emit","originalEvent","parsedCurrentValue","currentLength","concatValues","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","val1","val2","valueSplit","onInputFocus","select","onInputBlur","clearSelection","clearInterval","maxBoundry","minBoundry","computed","filled","upButtonListeners","_this2","mousedown","mouseup","mouseleave","keydown","keyup","downButtonListeners","_this3","getFormatter","components","InputText","AngleUpIcon","AngleDownIcon","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","ptmi","_createVNode","_component_InputText","ref","id","role","_normalizeClass","$options","inputmode","onInput","onKeydown","onKeypress","onClick","onFocus","onBlur","pt","ptm","unstyled","_renderSlot","$slots","listeners","_createElementVNode","_toHandlers","tabindex","incrementicon","_createBlock","_resolveDynamicComponent","decrementicon"],"mappings":"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"}