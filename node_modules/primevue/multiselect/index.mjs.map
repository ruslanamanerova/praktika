{"version":3,"file":"index.mjs","sources":["../../src/multiselect/BaseMultiSelect.vue","../../src/multiselect/MultiSelect.vue","../../src/multiselect/MultiSelect.vue?vue&type=template&id=cec6a9ea&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MultiSelectStyle from 'primevue/multiselect/style';\n\nexport default {\n    name: 'BaseMultiSelect',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        optionGroupLabel: null,\n        optionGroupChildren: null,\n        scrollHeight: {\n            type: String,\n            default: '14rem'\n        },\n        placeholder: String,\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: Boolean,\n        inputId: {\n            type: String,\n            default: null\n        },\n        panelClass: {\n            type: String,\n            default: null\n        },\n        panelStyle: {\n            type: null,\n            default: null\n        },\n        overlayClass: {\n            type: String,\n            default: null\n        },\n        overlayStyle: {\n            type: null,\n            default: null\n        },\n        dataKey: null,\n        filter: Boolean,\n        filterPlaceholder: String,\n        filterLocale: String,\n        filterMatchMode: {\n            type: String,\n            default: 'contains'\n        },\n        filterFields: {\n            type: Array,\n            default: null\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        display: {\n            type: String,\n            default: 'comma'\n        },\n        selectedItemsLabel: {\n            type: String,\n            default: '{0} items selected'\n        },\n        maxSelectedLabels: {\n            type: Number,\n            default: null\n        },\n        selectionLimit: {\n            type: Number,\n            default: null\n        },\n        showToggleAll: {\n            type: Boolean,\n            default: true\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        checkboxIcon: {\n            type: String,\n            default: undefined\n        },\n        closeIcon: {\n            type: String,\n            default: undefined\n        },\n        dropdownIcon: {\n            type: String,\n            default: undefined\n        },\n        filterIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        removeTokenIcon: {\n            type: String,\n            default: undefined\n        },\n        chipIcon: {\n            type: String,\n            default: undefined\n        },\n        selectAll: {\n            type: Boolean,\n            default: null\n        },\n        resetFilterOnHide: {\n            type: Boolean,\n            default: false\n        },\n        virtualScrollerOptions: {\n            type: Object,\n            default: null\n        },\n        autoOptionFocus: {\n            type: Boolean,\n            default: false\n        },\n        autoFilterFocus: {\n            type: Boolean,\n            default: false\n        },\n        focusOnHover: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnSelect: {\n            type: Boolean,\n            default: false\n        },\n        filterMessage: {\n            type: String,\n            default: null\n        },\n        selectionMessage: {\n            type: String,\n            default: null\n        },\n        emptySelectionMessage: {\n            type: String,\n            default: null\n        },\n        emptyFilterMessage: {\n            type: String,\n            default: null\n        },\n        emptyMessage: {\n            type: String,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: MultiSelectStyle,\n    provide() {\n        return {\n            $pcMultiSelect: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                readonly\n                :disabled=\"disabled\"\n                :placeholder=\"placeholder\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                role=\"combobox\"\n                :aria-label=\"ariaLabel\"\n                :aria-labelledby=\"ariaLabelledby\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"id + '_list'\"\n                :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                :aria-invalid=\"invalid || undefined\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\"\n                @keydown=\"onKeyDown\"\n                v-bind=\"ptm('hiddenInput')\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"modelValue\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <span v-for=\"item of chipSelectedItems\" :key=\"getLabelByValue(item)\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                            <slot name=\"chip\" :value=\"item\" :removeCallback=\"(event) => removeOption(event, item)\">\n                                <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                                <Chip :class=\"cx('pcChip')\" :label=\"getLabelByValue(item)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, item)\" :pt=\"ptm('pcChip')\">\n                                    <template #removeicon>\n                                        <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :item=\"item\" :removeCallback=\"(event) => removeOption(event, item)\" />\n                                    </template>\n                                </Chip>\n                            </slot>\n                        </span>\n                        <template v-if=\"!modelValue || modelValue.length === 0\">{{ placeholder || 'empty' }}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <div :class=\"cx('dropdown')\" v-bind=\"ptm('dropdown')\">\n            <slot v-if=\"loading\" name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                <span v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n                <SpinnerIcon v-else :class=\"cx('loadingIcon')\" spin aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n            </slot>\n            <slot v-else name=\"dropdownicon\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"[cx('dropdownIcon'), dropdownIcon]\" aria-hidden=\"true\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :style=\"[panelStyle, overlayStyle]\" :class=\"[cx('overlay'), panelClass, overlayClass]\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <div v-if=\"(showToggleAll && selectionLimit == null) || filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n                        <Checkbox\n                            v-if=\"showToggleAll && selectionLimit == null\"\n                            :modelValue=\"allSelected\"\n                            :binary=\"true\"\n                            :disabled=\"disabled\"\n                            :variant=\"variant\"\n                            :aria-label=\"toggleAllAriaLabel\"\n                            @change=\"onToggleAll\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox')\"\n                        >\n                            <template #icon=\"slotProps\">\n                                <component v-if=\"$slots.headercheckboxicon\" :is=\"$slots.headercheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                <component v-else-if=\"slotProps.checked\" :is=\"checkboxIcon ? 'span' : 'CheckIcon'\" :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\" v-bind=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox.icon')\" />\n                            </template>\n                        </Checkbox>\n                        <IconField :class=\"cx('pcFilterContainer')\" :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                            <InputText\n                                ref=\"filterInput\"\n                                :value=\"filterValue\"\n                                @vue:mounted=\"onFilterUpdated\"\n                                @vue:updated=\"onFilterUpdated\"\n                                :class=\"cx('pcFilter')\"\n                                :placeholder=\"filterPlaceholder\"\n                                :disabled=\"disabled\"\n                                :variant=\"variant\"\n                                :unstyled=\"unstyled\"\n                                role=\"searchbox\"\n                                autocomplete=\"off\"\n                                :aria-owns=\"id + '_list'\"\n                                :aria-activedescendant=\"focusedOptionId\"\n                                @keydown=\"onFilterKeyDown\"\n                                @blur=\"onFilterBlur\"\n                                @input=\"onFilterChange\"\n                                :pt=\"ptm('pcFilter')\"\n                            />\n                            <InputIcon :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterIconContainer')\">\n                                <slot name=\"filtericon\">\n                                    <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                                    <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                                </slot>\n                            </InputIcon>\n                        </IconField>\n                        <span v-if=\"filter\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                            {{ filterResultMessageText }}\n                        </span>\n                    </div>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{ height: scrollHeight }\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" aria-multiselectable=\"true\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions), true)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'option')\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                        >\n                                            <Checkbox :modelValue=\"isSelected(option)\" :binary=\"true\" :tabindex=\"-1\" :variant=\"variant\" :unstyled=\"unstyled\" :pt=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox')\">\n                                                <template #icon=\"slotProps\">\n                                                    <component v-if=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :is=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                                    <component\n                                                        v-else-if=\"slotProps.checked\"\n                                                        :is=\"checkboxIcon ? 'span' : 'CheckIcon'\"\n                                                        :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\"\n                                                        v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox.icon')\"\n                                                    />\n                                                </template>\n                                            </Checkbox>\n                                            <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span v-bind=\"ptm('optionLabel')\">{{ getOptionLabel(option) }}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                                    </li>\n                                    <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ emptyMessageText }}\n                    </span>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { FilterService } from '@primevue/core/api';\nimport { ConnectedOverlayScrollHandler, DomHandler, ObjectUtils, UniqueComponentId, ZIndexUtils } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport Checkbox from 'primevue/checkbox';\nimport Chip from 'primevue/chip';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseMultiSelect from './BaseMultiSelect.vue';\n\nexport default {\n    name: 'MultiSelect',\n    extends: BaseMultiSelect,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter', 'selectall-change'],\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    overlay: null,\n    list: null,\n    virtualScroller: null,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    selectOnFocus: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndexUtils.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return this.dataKey ? ObjectUtils.resolveFieldData(option, this.dataKey) : this.getOptionLabel(option) + `_${index}`;\n        },\n        getHeaderCheckboxPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.allSelected\n                }\n            });\n        },\n        getCheckboxPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            if (this.maxSelectionLimitReached && !this.isSelected(option)) {\n                return true;\n            }\n\n            return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n\n            isFocus && DomHandler.focus(this.$refs.focusInput);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n                this.searchValue = '';\n\n                this.resetFilterOnHide && (this.filterValue = null);\n                isFocus && DomHandler.focus(this.$refs.focusInput);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.clicked = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n                        !this.overlayVisible && this.show();\n                        this.searchOptions(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onContainerClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                this.overlayVisible ? this.hide(true) : this.show(true);\n            }\n\n            this.clicked = true;\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? DomHandler.getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            DomHandler.focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? DomHandler.getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            DomHandler.focus(focusableEl);\n        },\n        onOptionSelect(event, option, index = -1, isFocus = false) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let value = null;\n\n            if (selected) value = this.modelValue.filter((val) => !ObjectUtils.equals(val, this.getOptionValue(option), this.equalityKey));\n            else value = [...(this.modelValue || []), this.getOptionValue(option)];\n\n            this.updateModel(event, value);\n            index !== -1 && (this.focusedOptionIndex = index);\n            isFocus && DomHandler.focus(this.$refs.focusInput);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            const value = event.target.value;\n\n            this.filterValue = value;\n            this.focusedOptionIndex = -1;\n            this.$emit('filter', { originalEvent: event, value });\n\n            !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event, true);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = -1;\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                this.show();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event, pressedInInputText = false) {\n            if (event.altKey && !pressedInInputText) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.overlayVisible) {\n                this.focusedOptionIndex = -1; // reset\n                this.onArrowDownKey(event);\n            } else {\n                if (this.focusedOptionIndex !== -1) {\n                    if (event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                    else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    DomHandler.focus(event.shiftKey ? this.$refs.lastHiddenFocusableElementOnOverlay : this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.overlayVisible && this.hide(this.filter);\n                }\n            }\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        onOverlayEnter(el) {\n            ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            DomHandler.addStyles(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.scrollInView();\n\n            this.autoFilterFocus && DomHandler.focus(this.$refs.filterInput.$el);\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndexUtils.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                DomHandler.relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = DomHandler.getOuterWidth(this.$el) + 'px';\n                DomHandler.absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        getLabelByValue(value) {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n            const matchedOption = options.find((option) => !this.isOptionGroup(option) && ObjectUtils.equals(this.getOptionValue(option), value, this.equalityKey));\n\n            return matchedOption ? this.getOptionLabel(matchedOption) : null;\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            const selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n\n            if (pattern.test(selectedItemsLabel)) {\n                return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], this.modelValue.length + '');\n            }\n\n            return selectedItemsLabel;\n        },\n        onToggleAll(event) {\n            if (this.selectAll !== null) {\n                this.$emit('selectall-change', { originalEvent: event, checked: !this.allSelected });\n            } else {\n                const value = this.allSelected ? [] : this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        removeOption(event, optionValue) {\n            event.stopPropagation();\n            let value = this.modelValue.filter((val) => !ObjectUtils.equals(val, optionValue, this.equalityKey));\n\n            this.updateModel(event, value);\n        },\n        clearFilter() {\n            this.filterValue = null;\n        },\n        hasFocusableElements() {\n            return DomHandler.getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return ObjectUtils.isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return ObjectUtils.equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return (this.modelValue || []).some((value) => this.isEquals(value, optionValue));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return ObjectUtils.findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? ObjectUtils.findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.hasSelectedOption) {\n                for (let index = this.modelValue.length - 1; index >= 0; index--) {\n                    const value = this.modelValue[index];\n                    const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                    if (matchedOptionIndex > -1) return matchedOptionIndex;\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.hasSelectedOption ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.hasSelectedOption ? ObjectUtils.findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.hasSelectedOption && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.hasSelectedOption && index > 0 ? ObjectUtils.findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.hasSelectedOption) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event) {\n            this.searchValue = (this.searchValue || '') + event.key;\n\n            let optionIndex = -1;\n\n            if (ObjectUtils.isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = DomHandler.findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                const value = this.getOptionValue(this.visibleOptions[this.focusedOptionIndex]);\n\n                this.updateModel(null, [value]);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n\n            if (this.filterValue) {\n                const filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n                if (this.optionGroupLabel) {\n                    const optionGroups = this.options || [];\n                    const filtered = [];\n\n                    optionGroups.forEach((group) => {\n                        const groupChildren = this.getOptionGroupChildren(group);\n                        const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));\n\n                        if (filteredItems.length > 0) filtered.push({ ...group, [typeof this.optionGroupChildren === 'string' ? this.optionGroupChildren : 'items']: [...filteredItems] });\n                    });\n\n                    return this.flatOptions(filtered);\n                }\n\n                return filteredOptions;\n            }\n\n            return options;\n        },\n        label() {\n            // TODO: Refactor\n            let label;\n\n            if (this.modelValue && this.modelValue.length) {\n                if (ObjectUtils.isNotEmpty(this.maxSelectedLabels) && this.modelValue.length > this.maxSelectedLabels) {\n                    return this.getSelectedItemsLabel();\n                } else {\n                    label = '';\n\n                    for (let i = 0; i < this.modelValue.length; i++) {\n                        if (i !== 0) {\n                            label += ', ';\n                        }\n\n                        label += this.getLabelByValue(this.modelValue[i]);\n                    }\n                }\n            } else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        chipSelectedItems() {\n            return ObjectUtils.isNotEmpty(this.maxSelectedLabels) && this.modelValue && this.modelValue.length > this.maxSelectedLabels ? this.modelValue.slice(0, this.maxSelectedLabels) : this.modelValue;\n        },\n        allSelected() {\n            return this.selectAll !== null ? this.selectAll : ObjectUtils.isNotEmpty(this.visibleOptions) && this.visibleOptions.every((option) => this.isOptionGroup(option) || this.isOptionDisabled(option) || this.isSelected(option));\n        },\n        hasSelectedOption() {\n            return ObjectUtils.isNotEmpty(this.modelValue);\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        maxSelectionLimitReached() {\n            return this.selectionLimit && this.modelValue && this.modelValue.length === this.selectionLimit;\n        },\n        filterResultMessageText() {\n            return ObjectUtils.isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', this.modelValue.length) : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        toggleAllAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria[this.allSelected ? 'selectAll' : 'unselectAll'] : undefined;\n        },\n        closeAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        Checkbox,\n        VirtualScroller,\n        Portal,\n        Chip,\n        IconField,\n        InputIcon,\n        TimesIcon,\n        SearchIcon,\n        ChevronDownIcon,\n        SpinnerIcon,\n        CheckIcon\n    }\n};\n</script>\n","<template>\n    <div ref=\"container\" :class=\"cx('root')\" :style=\"sx('root')\" @click=\"onContainerClick\" v-bind=\"ptmi('root')\">\n        <div class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenInputContainer')\" :data-p-hidden-accessible=\"true\">\n            <input\n                ref=\"focusInput\"\n                :id=\"inputId\"\n                type=\"text\"\n                readonly\n                :disabled=\"disabled\"\n                :placeholder=\"placeholder\"\n                :tabindex=\"!disabled ? tabindex : -1\"\n                role=\"combobox\"\n                :aria-label=\"ariaLabel\"\n                :aria-labelledby=\"ariaLabelledby\"\n                aria-haspopup=\"listbox\"\n                :aria-expanded=\"overlayVisible\"\n                :aria-controls=\"id + '_list'\"\n                :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                :aria-invalid=\"invalid || undefined\"\n                @focus=\"onFocus\"\n                @blur=\"onBlur\"\n                @keydown=\"onKeyDown\"\n                v-bind=\"ptm('hiddenInput')\"\n            />\n        </div>\n        <div :class=\"cx('labelContainer')\" v-bind=\"ptm('labelContainer')\">\n            <div :class=\"cx('label')\" v-bind=\"ptm('label')\">\n                <slot name=\"value\" :value=\"modelValue\" :placeholder=\"placeholder\">\n                    <template v-if=\"display === 'comma'\">\n                        {{ label || 'empty' }}\n                    </template>\n                    <template v-else-if=\"display === 'chip'\">\n                        <span v-for=\"item of chipSelectedItems\" :key=\"getLabelByValue(item)\" :class=\"cx('chipItem')\" v-bind=\"ptm('chipItem')\">\n                            <slot name=\"chip\" :value=\"item\" :removeCallback=\"(event) => removeOption(event, item)\">\n                                <!-- TODO: removetokenicon and removeTokenIcon  deprecated since v4.0. Use chipicon slot and chipIcon prop-->\n                                <Chip :class=\"cx('pcChip')\" :label=\"getLabelByValue(item)\" :removeIcon=\"chipIcon || removeTokenIcon\" removable :unstyled=\"unstyled\" @remove=\"removeOption($event, item)\" :pt=\"ptm('pcChip')\">\n                                    <template #removeicon>\n                                        <slot :name=\"$slots.chipicon ? 'chipicon' : 'removetokenicon'\" :class=\"cx('chipIcon')\" :item=\"item\" :removeCallback=\"(event) => removeOption(event, item)\" />\n                                    </template>\n                                </Chip>\n                            </slot>\n                        </span>\n                        <template v-if=\"!modelValue || modelValue.length === 0\">{{ placeholder || 'empty' }}</template>\n                    </template>\n                </slot>\n            </div>\n        </div>\n        <div :class=\"cx('dropdown')\" v-bind=\"ptm('dropdown')\">\n            <slot v-if=\"loading\" name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                <span v-if=\"loadingIcon\" :class=\"[cx('loadingIcon'), 'pi-spin', loadingIcon]\" aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n                <SpinnerIcon v-else :class=\"cx('loadingIcon')\" spin aria-hidden=\"true\" v-bind=\"ptm('loadingIcon')\" />\n            </slot>\n            <slot v-else name=\"dropdownicon\" :class=\"cx('dropdownIcon')\">\n                <component :is=\"dropdownIcon ? 'span' : 'ChevronDownIcon'\" :class=\"[cx('dropdownIcon'), dropdownIcon]\" aria-hidden=\"true\" v-bind=\"ptm('dropdownIcon')\" />\n            </slot>\n        </div>\n        <Portal :appendTo=\"appendTo\">\n            <transition name=\"p-connected-overlay\" @enter=\"onOverlayEnter\" @after-enter=\"onOverlayAfterEnter\" @leave=\"onOverlayLeave\" @after-leave=\"onOverlayAfterLeave\" v-bind=\"ptm('transition')\">\n                <div v-if=\"overlayVisible\" :ref=\"overlayRef\" :style=\"[panelStyle, overlayStyle]\" :class=\"[cx('overlay'), panelClass, overlayClass]\" @click=\"onOverlayClick\" @keydown=\"onOverlayKeyDown\" v-bind=\"ptm('overlay')\">\n                    <span\n                        ref=\"firstHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onFirstHiddenFocus\"\n                        v-bind=\"ptm('hiddenFirstFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                    <slot name=\"header\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <div v-if=\"(showToggleAll && selectionLimit == null) || filter\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n                        <Checkbox\n                            v-if=\"showToggleAll && selectionLimit == null\"\n                            :modelValue=\"allSelected\"\n                            :binary=\"true\"\n                            :disabled=\"disabled\"\n                            :variant=\"variant\"\n                            :aria-label=\"toggleAllAriaLabel\"\n                            @change=\"onToggleAll\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox')\"\n                        >\n                            <template #icon=\"slotProps\">\n                                <component v-if=\"$slots.headercheckboxicon\" :is=\"$slots.headercheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                <component v-else-if=\"slotProps.checked\" :is=\"checkboxIcon ? 'span' : 'CheckIcon'\" :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\" v-bind=\"getHeaderCheckboxPTOptions('pcHeaderCheckbox.icon')\" />\n                            </template>\n                        </Checkbox>\n                        <IconField :class=\"cx('pcFilterContainer')\" :unstyled=\"unstyled\" :pt=\"ptm('pcFilterContainer')\">\n                            <InputText\n                                ref=\"filterInput\"\n                                :value=\"filterValue\"\n                                @vue:mounted=\"onFilterUpdated\"\n                                @vue:updated=\"onFilterUpdated\"\n                                :class=\"cx('pcFilter')\"\n                                :placeholder=\"filterPlaceholder\"\n                                :disabled=\"disabled\"\n                                :variant=\"variant\"\n                                :unstyled=\"unstyled\"\n                                role=\"searchbox\"\n                                autocomplete=\"off\"\n                                :aria-owns=\"id + '_list'\"\n                                :aria-activedescendant=\"focusedOptionId\"\n                                @keydown=\"onFilterKeyDown\"\n                                @blur=\"onFilterBlur\"\n                                @input=\"onFilterChange\"\n                                :pt=\"ptm('pcFilter')\"\n                            />\n                            <InputIcon :unstyled=\"unstyled\" v-bind=\"ptm('pcFilterIconContainer')\">\n                                <slot name=\"filtericon\">\n                                    <span v-if=\"filterIcon\" :class=\"filterIcon\" v-bind=\"ptm('filterIcon')\" />\n                                    <SearchIcon v-else v-bind=\"ptm('filterIcon')\" />\n                                </slot>\n                            </InputIcon>\n                        </IconField>\n                        <span v-if=\"filter\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenFilterResult')\" :data-p-hidden-accessible=\"true\">\n                            {{ filterResultMessageText }}\n                        </span>\n                    </div>\n                    <div :class=\"cx('listContainer')\" :style=\"{ 'max-height': virtualScrollerDisabled ? scrollHeight : '' }\" v-bind=\"ptm('listContainer')\">\n                        <VirtualScroller :ref=\"virtualScrollerRef\" v-bind=\"virtualScrollerOptions\" :items=\"visibleOptions\" :style=\"{ height: scrollHeight }\" :tabindex=\"-1\" :disabled=\"virtualScrollerDisabled\" :pt=\"ptm('virtualScroller')\">\n                            <template v-slot:content=\"{ styleClass, contentRef, items, getItemOptions, contentStyle, itemSize }\">\n                                <ul :ref=\"(el) => listRef(el, contentRef)\" :id=\"id + '_list'\" :class=\"[cx('list'), styleClass]\" :style=\"contentStyle\" role=\"listbox\" aria-multiselectable=\"true\" :aria-label=\"listAriaLabel\" v-bind=\"ptm('list')\">\n                                    <template v-for=\"(option, i) of items\" :key=\"getOptionRenderKey(option, getOptionIndex(i, getItemOptions))\">\n                                        <li\n                                            v-if=\"isOptionGroup(option)\"\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('optionGroup')\"\n                                            role=\"option\"\n                                            v-bind=\"ptm('optionGroup')\"\n                                        >\n                                            <slot name=\"optiongroup\" :option=\"option.optionGroup\" :index=\"getOptionIndex(i, getItemOptions)\">{{ getOptionGroupLabel(option.optionGroup) }}</slot>\n                                        </li>\n                                        <li\n                                            v-else\n                                            :id=\"id + '_' + getOptionIndex(i, getItemOptions)\"\n                                            v-ripple\n                                            :style=\"{ height: itemSize ? itemSize + 'px' : undefined }\"\n                                            :class=\"cx('option', { option, index: i, getItemOptions })\"\n                                            role=\"option\"\n                                            :aria-label=\"getOptionLabel(option)\"\n                                            :aria-selected=\"isSelected(option)\"\n                                            :aria-disabled=\"isOptionDisabled(option)\"\n                                            :aria-setsize=\"ariaSetSize\"\n                                            :aria-posinset=\"getAriaPosInset(getOptionIndex(i, getItemOptions))\"\n                                            @click=\"onOptionSelect($event, option, getOptionIndex(i, getItemOptions), true)\"\n                                            @mousemove=\"onOptionMouseMove($event, getOptionIndex(i, getItemOptions))\"\n                                            v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'option')\"\n                                            :data-p-selected=\"isSelected(option)\"\n                                            :data-p-focused=\"focusedOptionIndex === getOptionIndex(i, getItemOptions)\"\n                                            :data-p-disabled=\"isOptionDisabled(option)\"\n                                        >\n                                            <Checkbox :modelValue=\"isSelected(option)\" :binary=\"true\" :tabindex=\"-1\" :variant=\"variant\" :unstyled=\"unstyled\" :pt=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox')\">\n                                                <template #icon=\"slotProps\">\n                                                    <component v-if=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :is=\"$slots.optioncheckboxicon || $slots.itemcheckboxicon\" :checked=\"slotProps.checked\" :class=\"slotProps.class\" />\n                                                    <component\n                                                        v-else-if=\"slotProps.checked\"\n                                                        :is=\"checkboxIcon ? 'span' : 'CheckIcon'\"\n                                                        :class=\"[slotProps.class, { [checkboxIcon]: slotProps.checked }]\"\n                                                        v-bind=\"getCheckboxPTOptions(option, getItemOptions, i, 'pcOptionCheckbox.icon')\"\n                                                    />\n                                                </template>\n                                            </Checkbox>\n                                            <slot name=\"option\" :option=\"option\" :selected=\"isSelected(option)\" :index=\"getOptionIndex(i, getItemOptions)\">\n                                                <span v-bind=\"ptm('optionLabel')\">{{ getOptionLabel(option) }}</span>\n                                            </slot>\n                                        </li>\n                                    </template>\n                                    <li v-if=\"filterValue && (!items || (items && items.length === 0))\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"emptyfilter\">{{ emptyFilterMessageText }}</slot>\n                                    </li>\n                                    <li v-else-if=\"!options || (options && options.length === 0)\" :class=\"cx('emptyMessage')\" role=\"option\" v-bind=\"ptm('emptyMessage')\">\n                                        <slot name=\"empty\">{{ emptyMessageText }}</slot>\n                                    </li>\n                                </ul>\n                            </template>\n                            <template v-if=\"$slots.loader\" v-slot:loader=\"{ options }\">\n                                <slot name=\"loader\" :options=\"options\"></slot>\n                            </template>\n                        </VirtualScroller>\n                    </div>\n                    <slot name=\"footer\" :value=\"modelValue\" :options=\"visibleOptions\"></slot>\n                    <span v-if=\"!options || (options && options.length === 0)\" role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenEmptyMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ emptyMessageText }}\n                    </span>\n                    <span role=\"status\" aria-live=\"polite\" class=\"p-hidden-accessible\" v-bind=\"ptm('hiddenSelectedMessage')\" :data-p-hidden-accessible=\"true\">\n                        {{ selectedMessageText }}\n                    </span>\n                    <span\n                        ref=\"lastHiddenFocusableElementOnOverlay\"\n                        role=\"presentation\"\n                        aria-hidden=\"true\"\n                        class=\"p-hidden-accessible p-hidden-focusable\"\n                        :tabindex=\"0\"\n                        @focus=\"onLastHiddenFocus\"\n                        v-bind=\"ptm('hiddenLastFocusableEl')\"\n                        :data-p-hidden-accessible=\"true\"\n                        :data-p-hidden-focusable=\"true\"\n                    ></span>\n                </div>\n            </transition>\n        </Portal>\n    </div>\n</template>\n\n<script>\nimport { FilterService } from '@primevue/core/api';\nimport { ConnectedOverlayScrollHandler, DomHandler, ObjectUtils, UniqueComponentId, ZIndexUtils } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport SearchIcon from '@primevue/icons/search';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport TimesIcon from '@primevue/icons/times';\nimport Checkbox from 'primevue/checkbox';\nimport Chip from 'primevue/chip';\nimport IconField from 'primevue/iconfield';\nimport InputIcon from 'primevue/inputicon';\nimport InputText from 'primevue/inputtext';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport Ripple from 'primevue/ripple';\nimport VirtualScroller from 'primevue/virtualscroller';\nimport BaseMultiSelect from './BaseMultiSelect.vue';\n\nexport default {\n    name: 'MultiSelect',\n    extends: BaseMultiSelect,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'change', 'focus', 'blur', 'before-show', 'before-hide', 'show', 'hide', 'filter', 'selectall-change'],\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    overlay: null,\n    list: null,\n    virtualScroller: null,\n    startRangeIndex: -1,\n    searchTimeout: null,\n    searchValue: '',\n    selectOnFocus: false,\n    data() {\n        return {\n            id: this.$attrs.id,\n            clicked: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            filterValue: null,\n            overlayVisible: false\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        },\n        options() {\n            this.autoUpdateModel();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n        this.autoUpdateModel();\n    },\n    beforeUnmount() {\n        this.unbindOutsideClickListener();\n        this.unbindResizeListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        if (this.overlay) {\n            ZIndexUtils.clear(this.overlay);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        getOptionIndex(index, fn) {\n            return this.virtualScrollerDisabled ? index : fn && fn(index)['index'];\n        },\n        getOptionLabel(option) {\n            return this.optionLabel ? ObjectUtils.resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? ObjectUtils.resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option, index) {\n            return this.dataKey ? ObjectUtils.resolveFieldData(option, this.dataKey) : this.getOptionLabel(option) + `_${index}`;\n        },\n        getHeaderCheckboxPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.allSelected\n                }\n            });\n        },\n        getCheckboxPTOptions(option, itemOptions, index, key) {\n            return this.ptm(key, {\n                context: {\n                    selected: this.isSelected(option),\n                    focused: this.focusedOptionIndex === this.getOptionIndex(index, itemOptions),\n                    disabled: this.isOptionDisabled(option)\n                }\n            });\n        },\n        isOptionDisabled(option) {\n            if (this.maxSelectionLimitReached && !this.isSelected(option)) {\n                return true;\n            }\n\n            return this.optionDisabled ? ObjectUtils.resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionGroup(option) {\n            return this.optionGroupLabel && option.optionGroup && option.group;\n        },\n        getOptionGroupLabel(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupLabel);\n        },\n        getOptionGroupChildren(optionGroup) {\n            return ObjectUtils.resolveFieldData(optionGroup, this.optionGroupChildren);\n        },\n        getAriaPosInset(index) {\n            return (this.optionGroupLabel ? index - this.visibleOptions.slice(0, index).filter((option) => this.isOptionGroup(option)).length : index) + 1;\n        },\n        show(isFocus) {\n            this.$emit('before-show');\n            this.overlayVisible = true;\n            this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n\n            isFocus && DomHandler.focus(this.$refs.focusInput);\n        },\n        hide(isFocus) {\n            const _hide = () => {\n                this.$emit('before-hide');\n                this.overlayVisible = false;\n                this.clicked = false;\n                this.focusedOptionIndex = -1;\n                this.searchValue = '';\n\n                this.resetFilterOnHide && (this.filterValue = null);\n                isFocus && DomHandler.focus(this.$refs.focusInput);\n            };\n\n            setTimeout(() => {\n                _hide();\n            }, 0); // For ScreenReaders\n        },\n        onFocus(event) {\n            if (this.disabled) {\n                // For ScreenReaders\n                return;\n            }\n\n            this.focused = true;\n\n            if (this.overlayVisible) {\n                this.focusedOptionIndex = this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : this.autoOptionFocus ? this.findFirstFocusedOptionIndex() : this.findSelectedOptionIndex();\n                this.scrollInView(this.focusedOptionIndex);\n            }\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.clicked = false;\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.searchValue = '';\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.disabled) {\n                event.preventDefault();\n\n                return;\n            }\n\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'PageDown':\n                    this.onPageDownKey(event);\n                    break;\n\n                case 'PageUp':\n                    this.onPageUpKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    this.onShiftKey(event);\n                    break;\n\n                default:\n                    if (event.code === 'KeyA' && metaKey) {\n                        const value = this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                        this.updateModel(event, value);\n\n                        event.preventDefault();\n                        break;\n                    }\n\n                    if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n                        !this.overlayVisible && this.show();\n                        this.searchOptions(event);\n                        event.preventDefault();\n                    }\n\n                    break;\n            }\n\n            this.clicked = false;\n        },\n        onContainerClick(event) {\n            if (this.disabled || this.loading) {\n                return;\n            }\n\n            if (!this.overlay || !this.overlay.contains(event.target)) {\n                this.overlayVisible ? this.hide(true) : this.show(true);\n            }\n\n            this.clicked = true;\n        },\n        onFirstHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? DomHandler.getFirstFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            DomHandler.focus(focusableEl);\n        },\n        onLastHiddenFocus(event) {\n            const focusableEl = event.relatedTarget === this.$refs.focusInput ? DomHandler.getLastFocusableElement(this.overlay, ':not([data-p-hidden-focusable=\"true\"])') : this.$refs.focusInput;\n\n            DomHandler.focus(focusableEl);\n        },\n        onOptionSelect(event, option, index = -1, isFocus = false) {\n            if (this.disabled || this.isOptionDisabled(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let value = null;\n\n            if (selected) value = this.modelValue.filter((val) => !ObjectUtils.equals(val, this.getOptionValue(option), this.equalityKey));\n            else value = [...(this.modelValue || []), this.getOptionValue(option)];\n\n            this.updateModel(event, value);\n            index !== -1 && (this.focusedOptionIndex = index);\n            isFocus && DomHandler.focus(this.$refs.focusInput);\n        },\n        onOptionMouseMove(event, index) {\n            if (this.focusOnHover) {\n                this.changeFocusedOptionIndex(event, index);\n            }\n        },\n        onOptionSelectRange(event, start = -1, end = -1) {\n            start === -1 && (start = this.findNearestSelectedOptionIndex(end, true));\n            end === -1 && (end = this.findNearestSelectedOptionIndex(start));\n\n            if (start !== -1 && end !== -1) {\n                const rangeStart = Math.min(start, end);\n                const rangeEnd = Math.max(start, end);\n                const value = this.visibleOptions\n                    .slice(rangeStart, rangeEnd + 1)\n                    .filter((option) => this.isValidOption(option))\n                    .map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        onFilterChange(event) {\n            const value = event.target.value;\n\n            this.filterValue = value;\n            this.focusedOptionIndex = -1;\n            this.$emit('filter', { originalEvent: event, value });\n\n            !this.virtualScrollerDisabled && this.virtualScroller.scrollToIndex(0);\n        },\n        onFilterKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event, true);\n                    break;\n\n                case 'ArrowLeft':\n                case 'ArrowRight':\n                    this.onArrowLeftKey(event, true);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event, true);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event, true);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event, true);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onFilterBlur() {\n            this.focusedOptionIndex = -1;\n        },\n        onFilterUpdated() {\n            if (this.overlayVisible) {\n                this.alignOverlay();\n            }\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.$el\n            });\n        },\n        onOverlayKeyDown(event) {\n            switch (event.code) {\n                case 'Escape':\n                    this.onEscapeKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            if (!this.overlayVisible) {\n                this.show();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findNextOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findFirstOptionIndex() : this.findFirstFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n            }\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event, pressedInInputText = false) {\n            if (event.altKey && !pressedInInputText) {\n                if (this.focusedOptionIndex !== -1) {\n                    this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n\n                this.overlayVisible && this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.focusedOptionIndex !== -1 ? this.findPrevOptionIndex(this.focusedOptionIndex) : this.clicked ? this.findLastOptionIndex() : this.findLastFocusedOptionIndex();\n\n                if (event.shiftKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n                event.preventDefault();\n            }\n        },\n        onArrowLeftKey(event, pressedInInputText = false) {\n            pressedInInputText && (this.focusedOptionIndex = -1);\n        },\n        onHomeKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(0, event.target.selectionStart);\n                } else {\n                    target.setSelectionRange(0, 0);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findFirstOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, optionIndex, this.startRangeIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onEndKey(event, pressedInInputText = false) {\n            if (pressedInInputText) {\n                const target = event.currentTarget;\n\n                if (event.shiftKey) {\n                    target.setSelectionRange(event.target.selectionStart, target.value.length);\n                } else {\n                    const len = target.value.length;\n\n                    target.setSelectionRange(len, len);\n                    this.focusedOptionIndex = -1;\n                }\n            } else {\n                let metaKey = event.metaKey || event.ctrlKey;\n                let optionIndex = this.findLastOptionIndex();\n\n                if (event.shiftKey && metaKey) {\n                    this.onOptionSelectRange(event, this.startRangeIndex, optionIndex);\n                }\n\n                this.changeFocusedOptionIndex(event, optionIndex);\n\n                !this.overlayVisible && this.show();\n            }\n\n            event.preventDefault();\n        },\n        onPageUpKey(event) {\n            this.scrollInView(0);\n            event.preventDefault();\n        },\n        onPageDownKey(event) {\n            this.scrollInView(this.visibleOptions.length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (!this.overlayVisible) {\n                this.focusedOptionIndex = -1; // reset\n                this.onArrowDownKey(event);\n            } else {\n                if (this.focusedOptionIndex !== -1) {\n                    if (event.shiftKey) this.onOptionSelectRange(event, this.focusedOptionIndex);\n                    else this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                }\n            }\n\n            event.preventDefault();\n        },\n        onEscapeKey(event) {\n            this.overlayVisible && this.hide(true);\n            event.preventDefault();\n        },\n        onTabKey(event, pressedInInputText = false) {\n            if (!pressedInInputText) {\n                if (this.overlayVisible && this.hasFocusableElements()) {\n                    DomHandler.focus(event.shiftKey ? this.$refs.lastHiddenFocusableElementOnOverlay : this.$refs.firstHiddenFocusableElementOnOverlay);\n\n                    event.preventDefault();\n                } else {\n                    if (this.focusedOptionIndex !== -1) {\n                        this.onOptionSelect(event, this.visibleOptions[this.focusedOptionIndex]);\n                    }\n\n                    this.overlayVisible && this.hide(this.filter);\n                }\n            }\n        },\n        onShiftKey() {\n            this.startRangeIndex = this.focusedOptionIndex;\n        },\n        onOverlayEnter(el) {\n            ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n\n            DomHandler.addStyles(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.scrollInView();\n\n            this.autoFilterFocus && DomHandler.focus(this.$refs.filterInput.$el);\n        },\n        onOverlayAfterEnter() {\n            this.bindOutsideClickListener();\n            this.bindScrollListener();\n            this.bindResizeListener();\n\n            this.$emit('show');\n        },\n        onOverlayLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindScrollListener();\n            this.unbindResizeListener();\n\n            this.$emit('hide');\n            this.overlay = null;\n        },\n        onOverlayAfterLeave(el) {\n            ZIndexUtils.clear(el);\n        },\n        alignOverlay() {\n            if (this.appendTo === 'self') {\n                DomHandler.relativePosition(this.overlay, this.$el);\n            } else {\n                this.overlay.style.minWidth = DomHandler.getOuterWidth(this.$el) + 'px';\n                DomHandler.absolutePosition(this.overlay, this.$el);\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    if (this.overlayVisible && this.isOutsideClicked(event)) {\n                        this.hide();\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.$refs.container, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        isOutsideClicked(event) {\n            return !(this.$el.isSameNode(event.target) || this.$el.contains(event.target) || (this.overlay && this.overlay.contains(event.target)));\n        },\n        getLabelByValue(value) {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n            const matchedOption = options.find((option) => !this.isOptionGroup(option) && ObjectUtils.equals(this.getOptionValue(option), value, this.equalityKey));\n\n            return matchedOption ? this.getOptionLabel(matchedOption) : null;\n        },\n        getSelectedItemsLabel() {\n            let pattern = /{(.*?)}/;\n            const selectedItemsLabel = this.selectedItemsLabel || this.$primevue.config.locale.selectionMessage;\n\n            if (pattern.test(selectedItemsLabel)) {\n                return selectedItemsLabel.replace(selectedItemsLabel.match(pattern)[0], this.modelValue.length + '');\n            }\n\n            return selectedItemsLabel;\n        },\n        onToggleAll(event) {\n            if (this.selectAll !== null) {\n                this.$emit('selectall-change', { originalEvent: event, checked: !this.allSelected });\n            } else {\n                const value = this.allSelected ? [] : this.visibleOptions.filter((option) => this.isValidOption(option)).map((option) => this.getOptionValue(option));\n\n                this.updateModel(event, value);\n            }\n        },\n        removeOption(event, optionValue) {\n            event.stopPropagation();\n            let value = this.modelValue.filter((val) => !ObjectUtils.equals(val, optionValue, this.equalityKey));\n\n            this.updateModel(event, value);\n        },\n        clearFilter() {\n            this.filterValue = null;\n        },\n        hasFocusableElements() {\n            return DomHandler.getFocusableElements(this.overlay, ':not([data-p-hidden-focusable=\"true\"])').length > 0;\n        },\n        isOptionMatched(option) {\n            return this.isValidOption(option) && typeof this.getOptionLabel(option) === 'string' && this.getOptionLabel(option)?.toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale));\n        },\n        isValidOption(option) {\n            return ObjectUtils.isNotEmpty(option) && !(this.isOptionDisabled(option) || this.isOptionGroup(option));\n        },\n        isValidSelectedOption(option) {\n            return this.isValidOption(option) && this.isSelected(option);\n        },\n        isEquals(value1, value2) {\n            return ObjectUtils.equals(value1, value2, this.equalityKey);\n        },\n        isSelected(option) {\n            const optionValue = this.getOptionValue(option);\n\n            return (this.modelValue || []).some((value) => this.isEquals(value, optionValue));\n        },\n        findFirstOptionIndex() {\n            return this.visibleOptions.findIndex((option) => this.isValidOption(option));\n        },\n        findLastOptionIndex() {\n            return ObjectUtils.findLastIndex(this.visibleOptions, (option) => this.isValidOption(option));\n        },\n        findNextOptionIndex(index) {\n            const matchedOptionIndex = index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : index;\n        },\n        findPrevOptionIndex(index) {\n            const matchedOptionIndex = index > 0 ? ObjectUtils.findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findSelectedOptionIndex() {\n            if (this.hasSelectedOption) {\n                for (let index = this.modelValue.length - 1; index >= 0; index--) {\n                    const value = this.modelValue[index];\n                    const matchedOptionIndex = this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option) && this.isEquals(value, this.getOptionValue(option)));\n\n                    if (matchedOptionIndex > -1) return matchedOptionIndex;\n                }\n            }\n\n            return -1;\n        },\n        findFirstSelectedOptionIndex() {\n            return this.hasSelectedOption ? this.visibleOptions.findIndex((option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findLastSelectedOptionIndex() {\n            return this.hasSelectedOption ? ObjectUtils.findLastIndex(this.visibleOptions, (option) => this.isValidSelectedOption(option)) : -1;\n        },\n        findNextSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.hasSelectedOption && index < this.visibleOptions.length - 1 ? this.visibleOptions.slice(index + 1).findIndex((option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + index + 1 : -1;\n        },\n        findPrevSelectedOptionIndex(index) {\n            const matchedOptionIndex = this.hasSelectedOption && index > 0 ? ObjectUtils.findLastIndex(this.visibleOptions.slice(0, index), (option) => this.isValidSelectedOption(option)) : -1;\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : -1;\n        },\n        findNearestSelectedOptionIndex(index, firstCheckUp = false) {\n            let matchedOptionIndex = -1;\n\n            if (this.hasSelectedOption) {\n                if (firstCheckUp) {\n                    matchedOptionIndex = this.findPrevSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findNextSelectedOptionIndex(index) : matchedOptionIndex;\n                } else {\n                    matchedOptionIndex = this.findNextSelectedOptionIndex(index);\n                    matchedOptionIndex = matchedOptionIndex === -1 ? this.findPrevSelectedOptionIndex(index) : matchedOptionIndex;\n                }\n            }\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex : index;\n        },\n        findFirstFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findFirstOptionIndex() : selectedIndex;\n        },\n        findLastFocusedOptionIndex() {\n            const selectedIndex = this.findSelectedOptionIndex();\n\n            return selectedIndex < 0 ? this.findLastOptionIndex() : selectedIndex;\n        },\n        searchOptions(event) {\n            this.searchValue = (this.searchValue || '') + event.key;\n\n            let optionIndex = -1;\n\n            if (ObjectUtils.isNotEmpty(this.searchValue)) {\n                if (this.focusedOptionIndex !== -1) {\n                    optionIndex = this.visibleOptions.slice(this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option));\n                    optionIndex = optionIndex === -1 ? this.visibleOptions.slice(0, this.focusedOptionIndex).findIndex((option) => this.isOptionMatched(option)) : optionIndex + this.focusedOptionIndex;\n                } else {\n                    optionIndex = this.visibleOptions.findIndex((option) => this.isOptionMatched(option));\n                }\n\n                if (optionIndex === -1 && this.focusedOptionIndex === -1) {\n                    optionIndex = this.findFirstFocusedOptionIndex();\n                }\n\n                if (optionIndex !== -1) {\n                    this.changeFocusedOptionIndex(event, optionIndex);\n                }\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n        },\n        changeFocusedOptionIndex(event, index) {\n            if (this.focusedOptionIndex !== index) {\n                this.focusedOptionIndex = index;\n                this.scrollInView();\n\n                if (this.selectOnFocus) {\n                    this.onOptionSelect(event, this.visibleOptions[index]);\n                }\n            }\n        },\n        scrollInView(index = -1) {\n            this.$nextTick(() => {\n                const id = index !== -1 ? `${this.id}_${index}` : this.focusedOptionId;\n                const element = DomHandler.findSingle(this.list, `li[id=\"${id}\"]`);\n\n                if (element) {\n                    element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n                } else if (!this.virtualScrollerDisabled) {\n                    this.virtualScroller && this.virtualScroller.scrollToIndex(index !== -1 ? index : this.focusedOptionIndex);\n                }\n            });\n        },\n        autoUpdateModel() {\n            if (this.selectOnFocus && this.autoOptionFocus && !this.hasSelectedOption) {\n                this.focusedOptionIndex = this.findFirstFocusedOptionIndex();\n                const value = this.getOptionValue(this.visibleOptions[this.focusedOptionIndex]);\n\n                this.updateModel(null, [value]);\n            }\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n            this.$emit('change', { originalEvent: event, value });\n        },\n        flatOptions(options) {\n            return (options || []).reduce((result, option, index) => {\n                result.push({ optionGroup: option, group: true, index });\n\n                const optionGroupChildren = this.getOptionGroupChildren(option);\n\n                optionGroupChildren && optionGroupChildren.forEach((o) => result.push(o));\n\n                return result;\n            }, []);\n        },\n        overlayRef(el) {\n            this.overlay = el;\n        },\n        listRef(el, contentRef) {\n            this.list = el;\n            contentRef && contentRef(el); // For VirtualScroller\n        },\n        virtualScrollerRef(el) {\n            this.virtualScroller = el;\n        }\n    },\n    computed: {\n        visibleOptions() {\n            const options = this.optionGroupLabel ? this.flatOptions(this.options) : this.options || [];\n\n            if (this.filterValue) {\n                const filteredOptions = FilterService.filter(options, this.searchFields, this.filterValue, this.filterMatchMode, this.filterLocale);\n\n                if (this.optionGroupLabel) {\n                    const optionGroups = this.options || [];\n                    const filtered = [];\n\n                    optionGroups.forEach((group) => {\n                        const groupChildren = this.getOptionGroupChildren(group);\n                        const filteredItems = groupChildren.filter((item) => filteredOptions.includes(item));\n\n                        if (filteredItems.length > 0) filtered.push({ ...group, [typeof this.optionGroupChildren === 'string' ? this.optionGroupChildren : 'items']: [...filteredItems] });\n                    });\n\n                    return this.flatOptions(filtered);\n                }\n\n                return filteredOptions;\n            }\n\n            return options;\n        },\n        label() {\n            // TODO: Refactor\n            let label;\n\n            if (this.modelValue && this.modelValue.length) {\n                if (ObjectUtils.isNotEmpty(this.maxSelectedLabels) && this.modelValue.length > this.maxSelectedLabels) {\n                    return this.getSelectedItemsLabel();\n                } else {\n                    label = '';\n\n                    for (let i = 0; i < this.modelValue.length; i++) {\n                        if (i !== 0) {\n                            label += ', ';\n                        }\n\n                        label += this.getLabelByValue(this.modelValue[i]);\n                    }\n                }\n            } else {\n                label = this.placeholder;\n            }\n\n            return label;\n        },\n        chipSelectedItems() {\n            return ObjectUtils.isNotEmpty(this.maxSelectedLabels) && this.modelValue && this.modelValue.length > this.maxSelectedLabels ? this.modelValue.slice(0, this.maxSelectedLabels) : this.modelValue;\n        },\n        allSelected() {\n            return this.selectAll !== null ? this.selectAll : ObjectUtils.isNotEmpty(this.visibleOptions) && this.visibleOptions.every((option) => this.isOptionGroup(option) || this.isOptionDisabled(option) || this.isSelected(option));\n        },\n        hasSelectedOption() {\n            return ObjectUtils.isNotEmpty(this.modelValue);\n        },\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        searchFields() {\n            return this.filterFields || [this.optionLabel];\n        },\n        maxSelectionLimitReached() {\n            return this.selectionLimit && this.modelValue && this.modelValue.length === this.selectionLimit;\n        },\n        filterResultMessageText() {\n            return ObjectUtils.isNotEmpty(this.visibleOptions) ? this.filterMessageText.replaceAll('{0}', this.visibleOptions.length) : this.emptyFilterMessageText;\n        },\n        filterMessageText() {\n            return this.filterMessage || this.$primevue.config.locale.searchMessage || '';\n        },\n        emptyFilterMessageText() {\n            return this.emptyFilterMessage || this.$primevue.config.locale.emptySearchMessage || this.$primevue.config.locale.emptyFilterMessage || '';\n        },\n        emptyMessageText() {\n            return this.emptyMessage || this.$primevue.config.locale.emptyMessage || '';\n        },\n        selectionMessageText() {\n            return this.selectionMessage || this.$primevue.config.locale.selectionMessage || '';\n        },\n        emptySelectionMessageText() {\n            return this.emptySelectionMessage || this.$primevue.config.locale.emptySelectionMessage || '';\n        },\n        selectedMessageText() {\n            return this.hasSelectedOption ? this.selectionMessageText.replaceAll('{0}', this.modelValue.length) : this.emptySelectionMessageText;\n        },\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? `${this.id}_${this.focusedOptionIndex}` : null;\n        },\n        ariaSetSize() {\n            return this.visibleOptions.filter((option) => !this.isOptionGroup(option)).length;\n        },\n        toggleAllAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria[this.allSelected ? 'selectAll' : 'unselectAll'] : undefined;\n        },\n        closeAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.close : undefined;\n        },\n        listAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.listLabel : undefined;\n        },\n        virtualScrollerDisabled() {\n            return !this.virtualScrollerOptions;\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        InputText,\n        Checkbox,\n        VirtualScroller,\n        Portal,\n        Chip,\n        IconField,\n        InputIcon,\n        TimesIcon,\n        SearchIcon,\n        ChevronDownIcon,\n        SpinnerIcon,\n        CheckIcon\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","modelValue","options","Array","optionLabel","optionValue","optionDisabled","optionGroupLabel","optionGroupChildren","scrollHeight","type","String","placeholder","variant","invalid","Boolean","disabled","inputId","panelClass","panelStyle","overlayClass","overlayStyle","dataKey","filter","filterPlaceholder","filterLocale","filterMatchMode","filterFields","appendTo","Object","display","selectedItemsLabel","maxSelectedLabels","Number","selectionLimit","showToggleAll","loading","checkboxIcon","undefined","closeIcon","dropdownIcon","filterIcon","loadingIcon","removeTokenIcon","chipIcon","selectAll","resetFilterOnHide","virtualScrollerOptions","autoOptionFocus","autoFilterFocus","focusOnHover","highlightOnSelect","filterMessage","selectionMessage","emptySelectionMessage","emptyFilterMessage","emptyMessage","tabindex","ariaLabel","ariaLabelledby","style","MultiSelectStyle","provide","$pcMultiSelect","$parentInstance","BaseMultiSelect","inheritAttrs","emits","outsideClickListener","scrollHandler","resizeListener","overlay","list","virtualScroller","startRangeIndex","searchTimeout","searchValue","selectOnFocus","data","id","$attrs","clicked","focused","focusedOptionIndex","filterValue","overlayVisible","watch","$attrsId","newValue","UniqueComponentId","autoUpdateModel","mounted","beforeUnmount","unbindOutsideClickListener","unbindResizeListener","destroy","ZIndexUtils","clear","methods","getOptionIndex","index","fn","virtualScrollerDisabled","getOptionLabel","option","ObjectUtils","resolveFieldData","getOptionValue","getOptionRenderKey","getHeaderCheckboxPTOptions","key","ptm","context","selected","allSelected","getCheckboxPTOptions","itemOptions","isSelected","isOptionDisabled","maxSelectionLimitReached","isOptionGroup","optionGroup","group","getOptionGroupLabel","getOptionGroupChildren","getAriaPosInset","_this","visibleOptions","slice","length","show","isFocus","$emit","findFirstFocusedOptionIndex","findSelectedOptionIndex","DomHandler","focus","$refs","focusInput","hide","_this2","_hide","setTimeout","onFocus","event","scrollInView","onBlur","onKeyDown","_this3","preventDefault","metaKey","ctrlKey","code","onArrowDownKey","onArrowUpKey","onHomeKey","onEndKey","onPageDownKey","onPageUpKey","onEnterKey","onEscapeKey","onTabKey","onShiftKey","value","isValidOption","map","updateModel","isPrintableCharacter","searchOptions","onContainerClick","contains","target","onFirstHiddenFocus","focusableEl","relatedTarget","getFirstFocusableElement","onLastHiddenFocus","getLastFocusableElement","onOptionSelect","_this4","arguments","val","equals","equalityKey","concat","_toConsumableArray","onOptionMouseMove","changeFocusedOptionIndex","onOptionSelectRange","_this5","start","end","findNearestSelectedOptionIndex","rangeStart","Math","min","rangeEnd","max","onFilterChange","originalEvent","scrollToIndex","onFilterKeyDown","onArrowLeftKey","onFilterBlur","onFilterUpdated","alignOverlay","onOverlayClick","OverlayEventBus","emit","$el","onOverlayKeyDown","optionIndex","findNextOptionIndex","findFirstOptionIndex","shiftKey","pressedInInputText","altKey","findPrevOptionIndex","findLastOptionIndex","findLastFocusedOptionIndex","currentTarget","setSelectionRange","selectionStart","len","hasFocusableElements","lastHiddenFocusableElementOnOverlay","firstHiddenFocusableElementOnOverlay","onOverlayEnter","el","set","$primevue","config","zIndex","addStyles","position","top","left","filterInput","onOverlayAfterEnter","bindOutsideClickListener","bindScrollListener","bindResizeListener","onOverlayLeave","unbindScrollListener","onOverlayAfterLeave","relativePosition","minWidth","getOuterWidth","absolutePosition","_this6","isOutsideClicked","document","addEventListener","removeEventListener","_this7","ConnectedOverlayScrollHandler","container","_this8","isTouchDevice","window","isSameNode","getLabelByValue","_this9","flatOptions","matchedOption","find","getSelectedItemsLabel","pattern","locale","test","replace","match","onToggleAll","_this10","checked","removeOption","_this11","stopPropagation","clearFilter","getFocusableElements","isOptionMatched","_this$getOptionLabel","toLocaleLowerCase","startsWith","isNotEmpty","isValidSelectedOption","isEquals","value1","value2","_this12","some","_this13","findIndex","_this14","findLastIndex","_this15","matchedOptionIndex","_this16","_this17","hasSelectedOption","_loop","v","_ret","findFirstSelectedOptionIndex","_this18","findLastSelectedOptionIndex","_this19","findNextSelectedOptionIndex","_this20","findPrevSelectedOptionIndex","_this21","firstCheckUp","selectedIndex","_this22","clearTimeout","_this23","$nextTick","focusedOptionId","element","findSingle","scrollIntoView","block","inline","_this24","reduce","result","push","forEach","o","overlayRef","listRef","contentRef","virtualScrollerRef","computed","_this25","filteredOptions","FilterService","searchFields","optionGroups","filtered","groupChildren","filteredItems","item","includes","_objectSpread","_defineProperty","label","i","chipSelectedItems","_this26","every","filterResultMessageText","filterMessageText","replaceAll","emptyFilterMessageText","searchMessage","emptySearchMessage","emptyMessageText","selectionMessageText","emptySelectionMessageText","selectedMessageText","ariaSetSize","_this27","toggleAllAriaLabel","aria","closeAriaLabel","close","listAriaLabel","listLabel","directives","ripple","Ripple","components","InputText","Checkbox","VirtualScroller","Portal","Chip","IconField","InputIcon","TimesIcon","SearchIcon","ChevronDownIcon","SpinnerIcon","CheckIcon","_openBlock","_createElementBlock","_mergeProps","ref","_ctx","cx","sx","onClick","$options","apply","ptmi","_createElementVNode","readonly","role","$data","onKeydown","_hoisted_1","_renderSlot","$slots","_Fragment","_renderList","removeCallback","_createVNode","_component_Chip","removeIcon","removable","unstyled","onRemove","$event","pt","removeicon","chipicon","_createBlock","_component_SpinnerIcon","spin","_resolveDynamicComponent","_component_Portal","_Transition","onEnter","onAfterEnter","onLeave","onAfterLeave","_component_Checkbox","binary","onChange","icon","_withCtx","slotProps","headercheckboxicon","_normalizeClass","_component_IconField","_component_InputText","onVnodeMounted","onVnodeUpdated","autocomplete","onInput","_component_InputIcon","_component_SearchIcon","_component_VirtualScroller","items","content","_ref2","styleClass","getItemOptions","contentStyle","itemSize","height","_withDirectives","onMousemove","optioncheckboxicon","itemcheckboxicon","ref_for","_toDisplayString","loader","_ref4"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIA,eAAe;AACXA,EAAAA,IAAI,EAAE,iBAAiB;AACvB,EAAA,SAAA,EAASC,aAAa;AACtBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,UAAU,EAAE,IAAI;AAChBC,IAAAA,OAAO,EAAEC,KAAK;AACdC,IAAAA,WAAW,EAAE,IAAI;AACjBC,IAAAA,WAAW,EAAE,IAAI;AACjBC,IAAAA,cAAc,EAAE,IAAI;AACpBC,IAAAA,gBAAgB,EAAE,IAAI;AACtBC,IAAAA,mBAAmB,EAAE,IAAI;AACzBC,IAAAA,YAAY,EAAE;AACVC,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,OAAA;KACZ;AACDC,IAAAA,WAAW,EAAED,MAAM;AACnBE,IAAAA,OAAO,EAAE;AACLH,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDG,IAAAA,OAAO,EAAE;AACLJ,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,KAAA;KACZ;AACDC,IAAAA,QAAQ,EAAED,OAAO;AACjBE,IAAAA,OAAO,EAAE;AACLP,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDO,IAAAA,UAAU,EAAE;AACRR,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDQ,IAAAA,UAAU,EAAE;AACRT,MAAAA,IAAI,EAAE,IAAI;MACV,SAAS,EAAA,IAAA;KACZ;AACDU,IAAAA,YAAY,EAAE;AACVV,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDU,IAAAA,YAAY,EAAE;AACVX,MAAAA,IAAI,EAAE,IAAI;MACV,SAAS,EAAA,IAAA;KACZ;AACDY,IAAAA,OAAO,EAAE,IAAI;AACbC,IAAAA,MAAM,EAAER,OAAO;AACfS,IAAAA,iBAAiB,EAAEb,MAAM;AACzBc,IAAAA,YAAY,EAAEd,MAAM;AACpBe,IAAAA,eAAe,EAAE;AACbhB,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,UAAA;KACZ;AACDgB,IAAAA,YAAY,EAAE;AACVjB,MAAAA,IAAI,EAAEP,KAAK;MACX,SAAS,EAAA,IAAA;KACZ;AACDyB,IAAAA,QAAQ,EAAE;AACNlB,MAAAA,IAAI,EAAE,CAACC,MAAM,EAAEkB,MAAM,CAAC;MACtB,SAAS,EAAA,MAAA;KACZ;AACDC,IAAAA,OAAO,EAAE;AACLpB,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,OAAA;KACZ;AACDoB,IAAAA,kBAAkB,EAAE;AAChBrB,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,oBAAA;KACZ;AACDqB,IAAAA,iBAAiB,EAAE;AACftB,MAAAA,IAAI,EAAEuB,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDC,IAAAA,cAAc,EAAE;AACZxB,MAAAA,IAAI,EAAEuB,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDE,IAAAA,aAAa,EAAE;AACXzB,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,IAAA;KACZ;AACDqB,IAAAA,OAAO,EAAE;AACL1B,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,KAAA;KACZ;AACDsB,IAAAA,YAAY,EAAE;AACV3B,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDC,IAAAA,SAAS,EAAE;AACP7B,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDE,IAAAA,YAAY,EAAE;AACV9B,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDG,IAAAA,UAAU,EAAE;AACR/B,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDI,IAAAA,WAAW,EAAE;AACThC,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDK,IAAAA,eAAe,EAAE;AACbjC,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDM,IAAAA,QAAQ,EAAE;AACNlC,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS2B,EAAAA,SAAAA;KACZ;AACDO,IAAAA,SAAS,EAAE;AACPnC,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,IAAA;KACZ;AACD+B,IAAAA,iBAAiB,EAAE;AACfpC,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,KAAA;KACZ;AACDgC,IAAAA,sBAAsB,EAAE;AACpBrC,MAAAA,IAAI,EAAEmB,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDmB,IAAAA,eAAe,EAAE;AACbtC,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,KAAA;KACZ;AACDkC,IAAAA,eAAe,EAAE;AACbvC,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,KAAA;KACZ;AACDmC,IAAAA,YAAY,EAAE;AACVxC,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,IAAA;KACZ;AACDoC,IAAAA,iBAAiB,EAAE;AACfzC,MAAAA,IAAI,EAAEK,OAAO;MACb,SAAS,EAAA,KAAA;KACZ;AACDqC,IAAAA,aAAa,EAAE;AACX1C,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACD0C,IAAAA,gBAAgB,EAAE;AACd3C,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACD2C,IAAAA,qBAAqB,EAAE;AACnB5C,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACD4C,IAAAA,kBAAkB,EAAE;AAChB7C,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACD6C,IAAAA,YAAY,EAAE;AACV9C,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACD8C,IAAAA,QAAQ,EAAE;AACN/C,MAAAA,IAAI,EAAEuB,MAAM;MACZ,SAAS,EAAA,CAAA;KACZ;AACDyB,IAAAA,SAAS,EAAE;AACPhD,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;KACZ;AACDgD,IAAAA,cAAc,EAAE;AACZjD,MAAAA,IAAI,EAAEC,MAAM;MACZ,SAAS,EAAA,IAAA;AACb,KAAA;GACH;AACDiD,EAAAA,KAAK,EAAEC,gBAAgB;EACvBC,OAAO,EAAA,SAAAA,UAAG;IACN,OAAO;AACHC,MAAAA,cAAc,EAAE,IAAI;AACpBC,MAAAA,eAAe,EAAE,IAAA;KACpB,CAAA;AACL,GAAA;AACJ,CAAC;;;;;;;;;;;;;;ACwCD,aAAe;AACXlE,EAAAA,IAAI,EAAE,aAAa;AACnB,EAAA,SAAA,EAASmE,QAAe;AACxBC,EAAAA,YAAY,EAAE,KAAK;EACnBC,KAAK,EAAE,CAAC,mBAAmB,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,kBAAkB,CAAC;AACnIC,EAAAA,oBAAoB,EAAE,IAAI;AAC1BC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,cAAc,EAAE,IAAI;AACpBC,EAAAA,OAAO,EAAE,IAAI;AACbC,EAAAA,IAAI,EAAE,IAAI;AACVC,EAAAA,eAAe,EAAE,IAAI;EACrBC,eAAe,EAAE,CAAC,CAAC;AACnBC,EAAAA,aAAa,EAAE,IAAI;AACnBC,EAAAA,WAAW,EAAE,EAAE;AACfC,EAAAA,aAAa,EAAE,KAAK;EACpBC,IAAI,EAAA,SAAAA,OAAG;IACH,OAAO;AACHC,MAAAA,EAAE,EAAE,IAAI,CAACC,MAAM,CAACD,EAAE;AAClBE,MAAAA,OAAO,EAAE,KAAK;AACdC,MAAAA,OAAO,EAAE,KAAK;MACdC,kBAAkB,EAAE,CAAC,CAAC;AACtBC,MAAAA,WAAW,EAAE,IAAI;AACjBC,MAAAA,cAAc,EAAE,KAAA;KACnB,CAAA;GACJ;AACDC,EAAAA,KAAK,EAAE;AACH,IAAA,WAAW,EAAE,SAAAC,QAAUC,CAAAA,QAAQ,EAAE;AAC7B,MAAA,IAAI,CAACT,EAAG,GAAES,YAAYC,iBAAiB,EAAE,CAAA;KAC5C;IACDvF,OAAO,EAAA,SAAAA,UAAG;MACN,IAAI,CAACwF,eAAe,EAAE,CAAA;AAC1B,KAAA;GACH;EACDC,OAAO,EAAA,SAAAA,UAAG;IACN,IAAI,CAACZ,EAAG,GAAE,IAAI,CAACA,EAAC,IAAKU,iBAAiB,EAAE,CAAA;IACxC,IAAI,CAACC,eAAe,EAAE,CAAA;GACzB;EACDE,aAAa,EAAA,SAAAA,gBAAG;IACZ,IAAI,CAACC,0BAA0B,EAAE,CAAA;IACjC,IAAI,CAACC,oBAAoB,EAAE,CAAA;IAE3B,IAAI,IAAI,CAACzB,aAAa,EAAE;AACpB,MAAA,IAAI,CAACA,aAAa,CAAC0B,OAAO,EAAE,CAAA;MAC5B,IAAI,CAAC1B,gBAAgB,IAAI,CAAA;AAC7B,KAAA;IAEA,IAAI,IAAI,CAACE,OAAO,EAAE;AACdyB,MAAAA,WAAW,CAACC,KAAK,CAAC,IAAI,CAAC1B,OAAO,CAAC,CAAA;MAC/B,IAAI,CAACA,OAAQ,GAAE,IAAI,CAAA;AACvB,KAAA;GACH;AACD2B,EAAAA,OAAO,EAAE;AACLC,IAAAA,cAAc,EAAAA,SAAAA,cAAAA,CAACC,KAAK,EAAEC,EAAE,EAAE;AACtB,MAAA,OAAO,IAAI,CAACC,uBAAwB,GAAEF,KAAM,GAAEC,EAAC,IAAKA,EAAE,CAACD,KAAK,CAAC,CAAC,OAAO,CAAC,CAAA;KACzE;IACDG,cAAc,EAAA,SAAAA,cAACC,CAAAA,MAAM,EAAE;AACnB,MAAA,OAAO,IAAI,CAACpG,WAAU,GAAIqG,WAAW,CAACC,gBAAgB,CAACF,MAAM,EAAE,IAAI,CAACpG,WAAW,IAAIoG,MAAM,CAAA;KAC5F;IACDG,cAAc,EAAA,SAAAA,cAACH,CAAAA,MAAM,EAAE;AACnB,MAAA,OAAO,IAAI,CAACnG,WAAU,GAAIoG,WAAW,CAACC,gBAAgB,CAACF,MAAM,EAAE,IAAI,CAACnG,WAAW,IAAImG,MAAM,CAAA;KAC5F;AACDI,IAAAA,kBAAkB,EAAAA,SAAAA,kBAAAA,CAACJ,MAAM,EAAEJ,KAAK,EAAE;MAC9B,OAAO,IAAI,CAAC9E,OAAQ,GAAEmF,WAAW,CAACC,gBAAgB,CAACF,MAAM,EAAE,IAAI,CAAClF,OAAO,IAAI,IAAI,CAACiF,cAAc,CAACC,MAAM,eAAQJ,KAAK,CAAE,CAAA;KACvH;IACDS,0BAA0B,EAAA,SAAAA,0BAACC,CAAAA,GAAG,EAAE;AAC5B,MAAA,OAAO,IAAI,CAACC,GAAG,CAACD,GAAG,EAAE;AACjBE,QAAAA,OAAO,EAAE;UACLC,QAAQ,EAAE,IAAI,CAACC,WAAAA;AACnB,SAAA;AACJ,OAAC,CAAC,CAAA;KACL;IACDC,oBAAoB,EAAA,SAAAA,qBAACX,MAAM,EAAEY,WAAW,EAAEhB,KAAK,EAAEU,GAAG,EAAE;AAClD,MAAA,OAAO,IAAI,CAACC,GAAG,CAACD,GAAG,EAAE;AACjBE,QAAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAE,IAAI,CAACI,UAAU,CAACb,MAAM,CAAC;AACjCtB,UAAAA,OAAO,EAAE,IAAI,CAACC,kBAAiB,KAAM,IAAI,CAACgB,cAAc,CAACC,KAAK,EAAEgB,WAAW,CAAC;AAC5EpG,UAAAA,QAAQ,EAAE,IAAI,CAACsG,gBAAgB,CAACd,MAAM,CAAA;AAC1C,SAAA;AACJ,OAAC,CAAC,CAAA;KACL;IACDc,gBAAgB,EAAA,SAAAA,gBAACd,CAAAA,MAAM,EAAE;MACrB,IAAI,IAAI,CAACe,wBAAuB,IAAK,CAAC,IAAI,CAACF,UAAU,CAACb,MAAM,CAAC,EAAE;AAC3D,QAAA,OAAO,IAAI,CAAA;AACf,OAAA;AAEA,MAAA,OAAO,IAAI,CAAClG,cAAe,GAAEmG,WAAW,CAACC,gBAAgB,CAACF,MAAM,EAAE,IAAI,CAAClG,cAAc,CAAE,GAAE,KAAK,CAAA;KACjG;IACDkH,aAAa,EAAA,SAAAA,aAAChB,CAAAA,MAAM,EAAE;MAClB,OAAO,IAAI,CAACjG,gBAAiB,IAAGiG,MAAM,CAACiB,WAAY,IAAGjB,MAAM,CAACkB,KAAK,CAAA;KACrE;IACDC,mBAAmB,EAAA,SAAAA,mBAACF,CAAAA,WAAW,EAAE;MAC7B,OAAOhB,WAAW,CAACC,gBAAgB,CAACe,WAAW,EAAE,IAAI,CAAClH,gBAAgB,CAAC,CAAA;KAC1E;IACDqH,sBAAsB,EAAA,SAAAA,sBAACH,CAAAA,WAAW,EAAE;MAChC,OAAOhB,WAAW,CAACC,gBAAgB,CAACe,WAAW,EAAE,IAAI,CAACjH,mBAAmB,CAAC,CAAA;KAC7E;IACDqH,eAAe,EAAA,SAAAA,eAACzB,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAA0B,KAAA,GAAA,IAAA,CAAA;MACnB,OAAO,CAAC,IAAI,CAACvH,gBAAiB,GAAE6F,KAAI,GAAI,IAAI,CAAC2B,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE5B,KAAK,CAAC,CAAC7E,MAAM,CAAC,UAACiF,MAAM,EAAA;AAAA,QAAA,OAAKsB,KAAI,CAACN,aAAa,CAAChB,MAAM,CAAC,CAAA;AAAA,OAAA,CAAC,CAACyB,MAAO,GAAE7B,KAAK,IAAI,CAAC,CAAA;KACjJ;IACD8B,IAAI,EAAA,SAAAA,IAACC,CAAAA,OAAO,EAAE;AACV,MAAA,IAAI,CAACC,KAAK,CAAC,aAAa,CAAC,CAAA;MACzB,IAAI,CAAC/C,iBAAiB,IAAI,CAAA;AAC1B,MAAA,IAAI,CAACF,kBAAmB,GAAE,IAAI,CAACA,kBAAiB,KAAM,CAAC,CAAA,GAAI,IAAI,CAACA,qBAAqB,IAAI,CAACnC,eAAgB,GAAE,IAAI,CAACqF,2BAA2B,EAAC,GAAI,IAAI,CAACC,uBAAuB,EAAE,CAAA;MAE/KH,OAAQ,IAAGI,UAAU,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAAC,CAAA;KACrD;IACDC,IAAI,EAAA,SAAAA,IAACR,CAAAA,OAAO,EAAE;AAAA,MAAA,IAAAS,MAAA,GAAA,IAAA,CAAA;AACV,MAAA,IAAMC,KAAM,GAAE,SAARA,KAAMA,GAAQ;AAChBD,QAAAA,MAAI,CAACR,KAAK,CAAC,aAAa,CAAC,CAAA;QACzBQ,MAAI,CAACvD,cAAa,GAAI,KAAK,CAAA;QAC3BuD,MAAI,CAAC3D,UAAU,KAAK,CAAA;AACpB2D,QAAAA,MAAI,CAACzD,kBAAiB,GAAI,CAAC,CAAC,CAAA;QAC5ByD,MAAI,CAAChE,WAAY,GAAE,EAAE,CAAA;QAErBgE,MAAI,CAAC9F,iBAAkB,KAAI8F,MAAI,CAACxD,WAAU,GAAI,IAAI,CAAC,CAAA;QACnD+C,OAAQ,IAAGI,UAAU,CAACC,KAAK,CAACI,MAAI,CAACH,KAAK,CAACC,UAAU,CAAC,CAAA;OACrD,CAAA;AAEDI,MAAAA,UAAU,CAAC,YAAM;AACbD,QAAAA,KAAK,EAAE,CAAA;AACX,OAAC,EAAE,CAAC,CAAC,CAAA;KACR;IACDE,OAAO,EAAA,SAAAA,OAACC,CAAAA,KAAK,EAAE;MACX,IAAI,IAAI,CAAChI,QAAQ,EAAE;AACf;AACA,QAAA,OAAA;AACJ,OAAA;MAEA,IAAI,CAACkE,OAAQ,GAAE,IAAI,CAAA;MAEnB,IAAI,IAAI,CAACG,cAAc,EAAE;AACrB,QAAA,IAAI,CAACF,kBAAmB,GAAE,IAAI,CAACA,kBAAiB,KAAM,CAAC,CAAA,GAAI,IAAI,CAACA,qBAAqB,IAAI,CAACnC,eAAgB,GAAE,IAAI,CAACqF,2BAA2B,EAAC,GAAI,IAAI,CAACC,uBAAuB,EAAE,CAAA;AAC/K,QAAA,IAAI,CAACW,YAAY,CAAC,IAAI,CAAC9D,kBAAkB,CAAC,CAAA;AAC9C,OAAA;AAEA,MAAA,IAAI,CAACiD,KAAK,CAAC,OAAO,EAAEY,KAAK,CAAC,CAAA;KAC7B;IACDE,MAAM,EAAA,SAAAA,MAACF,CAAAA,KAAK,EAAE;MACV,IAAI,CAAC/D,UAAU,KAAK,CAAA;MACpB,IAAI,CAACC,UAAU,KAAK,CAAA;AACpB,MAAA,IAAI,CAACC,kBAAiB,GAAI,CAAC,CAAC,CAAA;MAC5B,IAAI,CAACP,WAAY,GAAE,EAAE,CAAA;AACrB,MAAA,IAAI,CAACwD,KAAK,CAAC,MAAM,EAAEY,KAAK,CAAC,CAAA;KAC5B;IACDG,SAAS,EAAA,SAAAA,SAACH,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAI,MAAA,GAAA,IAAA,CAAA;MACb,IAAI,IAAI,CAACpI,QAAQ,EAAE;QACfgI,KAAK,CAACK,cAAc,EAAE,CAAA;AAEtB,QAAA,OAAA;AACJ,OAAA;MAEA,IAAMC,UAAUN,KAAK,CAACM,WAAWN,KAAK,CAACO,OAAO,CAAA;MAE9C,QAAQP,KAAK,CAACQ,IAAI;AACd,QAAA,KAAK,WAAW;AACZ,UAAA,IAAI,CAACC,cAAc,CAACT,KAAK,CAAC,CAAA;AAC1B,UAAA,MAAA;AAEJ,QAAA,KAAK,SAAS;AACV,UAAA,IAAI,CAACU,YAAY,CAACV,KAAK,CAAC,CAAA;AACxB,UAAA,MAAA;AAEJ,QAAA,KAAK,MAAM;AACP,UAAA,IAAI,CAACW,SAAS,CAACX,KAAK,CAAC,CAAA;AACrB,UAAA,MAAA;AAEJ,QAAA,KAAK,KAAK;AACN,UAAA,IAAI,CAACY,QAAQ,CAACZ,KAAK,CAAC,CAAA;AACpB,UAAA,MAAA;AAEJ,QAAA,KAAK,UAAU;AACX,UAAA,IAAI,CAACa,aAAa,CAACb,KAAK,CAAC,CAAA;AACzB,UAAA,MAAA;AAEJ,QAAA,KAAK,QAAQ;AACT,UAAA,IAAI,CAACc,WAAW,CAACd,KAAK,CAAC,CAAA;AACvB,UAAA,MAAA;AAEJ,QAAA,KAAK,OAAO,CAAA;AACZ,QAAA,KAAK,aAAa,CAAA;AAClB,QAAA,KAAK,OAAO;AACR,UAAA,IAAI,CAACe,UAAU,CAACf,KAAK,CAAC,CAAA;AACtB,UAAA,MAAA;AAEJ,QAAA,KAAK,QAAQ;AACT,UAAA,IAAI,CAACgB,WAAW,CAAChB,KAAK,CAAC,CAAA;AACvB,UAAA,MAAA;AAEJ,QAAA,KAAK,KAAK;AACN,UAAA,IAAI,CAACiB,QAAQ,CAACjB,KAAK,CAAC,CAAA;AACpB,UAAA,MAAA;AAEJ,QAAA,KAAK,WAAW,CAAA;AAChB,QAAA,KAAK,YAAY;AACb,UAAA,IAAI,CAACkB,UAAU,CAAClB,KAAK,CAAC,CAAA;AACtB,UAAA,MAAA;AAEJ,QAAA;AACI,UAAA,IAAIA,KAAK,CAACQ,IAAG,KAAM,MAAK,IAAKF,OAAO,EAAE;YAClC,IAAMa,KAAI,GAAI,IAAI,CAACpC,cAAc,CAACxG,MAAM,CAAC,UAACiF,MAAM,EAAA;AAAA,cAAA,OAAK4C,MAAI,CAACgB,aAAa,CAAC5D,MAAM,CAAC,CAAA;AAAA,aAAA,CAAC,CAAC6D,GAAG,CAAC,UAAC7D,MAAM,EAAA;AAAA,cAAA,OAAK4C,MAAI,CAACzC,cAAc,CAACH,MAAM,CAAC,CAAA;aAAC,CAAA,CAAA;AAE7H,YAAA,IAAI,CAAC8D,WAAW,CAACtB,KAAK,EAAEmB,KAAK,CAAC,CAAA;YAE9BnB,KAAK,CAACK,cAAc,EAAE,CAAA;AACtB,YAAA,MAAA;AACJ,WAAA;UAEA,IAAI,CAACC,OAAM,IAAK7C,WAAW,CAAC8D,oBAAoB,CAACvB,KAAK,CAAClC,GAAG,CAAC,EAAE;YACzD,CAAC,IAAI,CAACzB,cAAa,IAAK,IAAI,CAAC6C,IAAI,EAAE,CAAA;AACnC,YAAA,IAAI,CAACsC,aAAa,CAACxB,KAAK,CAAC,CAAA;YACzBA,KAAK,CAACK,cAAc,EAAE,CAAA;AAC1B,WAAA;AAEA,UAAA,MAAA;AACR,OAAA;MAEA,IAAI,CAACpE,UAAU,KAAK,CAAA;KACvB;IACDwF,gBAAgB,EAAA,SAAAA,gBAACzB,CAAAA,KAAK,EAAE;AACpB,MAAA,IAAI,IAAI,CAAChI,QAAS,IAAG,IAAI,CAACoB,OAAO,EAAE;AAC/B,QAAA,OAAA;AACJ,OAAA;AAEA,MAAA,IAAI,CAAC,IAAI,CAACmC,OAAM,IAAK,CAAC,IAAI,CAACA,OAAO,CAACmG,QAAQ,CAAC1B,KAAK,CAAC2B,MAAM,CAAC,EAAE;AACvD,QAAA,IAAI,CAACtF,iBAAiB,IAAI,CAACsD,IAAI,CAAC,IAAI,CAAE,GAAE,IAAI,CAACT,IAAI,CAAC,IAAI,CAAC,CAAA;AAC3D,OAAA;MAEA,IAAI,CAACjD,OAAQ,GAAE,IAAI,CAAA;KACtB;IACD2F,kBAAkB,EAAA,SAAAA,kBAAC5B,CAAAA,KAAK,EAAE;MACtB,IAAM6B,WAAY,GAAE7B,KAAK,CAAC8B,aAAY,KAAM,IAAI,CAACrC,KAAK,CAACC,UAAW,GAAEH,UAAU,CAACwC,wBAAwB,CAAC,IAAI,CAACxG,OAAO,EAAE,wCAAwC,CAAE,GAAE,IAAI,CAACkE,KAAK,CAACC,UAAU,CAAA;AAEvLH,MAAAA,UAAU,CAACC,KAAK,CAACqC,WAAW,CAAC,CAAA;KAChC;IACDG,iBAAiB,EAAA,SAAAA,iBAAChC,CAAAA,KAAK,EAAE;MACrB,IAAM6B,WAAY,GAAE7B,KAAK,CAAC8B,aAAY,KAAM,IAAI,CAACrC,KAAK,CAACC,UAAW,GAAEH,UAAU,CAAC0C,uBAAuB,CAAC,IAAI,CAAC1G,OAAO,EAAE,wCAAwC,CAAE,GAAE,IAAI,CAACkE,KAAK,CAACC,UAAU,CAAA;AAEtLH,MAAAA,UAAU,CAACC,KAAK,CAACqC,WAAW,CAAC,CAAA;KAChC;AACDK,IAAAA,cAAc,EAAAA,SAAAA,cAAAA,CAAClC,KAAK,EAAExC,MAAM,EAA+B;AAAA,MAAA,IAAA2E,MAAA,GAAA,IAAA,CAAA;AAAA,MAAA,IAA7B/E,KAAM,GAAAgF,SAAA,CAAAnD,MAAA,GAAA,CAAA,IAAAmD,SAAA,CAAA,CAAA,CAAA,KAAA9I,SAAA,GAAA8I,SAAA,CAAA,CAAA,CAAA,GAAE,CAAC,CAAC,CAAA;AAAA,MAAA,IAAEjD,OAAQ,GAAAiD,SAAA,CAAAnD,MAAA,GAAA,CAAA,IAAAmD,SAAA,CAAA,CAAA,CAAA,KAAA9I,SAAA,GAAA8I,SAAA,CAAA,CAAA,CAAA,GAAE,KAAK,CAAA;MACrD,IAAI,IAAI,CAACpK,QAAS,IAAG,IAAI,CAACsG,gBAAgB,CAACd,MAAM,CAAC,EAAE;AAChD,QAAA,OAAA;AACJ,OAAA;AAEA,MAAA,IAAIS,QAAS,GAAE,IAAI,CAACI,UAAU,CAACb,MAAM,CAAC,CAAA;MACtC,IAAI2D,KAAI,GAAI,IAAI,CAAA;MAEhB,IAAIlD,QAAQ,EAAEkD,KAAI,GAAI,IAAI,CAAClK,UAAU,CAACsB,MAAM,CAAC,UAAC8J,GAAG,EAAA;AAAA,QAAA,OAAK,CAAC5E,WAAW,CAAC6E,MAAM,CAACD,GAAG,EAAEF,MAAI,CAACxE,cAAc,CAACH,MAAM,CAAC,EAAE2E,MAAI,CAACI,WAAW,CAAC,CAAA;OAAC,CAAA,CAAA,KACzHpB,KAAI,GAAA,EAAA,CAAAqB,MAAA,CAAAC,kBAAA,CAAS,IAAI,CAACxL,cAAc,EAAE,IAAG,IAAI,CAAC0G,cAAc,CAACH,MAAM,CAAC,CAAC,CAAA,CAAA;AAEtE,MAAA,IAAI,CAAC8D,WAAW,CAACtB,KAAK,EAAEmB,KAAK,CAAC,CAAA;MAC9B/D,UAAU,CAAC,CAAA,KAAM,IAAI,CAACjB,qBAAqBiB,KAAK,CAAC,CAAA;MACjD+B,OAAQ,IAAGI,UAAU,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAAC,CAAA;KACrD;AACDgD,IAAAA,iBAAiB,EAAAA,SAAAA,iBAAAA,CAAC1C,KAAK,EAAE5C,KAAK,EAAE;MAC5B,IAAI,IAAI,CAAClD,YAAY,EAAE;AACnB,QAAA,IAAI,CAACyI,wBAAwB,CAAC3C,KAAK,EAAE5C,KAAK,CAAC,CAAA;AAC/C,OAAA;KACH;IACDwF,mBAAmB,EAAA,SAAAA,mBAAC5C,CAAAA,KAAK,EAAwB;AAAA,MAAA,IAAA6C,MAAA,GAAA,IAAA,CAAA;AAAA,MAAA,IAAtBC,KAAM,GAAAV,SAAA,CAAAnD,MAAA,GAAA,CAAA,IAAAmD,SAAA,CAAA,CAAA,CAAA,KAAA9I,SAAA,GAAA8I,SAAA,CAAA,CAAA,CAAA,GAAE,CAAC,CAAC,CAAA;AAAA,MAAA,IAAEW,0EAAM,CAAC,CAAC,CAAA;AAC3CD,MAAAA,KAAI,KAAM,CAAC,CAAE,KAAIA,KAAM,GAAE,IAAI,CAACE,8BAA8B,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC,CAAA;AACxEA,MAAAA,GAAI,KAAI,CAAC,CAAA,KAAMA,GAAE,GAAI,IAAI,CAACC,8BAA8B,CAACF,KAAK,CAAC,CAAC,CAAA;MAEhE,IAAIA,KAAI,KAAM,CAAC,KAAKC,GAAE,KAAM,CAAC,CAAC,EAAE;QAC5B,IAAME,aAAaC,IAAI,CAACC,GAAG,CAACL,KAAK,EAAEC,GAAG,CAAC,CAAA;QACvC,IAAMK,QAAO,GAAIF,IAAI,CAACG,GAAG,CAACP,KAAK,EAAEC,GAAG,CAAC,CAAA;AACrC,QAAA,IAAM5B,KAAI,GAAI,IAAI,CAACpC,cAAa,CAC3BC,KAAK,CAACiE,UAAU,EAAEG,QAAS,GAAE,CAAC,CAAA,CAC9B7K,MAAM,CAAC,UAACiF,MAAM,EAAA;AAAA,UAAA,OAAKqF,MAAI,CAACzB,aAAa,CAAC5D,MAAM,CAAC,CAAA;AAAA,SAAA,CAAA,CAC7C6D,GAAG,CAAC,UAAC7D,MAAM,EAAA;AAAA,UAAA,OAAKqF,MAAI,CAAClF,cAAc,CAACH,MAAM,CAAC,CAAA;SAAC,CAAA,CAAA;AAEjD,QAAA,IAAI,CAAC8D,WAAW,CAACtB,KAAK,EAAEmB,KAAK,CAAC,CAAA;AAClC,OAAA;KACH;IACDmC,cAAc,EAAA,SAAAA,cAACtD,CAAAA,KAAK,EAAE;AAClB,MAAA,IAAMmB,KAAI,GAAInB,KAAK,CAAC2B,MAAM,CAACR,KAAK,CAAA;MAEhC,IAAI,CAAC/E,WAAY,GAAE+E,KAAK,CAAA;AACxB,MAAA,IAAI,CAAChF,kBAAiB,GAAI,CAAC,CAAC,CAAA;AAC5B,MAAA,IAAI,CAACiD,KAAK,CAAC,QAAQ,EAAE;AAAEmE,QAAAA,aAAa,EAAEvD,KAAK;AAAEmB,QAAAA,KAAM,EAANA,KAAAA;AAAM,OAAC,CAAC,CAAA;MAErD,CAAC,IAAI,CAAC7D,uBAAsB,IAAK,IAAI,CAAC7B,eAAe,CAAC+H,aAAa,CAAC,CAAC,CAAC,CAAA;KACzE;IACDC,eAAe,EAAA,SAAAA,eAACzD,CAAAA,KAAK,EAAE;MACnB,QAAQA,KAAK,CAACQ,IAAI;AACd,QAAA,KAAK,WAAW;AACZ,UAAA,IAAI,CAACC,cAAc,CAACT,KAAK,CAAC,CAAA;AAC1B,UAAA,MAAA;AAEJ,QAAA,KAAK,SAAS;AACV,UAAA,IAAI,CAACU,YAAY,CAACV,KAAK,EAAE,IAAI,CAAC,CAAA;AAC9B,UAAA,MAAA;AAEJ,QAAA,KAAK,WAAW,CAAA;AAChB,QAAA,KAAK,YAAY;AACb,UAAA,IAAI,CAAC0D,cAAc,CAAC1D,KAAK,EAAE,IAAI,CAAC,CAAA;AAChC,UAAA,MAAA;AAEJ,QAAA,KAAK,MAAM;AACP,UAAA,IAAI,CAACW,SAAS,CAACX,KAAK,EAAE,IAAI,CAAC,CAAA;AAC3B,UAAA,MAAA;AAEJ,QAAA,KAAK,KAAK;AACN,UAAA,IAAI,CAACY,QAAQ,CAACZ,KAAK,EAAE,IAAI,CAAC,CAAA;AAC1B,UAAA,MAAA;AAEJ,QAAA,KAAK,OAAO,CAAA;AACZ,QAAA,KAAK,aAAa;AACd,UAAA,IAAI,CAACe,UAAU,CAACf,KAAK,CAAC,CAAA;AACtB,UAAA,MAAA;AAEJ,QAAA,KAAK,QAAQ;AACT,UAAA,IAAI,CAACgB,WAAW,CAAChB,KAAK,CAAC,CAAA;AACvB,UAAA,MAAA;AAEJ,QAAA,KAAK,KAAK;AACN,UAAA,IAAI,CAACiB,QAAQ,CAACjB,KAAK,EAAE,IAAI,CAAC,CAAA;AAC1B,UAAA,MAAA;AAIR,OAAA;KACH;IACD2D,YAAY,EAAA,SAAAA,eAAG;AACX,MAAA,IAAI,CAACxH,kBAAiB,GAAI,CAAC,CAAC,CAAA;KAC/B;IACDyH,eAAe,EAAA,SAAAA,kBAAG;MACd,IAAI,IAAI,CAACvH,cAAc,EAAE;QACrB,IAAI,CAACwH,YAAY,EAAE,CAAA;AACvB,OAAA;KACH;IACDC,cAAc,EAAA,SAAAA,cAAC9D,CAAAA,KAAK,EAAE;AAClB+D,MAAAA,eAAe,CAACC,IAAI,CAAC,eAAe,EAAE;AAClCT,QAAAA,aAAa,EAAEvD,KAAK;QACpB2B,MAAM,EAAE,IAAI,CAACsC,GAAAA;AACjB,OAAC,CAAC,CAAA;KACL;IACDC,gBAAgB,EAAA,SAAAA,gBAAClE,CAAAA,KAAK,EAAE;MACpB,QAAQA,KAAK,CAACQ,IAAI;AACd,QAAA,KAAK,QAAQ;AACT,UAAA,IAAI,CAACQ,WAAW,CAAChB,KAAK,CAAC,CAAA;AACvB,UAAA,MAAA;AAIR,OAAA;KACH;IACDS,cAAc,EAAA,SAAAA,cAACT,CAAAA,KAAK,EAAE;AAClB,MAAA,IAAI,CAAC,IAAI,CAAC3D,cAAc,EAAE;QACtB,IAAI,CAAC6C,IAAI,EAAE,CAAA;AACf,OAAE,MAAK;AACH,QAAA,IAAMiF,WAAY,GAAE,IAAI,CAAChI,uBAAuB,CAAC,IAAI,IAAI,CAACiI,mBAAmB,CAAC,IAAI,CAACjI,kBAAkB,CAAA,GAAI,IAAI,CAACF,OAAM,GAAI,IAAI,CAACoI,oBAAoB,EAAC,GAAI,IAAI,CAAChF,2BAA2B,EAAE,CAAA;QAExL,IAAIW,KAAK,CAACsE,QAAQ,EAAE;UAChB,IAAI,CAAC1B,mBAAmB,CAAC5C,KAAK,EAAE,IAAI,CAACtE,eAAe,EAAEyI,WAAW,CAAC,CAAA;AACtE,SAAA;AAEA,QAAA,IAAI,CAACxB,wBAAwB,CAAC3C,KAAK,EAAEmE,WAAW,CAAC,CAAA;AACrD,OAAA;MAEAnE,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDK,YAAY,EAAA,SAAAA,YAACV,CAAAA,KAAK,EAA8B;AAAA,MAAA,IAA5BuE,yFAAqB,KAAK,CAAA;AAC1C,MAAA,IAAIvE,KAAK,CAACwE,MAAK,IAAK,CAACD,kBAAkB,EAAE;AACrC,QAAA,IAAI,IAAI,CAACpI,kBAAiB,KAAM,CAAC,CAAC,EAAE;AAChC,UAAA,IAAI,CAAC+F,cAAc,CAAClC,KAAK,EAAE,IAAI,CAACjB,cAAc,CAAC,IAAI,CAAC5C,kBAAkB,CAAC,CAAC,CAAA;AAC5E,SAAA;AAEA,QAAA,IAAI,CAACE,cAAe,IAAG,IAAI,CAACsD,IAAI,EAAE,CAAA;QAClCK,KAAK,CAACK,cAAc,EAAE,CAAA;AAC1B,OAAE,MAAK;AACH,QAAA,IAAM8D,WAAY,GAAE,IAAI,CAAChI,kBAAmB,KAAI,CAAC,CAAE,GAAE,IAAI,CAACsI,mBAAmB,CAAC,IAAI,CAACtI,kBAAkB,CAAE,GAAE,IAAI,CAACF,UAAU,IAAI,CAACyI,mBAAmB,KAAK,IAAI,CAACC,0BAA0B,EAAE,CAAA;QAEtL,IAAI3E,KAAK,CAACsE,QAAQ,EAAE;UAChB,IAAI,CAAC1B,mBAAmB,CAAC5C,KAAK,EAAEmE,WAAW,EAAE,IAAI,CAACzI,eAAe,CAAC,CAAA;AACtE,SAAA;AAEA,QAAA,IAAI,CAACiH,wBAAwB,CAAC3C,KAAK,EAAEmE,WAAW,CAAC,CAAA;QAEjD,CAAC,IAAI,CAAC9H,cAAa,IAAK,IAAI,CAAC6C,IAAI,EAAE,CAAA;QACnCc,KAAK,CAACK,cAAc,EAAE,CAAA;AAC1B,OAAA;KACH;IACDqD,cAAc,EAAA,SAAAA,cAAC1D,CAAAA,KAAK,EAA8B;AAAA,MAAA,IAA5BuE,yFAAqB,KAAK,CAAA;AAC5CA,MAAAA,uBAAuB,IAAI,CAACpI,kBAAmB,GAAE,CAAC,CAAC,CAAC,CAAA;KACvD;IACDwE,SAAS,EAAA,SAAAA,SAACX,CAAAA,KAAK,EAA8B;AAAA,MAAA,IAA5BuE,yFAAqB,KAAK,CAAA;AACvC,MAAA,IAAIA,kBAAkB,EAAE;AACpB,QAAA,IAAM5C,MAAK,GAAI3B,KAAK,CAAC4E,aAAa,CAAA;QAElC,IAAI5E,KAAK,CAACsE,QAAQ,EAAE;UAChB3C,MAAM,CAACkD,iBAAiB,CAAC,CAAC,EAAE7E,KAAK,CAAC2B,MAAM,CAACmD,cAAc,CAAC,CAAA;AAC5D,SAAE,MAAK;AACHnD,UAAAA,MAAM,CAACkD,iBAAiB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAC9B,UAAA,IAAI,CAAC1I,kBAAiB,GAAI,CAAC,CAAC,CAAA;AAChC,SAAA;AACJ,OAAE,MAAK;QACH,IAAImE,OAAQ,GAAEN,KAAK,CAACM,OAAM,IAAKN,KAAK,CAACO,OAAO,CAAA;AAC5C,QAAA,IAAI4D,WAAY,GAAE,IAAI,CAACE,oBAAoB,EAAE,CAAA;AAE7C,QAAA,IAAIrE,KAAK,CAACsE,QAAS,IAAGhE,OAAO,EAAE;UAC3B,IAAI,CAACsC,mBAAmB,CAAC5C,KAAK,EAAEmE,WAAW,EAAE,IAAI,CAACzI,eAAe,CAAC,CAAA;AACtE,SAAA;AAEA,QAAA,IAAI,CAACiH,wBAAwB,CAAC3C,KAAK,EAAEmE,WAAW,CAAC,CAAA;QAEjD,CAAC,IAAI,CAAC9H,cAAa,IAAK,IAAI,CAAC6C,IAAI,EAAE,CAAA;AACvC,OAAA;MAEAc,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDO,QAAQ,EAAA,SAAAA,QAACZ,CAAAA,KAAK,EAA8B;AAAA,MAAA,IAA5BuE,yFAAqB,KAAK,CAAA;AACtC,MAAA,IAAIA,kBAAkB,EAAE;AACpB,QAAA,IAAM5C,MAAK,GAAI3B,KAAK,CAAC4E,aAAa,CAAA;QAElC,IAAI5E,KAAK,CAACsE,QAAQ,EAAE;AAChB3C,UAAAA,MAAM,CAACkD,iBAAiB,CAAC7E,KAAK,CAAC2B,MAAM,CAACmD,cAAc,EAAEnD,MAAM,CAACR,KAAK,CAAClC,MAAM,CAAC,CAAA;AAC9E,SAAE,MAAK;AACH,UAAA,IAAM8F,GAAE,GAAIpD,MAAM,CAACR,KAAK,CAAClC,MAAM,CAAA;AAE/B0C,UAAAA,MAAM,CAACkD,iBAAiB,CAACE,GAAG,EAAEA,GAAG,CAAC,CAAA;AAClC,UAAA,IAAI,CAAC5I,kBAAiB,GAAI,CAAC,CAAC,CAAA;AAChC,SAAA;AACJ,OAAE,MAAK;QACH,IAAImE,OAAQ,GAAEN,KAAK,CAACM,OAAM,IAAKN,KAAK,CAACO,OAAO,CAAA;AAC5C,QAAA,IAAI4D,WAAU,GAAI,IAAI,CAACO,mBAAmB,EAAE,CAAA;AAE5C,QAAA,IAAI1E,KAAK,CAACsE,QAAS,IAAGhE,OAAO,EAAE;UAC3B,IAAI,CAACsC,mBAAmB,CAAC5C,KAAK,EAAE,IAAI,CAACtE,eAAe,EAAEyI,WAAW,CAAC,CAAA;AACtE,SAAA;AAEA,QAAA,IAAI,CAACxB,wBAAwB,CAAC3C,KAAK,EAAEmE,WAAW,CAAC,CAAA;QAEjD,CAAC,IAAI,CAAC9H,cAAa,IAAK,IAAI,CAAC6C,IAAI,EAAE,CAAA;AACvC,OAAA;MAEAc,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDS,WAAW,EAAA,SAAAA,WAACd,CAAAA,KAAK,EAAE;AACf,MAAA,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAAA;MACpBD,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDQ,aAAa,EAAA,SAAAA,aAACb,CAAAA,KAAK,EAAE;MACjB,IAAI,CAACC,YAAY,CAAC,IAAI,CAAClB,cAAc,CAACE,MAAK,GAAI,CAAC,CAAC,CAAA;MACjDe,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDU,UAAU,EAAA,SAAAA,UAACf,CAAAA,KAAK,EAAE;AACd,MAAA,IAAI,CAAC,IAAI,CAAC3D,cAAc,EAAE;AACtB,QAAA,IAAI,CAACF,qBAAqB,CAAC,CAAC,CAAA;AAC5B,QAAA,IAAI,CAACsE,cAAc,CAACT,KAAK,CAAC,CAAA;AAC9B,OAAE,MAAK;AACH,QAAA,IAAI,IAAI,CAAC7D,kBAAiB,KAAM,CAAC,CAAC,EAAE;AAChC,UAAA,IAAI6D,KAAK,CAACsE,QAAQ,EAAE,IAAI,CAAC1B,mBAAmB,CAAC5C,KAAK,EAAE,IAAI,CAAC7D,kBAAkB,CAAC,CAAA,KACvE,IAAI,CAAC+F,cAAc,CAAClC,KAAK,EAAE,IAAI,CAACjB,cAAc,CAAC,IAAI,CAAC5C,kBAAkB,CAAC,CAAC,CAAA;AACjF,SAAA;AACJ,OAAA;MAEA6D,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDW,WAAW,EAAA,SAAAA,WAAChB,CAAAA,KAAK,EAAE;MACf,IAAI,CAAC3D,cAAe,IAAG,IAAI,CAACsD,IAAI,CAAC,IAAI,CAAC,CAAA;MACtCK,KAAK,CAACK,cAAc,EAAE,CAAA;KACzB;IACDY,QAAQ,EAAA,SAAAA,QAACjB,CAAAA,KAAK,EAA8B;AAAA,MAAA,IAA5BuE,yFAAqB,KAAK,CAAA;MACtC,IAAI,CAACA,kBAAkB,EAAE;QACrB,IAAI,IAAI,CAAClI,cAAa,IAAK,IAAI,CAAC2I,oBAAoB,EAAE,EAAE;AACpDzF,UAAAA,UAAU,CAACC,KAAK,CAACQ,KAAK,CAACsE,QAAO,GAAI,IAAI,CAAC7E,KAAK,CAACwF,mCAAoC,GAAE,IAAI,CAACxF,KAAK,CAACyF,oCAAoC,CAAC,CAAA;UAEnIlF,KAAK,CAACK,cAAc,EAAE,CAAA;AAC1B,SAAE,MAAK;AACH,UAAA,IAAI,IAAI,CAAClE,kBAAiB,KAAM,CAAC,CAAC,EAAE;AAChC,YAAA,IAAI,CAAC+F,cAAc,CAAClC,KAAK,EAAE,IAAI,CAACjB,cAAc,CAAC,IAAI,CAAC5C,kBAAkB,CAAC,CAAC,CAAA;AAC5E,WAAA;UAEA,IAAI,CAACE,kBAAkB,IAAI,CAACsD,IAAI,CAAC,IAAI,CAACpH,MAAM,CAAC,CAAA;AACjD,SAAA;AACJ,OAAA;KACH;IACD2I,UAAU,EAAA,SAAAA,aAAG;AACT,MAAA,IAAI,CAACxF,kBAAkB,IAAI,CAACS,kBAAkB,CAAA;KACjD;IACDgJ,cAAc,EAAA,SAAAA,cAACC,CAAAA,EAAE,EAAE;AACfpI,MAAAA,WAAW,CAACqI,GAAG,CAAC,SAAS,EAAED,EAAE,EAAE,IAAI,CAACE,SAAS,CAACC,MAAM,CAACC,MAAM,CAACjK,OAAO,CAAC,CAAA;AAEpEgE,MAAAA,UAAU,CAACkG,SAAS,CAACL,EAAE,EAAE;AAAEM,QAAAA,QAAQ,EAAE,UAAU;AAAEC,QAAAA,GAAG,EAAE,GAAG;AAAEC,QAAAA,IAAI,EAAE,GAAA;AAAI,OAAC,CAAC,CAAA;MACvE,IAAI,CAAC/B,YAAY,EAAE,CAAA;MACnB,IAAI,CAAC5D,YAAY,EAAE,CAAA;AAEnB,MAAA,IAAI,CAAChG,eAAc,IAAKsF,UAAU,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACoG,WAAW,CAAC5B,GAAG,CAAC,CAAA;KACvE;IACD6B,mBAAmB,EAAA,SAAAA,sBAAG;MAClB,IAAI,CAACC,wBAAwB,EAAE,CAAA;MAC/B,IAAI,CAACC,kBAAkB,EAAE,CAAA;MACzB,IAAI,CAACC,kBAAkB,EAAE,CAAA;AAEzB,MAAA,IAAI,CAAC7G,KAAK,CAAC,MAAM,CAAC,CAAA;KACrB;IACD8G,cAAc,EAAA,SAAAA,iBAAG;MACb,IAAI,CAACrJ,0BAA0B,EAAE,CAAA;MACjC,IAAI,CAACsJ,oBAAoB,EAAE,CAAA;MAC3B,IAAI,CAACrJ,oBAAoB,EAAE,CAAA;AAE3B,MAAA,IAAI,CAACsC,KAAK,CAAC,MAAM,CAAC,CAAA;MAClB,IAAI,CAAC7D,OAAQ,GAAE,IAAI,CAAA;KACtB;IACD6K,mBAAmB,EAAA,SAAAA,mBAAChB,CAAAA,EAAE,EAAE;AACpBpI,MAAAA,WAAW,CAACC,KAAK,CAACmI,EAAE,CAAC,CAAA;KACxB;IACDvB,YAAY,EAAA,SAAAA,eAAG;AACX,MAAA,IAAI,IAAI,CAACjL,QAAO,KAAM,MAAM,EAAE;QAC1B2G,UAAU,CAAC8G,gBAAgB,CAAC,IAAI,CAAC9K,OAAO,EAAE,IAAI,CAAC0I,GAAG,CAAC,CAAA;AACvD,OAAE,MAAK;AACH,QAAA,IAAI,CAAC1I,OAAO,CAACX,KAAK,CAAC0L,QAAS,GAAE/G,UAAU,CAACgH,aAAa,CAAC,IAAI,CAACtC,GAAG,CAAE,GAAE,IAAI,CAAA;QACvE1E,UAAU,CAACiH,gBAAgB,CAAC,IAAI,CAACjL,OAAO,EAAE,IAAI,CAAC0I,GAAG,CAAC,CAAA;AACvD,OAAA;KACH;IACD8B,wBAAwB,EAAA,SAAAA,2BAAG;AAAA,MAAA,IAAAU,MAAA,GAAA,IAAA,CAAA;AACvB,MAAA,IAAI,CAAC,IAAI,CAACrL,oBAAoB,EAAE;AAC5B,QAAA,IAAI,CAACA,oBAAqB,GAAE,UAAC4E,KAAK,EAAK;UACnC,IAAIyG,MAAI,CAACpK,cAAa,IAAKoK,MAAI,CAACC,gBAAgB,CAAC1G,KAAK,CAAC,EAAE;YACrDyG,MAAI,CAAC9G,IAAI,EAAE,CAAA;AACf,WAAA;SACH,CAAA;QAEDgH,QAAQ,CAACC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACxL,oBAAoB,CAAC,CAAA;AACjE,OAAA;KACH;IACDyB,0BAA0B,EAAA,SAAAA,6BAAG;MACzB,IAAI,IAAI,CAACzB,oBAAoB,EAAE;QAC3BuL,QAAQ,CAACE,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAACzL,oBAAoB,CAAC,CAAA;QAChE,IAAI,CAACA,oBAAmB,GAAI,IAAI,CAAA;AACpC,OAAA;KACH;IACD4K,kBAAkB,EAAA,SAAAA,qBAAG;AAAA,MAAA,IAAAc,MAAA,GAAA,IAAA,CAAA;AACjB,MAAA,IAAI,CAAC,IAAI,CAACzL,aAAa,EAAE;AACrB,QAAA,IAAI,CAACA,aAAY,GAAI,IAAI0L,6BAA6B,CAAC,IAAI,CAACtH,KAAK,CAACuH,SAAS,EAAE,YAAM;UAC/E,IAAIF,MAAI,CAACzK,cAAc,EAAE;YACrByK,MAAI,CAACnH,IAAI,EAAE,CAAA;AACf,WAAA;AACJ,SAAC,CAAC,CAAA;AACN,OAAA;AAEA,MAAA,IAAI,CAACtE,aAAa,CAAC2K,kBAAkB,EAAE,CAAA;KAC1C;IACDG,oBAAoB,EAAA,SAAAA,uBAAG;MACnB,IAAI,IAAI,CAAC9K,aAAa,EAAE;AACpB,QAAA,IAAI,CAACA,aAAa,CAAC8K,oBAAoB,EAAE,CAAA;AAC7C,OAAA;KACH;IACDF,kBAAkB,EAAA,SAAAA,qBAAG;AAAA,MAAA,IAAAgB,MAAA,GAAA,IAAA,CAAA;AACjB,MAAA,IAAI,CAAC,IAAI,CAAC3L,cAAc,EAAE;QACtB,IAAI,CAACA,iBAAiB,YAAM;UACxB,IAAI2L,MAAI,CAAC5K,cAAa,IAAK,CAACkD,UAAU,CAAC2H,aAAa,EAAE,EAAE;YACpDD,MAAI,CAACtH,IAAI,EAAE,CAAA;AACf,WAAA;SACH,CAAA;QAEDwH,MAAM,CAACP,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACtL,cAAc,CAAC,CAAA;AAC1D,OAAA;KACH;IACDwB,oBAAoB,EAAA,SAAAA,uBAAG;MACnB,IAAI,IAAI,CAACxB,cAAc,EAAE;QACrB6L,MAAM,CAACN,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACvL,cAAc,CAAC,CAAA;QACzD,IAAI,CAACA,iBAAiB,IAAI,CAAA;AAC9B,OAAA;KACH;IACDoL,gBAAgB,EAAA,SAAAA,gBAAC1G,CAAAA,KAAK,EAAE;AACpB,MAAA,OAAO,EAAE,IAAI,CAACiE,GAAG,CAACmD,UAAU,CAACpH,KAAK,CAAC2B,MAAM,CAAA,IAAK,IAAI,CAACsC,GAAG,CAACvC,QAAQ,CAAC1B,KAAK,CAAC2B,MAAM,CAAA,IAAM,IAAI,CAACpG,OAAQ,IAAG,IAAI,CAACA,OAAO,CAACmG,QAAQ,CAAC1B,KAAK,CAAC2B,MAAM,CAAE,CAAC,CAAA;KAC1I;IACD0F,eAAe,EAAA,SAAAA,eAAClG,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAmG,MAAA,GAAA,IAAA,CAAA;AACnB,MAAA,IAAMpQ,UAAU,IAAI,CAACK,gBAAiB,GAAE,IAAI,CAACgQ,WAAW,CAAC,IAAI,CAACrQ,OAAO,IAAI,IAAI,CAACA,WAAW,EAAE,CAAA;AAC3F,MAAA,IAAMsQ,aAAc,GAAEtQ,OAAO,CAACuQ,IAAI,CAAC,UAACjK,MAAM,EAAA;QAAA,OAAK,CAAC8J,MAAI,CAAC9I,aAAa,CAAChB,MAAM,KAAKC,WAAW,CAAC6E,MAAM,CAACgF,MAAI,CAAC3J,cAAc,CAACH,MAAM,CAAC,EAAE2D,KAAK,EAAEmG,MAAI,CAAC/E,WAAW,CAAC,CAAA;OAAC,CAAA,CAAA;MAEvJ,OAAOiF,aAAY,GAAI,IAAI,CAACjK,cAAc,CAACiK,aAAa,CAAA,GAAI,IAAI,CAAA;KACnE;IACDE,qBAAqB,EAAA,SAAAA,wBAAG;MACpB,IAAIC,OAAM,GAAI,SAAS,CAAA;AACvB,MAAA,IAAM5O,kBAAiB,GAAI,IAAI,CAACA,kBAAiB,IAAK,IAAI,CAACuM,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACvN,gBAAgB,CAAA;AAEnG,MAAA,IAAIsN,OAAO,CAACE,IAAI,CAAC9O,kBAAkB,CAAC,EAAE;QAClC,OAAOA,kBAAkB,CAAC+O,OAAO,CAAC/O,kBAAkB,CAACgP,KAAK,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC1Q,UAAU,CAACgI,MAAO,GAAE,EAAE,CAAC,CAAA;AACxG,OAAA;AAEA,MAAA,OAAOlG,kBAAkB,CAAA;KAC5B;IACDiP,WAAW,EAAA,SAAAA,WAAChI,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAiI,OAAA,GAAA,IAAA,CAAA;AACf,MAAA,IAAI,IAAI,CAACpO,SAAQ,KAAM,IAAI,EAAE;AACzB,QAAA,IAAI,CAACuF,KAAK,CAAC,kBAAkB,EAAE;AAAEmE,UAAAA,aAAa,EAAEvD,KAAK;UAAEkI,OAAO,EAAE,CAAC,IAAI,CAAChK,WAAAA;AAAY,SAAC,CAAC,CAAA;AACxF,OAAE,MAAK;AACH,QAAA,IAAMiD,KAAM,GAAE,IAAI,CAACjD,WAAU,GAAI,EAAG,GAAE,IAAI,CAACa,cAAc,CAACxG,MAAM,CAAC,UAACiF,MAAM,EAAA;AAAA,UAAA,OAAKyK,OAAI,CAAC7G,aAAa,CAAC5D,MAAM,CAAC,CAAA;AAAA,SAAA,CAAC,CAAC6D,GAAG,CAAC,UAAC7D,MAAM,EAAA;AAAA,UAAA,OAAKyK,OAAI,CAACtK,cAAc,CAACH,MAAM,CAAC,CAAA;SAAC,CAAA,CAAA;AAErJ,QAAA,IAAI,CAAC8D,WAAW,CAACtB,KAAK,EAAEmB,KAAK,CAAC,CAAA;AAClC,OAAA;KACH;AACDgH,IAAAA,YAAY,EAAAA,SAAAA,YAAAA,CAACnI,KAAK,EAAE3I,WAAW,EAAE;AAAA,MAAA,IAAA+Q,OAAA,GAAA,IAAA,CAAA;MAC7BpI,KAAK,CAACqI,eAAe,EAAE,CAAA;MACvB,IAAIlH,QAAQ,IAAI,CAAClK,UAAU,CAACsB,MAAM,CAAC,UAAC8J,GAAG,EAAA;AAAA,QAAA,OAAK,CAAC5E,WAAW,CAAC6E,MAAM,CAACD,GAAG,EAAEhL,WAAW,EAAE+Q,OAAI,CAAC7F,WAAW,CAAC,CAAA;OAAC,CAAA,CAAA;AAEpG,MAAA,IAAI,CAACjB,WAAW,CAACtB,KAAK,EAAEmB,KAAK,CAAC,CAAA;KACjC;IACDmH,WAAW,EAAA,SAAAA,cAAG;MACV,IAAI,CAAClM,WAAU,GAAI,IAAI,CAAA;KAC1B;IACD4I,oBAAoB,EAAA,SAAAA,uBAAG;AACnB,MAAA,OAAOzF,UAAU,CAACgJ,oBAAoB,CAAC,IAAI,CAAChN,OAAO,EAAE,wCAAwC,CAAC,CAAC0D,MAAO,GAAE,CAAC,CAAA;KAC5G;IACDuJ,eAAe,EAAA,SAAAA,eAAChL,CAAAA,MAAM,EAAE;AAAA,MAAA,IAAAiL,oBAAA,CAAA;MACpB,OAAO,IAAI,CAACrH,aAAa,CAAC5D,MAAM,KAAK,OAAO,IAAI,CAACD,cAAc,CAACC,MAAM,CAAE,KAAI,QAAO,KAAA,CAAAiL,oBAAA,GAAK,IAAI,CAAClL,cAAc,CAACC,MAAM,CAAC,MAAAiL,IAAAA,IAAAA,oBAAA,uBAA3BA,oBAAA,CAA6BC,iBAAiB,CAAC,IAAI,CAACjQ,YAAY,CAAC,CAACkQ,UAAU,CAAC,IAAI,CAAC/M,WAAW,CAAC8M,iBAAiB,CAAC,IAAI,CAACjQ,YAAY,CAAC,CAAC,CAAA,CAAA;KAC9N;IACD2I,aAAa,EAAA,SAAAA,aAAC5D,CAAAA,MAAM,EAAE;MAClB,OAAOC,WAAW,CAACmL,UAAU,CAACpL,MAAM,CAAA,IAAK,EAAE,IAAI,CAACc,gBAAgB,CAACd,MAAM,CAAE,IAAG,IAAI,CAACgB,aAAa,CAAChB,MAAM,CAAC,CAAC,CAAA;KAC1G;IACDqL,qBAAqB,EAAA,SAAAA,qBAACrL,CAAAA,MAAM,EAAE;AAC1B,MAAA,OAAO,IAAI,CAAC4D,aAAa,CAAC5D,MAAM,CAAE,IAAG,IAAI,CAACa,UAAU,CAACb,MAAM,CAAC,CAAA;KAC/D;AACDsL,IAAAA,QAAQ,EAAAA,SAAAA,QAAAA,CAACC,MAAM,EAAEC,MAAM,EAAE;MACrB,OAAOvL,WAAW,CAAC6E,MAAM,CAACyG,MAAM,EAAEC,MAAM,EAAE,IAAI,CAACzG,WAAW,CAAC,CAAA;KAC9D;IACDlE,UAAU,EAAA,SAAAA,UAACb,CAAAA,MAAM,EAAE;AAAA,MAAA,IAAAyL,OAAA,GAAA,IAAA,CAAA;AACf,MAAA,IAAM5R,WAAU,GAAI,IAAI,CAACsG,cAAc,CAACH,MAAM,CAAC,CAAA;MAE/C,OAAO,CAAC,IAAI,CAACvG,UAAS,IAAK,EAAE,EAAEiS,IAAI,CAAC,UAAC/H,KAAK,EAAA;AAAA,QAAA,OAAK8H,OAAI,CAACH,QAAQ,CAAC3H,KAAK,EAAE9J,WAAW,CAAC,CAAA;OAAC,CAAA,CAAA;KACpF;IACDgN,oBAAoB,EAAA,SAAAA,uBAAG;AAAA,MAAA,IAAA8E,OAAA,GAAA,IAAA,CAAA;AACnB,MAAA,OAAO,IAAI,CAACpK,cAAc,CAACqK,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,QAAA,OAAK2L,OAAI,CAAC/H,aAAa,CAAC5D,MAAM,CAAC,CAAA;OAAC,CAAA,CAAA;KAC/E;IACDkH,mBAAmB,EAAA,SAAAA,sBAAG;AAAA,MAAA,IAAA2E,OAAA,GAAA,IAAA,CAAA;MAClB,OAAO5L,WAAW,CAAC6L,aAAa,CAAC,IAAI,CAACvK,cAAc,EAAE,UAACvB,MAAM,EAAA;AAAA,QAAA,OAAK6L,OAAI,CAACjI,aAAa,CAAC5D,MAAM,CAAC,CAAA;OAAC,CAAA,CAAA;KAChG;IACD4G,mBAAmB,EAAA,SAAAA,mBAAChH,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAmM,OAAA,GAAA,IAAA,CAAA;MACvB,IAAMC,kBAAiB,GAAIpM,KAAM,GAAE,IAAI,CAAC2B,cAAc,CAACE,MAAO,GAAE,CAAE,GAAE,IAAI,CAACF,cAAc,CAACC,KAAK,CAAC5B,KAAI,GAAI,CAAC,CAAC,CAACgM,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,QAAA,OAAK+L,OAAI,CAACnI,aAAa,CAAC5D,MAAM,CAAC,CAAA;OAAE,CAAA,GAAE,CAAC,CAAC,CAAA;MAE/J,OAAOgM,kBAAiB,GAAI,CAAC,CAAE,GAAEA,kBAAmB,GAAEpM,KAAM,GAAE,CAAE,GAAEA,KAAK,CAAA;KAC1E;IACDqH,mBAAmB,EAAA,SAAAA,mBAACrH,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAqM,OAAA,GAAA,IAAA,CAAA;MACvB,IAAMD,kBAAiB,GAAIpM,KAAI,GAAI,CAAE,GAAEK,WAAW,CAAC6L,aAAa,CAAC,IAAI,CAACvK,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE5B,KAAK,CAAC,EAAE,UAACI,MAAM,EAAA;AAAA,QAAA,OAAKiM,OAAI,CAACrI,aAAa,CAAC5D,MAAM,CAAC,CAAA;OAAE,CAAA,GAAE,CAAC,CAAC,CAAA;AAElJ,MAAA,OAAOgM,kBAAiB,GAAI,CAAC,IAAIA,kBAAiB,GAAIpM,KAAK,CAAA;KAC9D;IACDkC,uBAAuB,EAAA,SAAAA,0BAAG;AAAA,MAAA,IAAAoK,OAAA,GAAA,IAAA,CAAA;MACtB,IAAI,IAAI,CAACC,iBAAiB,EAAE;QAAA,IAAAC,KAAA,GAAAA,SAAAA,KAAAA,GAC0C;AAC9D,YAAA,IAAMzI,KAAM,GAAEuI,OAAI,CAACzS,UAAU,CAACmG,KAAK,CAAC,CAAA;YACpC,IAAMoM,kBAAiB,GAAIE,OAAI,CAAC3K,cAAc,CAACqK,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,cAAA,OAAKkM,OAAI,CAACb,qBAAqB,CAACrL,MAAM,CAAE,IAAGkM,OAAI,CAACZ,QAAQ,CAAC3H,KAAK,EAAEuI,OAAI,CAAC/L,cAAc,CAACH,MAAM,CAAC,CAAC,CAAA;aAAC,CAAA,CAAA;YAE7J,IAAIgM,kBAAmB,GAAE,CAAC,CAAC,EAAA,OAAA;AAAAK,cAAAA,CAAA,EAASL,kBAAAA;AAAkB,aAAA,CAAA;WAC1D;UAAAM,IAAA,CAAA;AALA,QAAA,KAAK,IAAI1M,KAAM,GAAE,IAAI,CAACnG,UAAU,CAACgI,SAAS,CAAC,EAAE7B,KAAM,IAAG,CAAC,EAAEA,KAAK,EAAE,EAAA;AAAA0M,UAAAA,IAAA,GAAAF,KAAA,EAAA,CAAA;AAAA,UAAA,IAAAE,IAAA,EAAA,OAAAA,IAAA,CAAAD,CAAA,CAAA;AAAA,SAAA;AAMpE,OAAA;AAEA,MAAA,OAAO,CAAC,CAAC,CAAA;KACZ;IACDE,4BAA4B,EAAA,SAAAA,+BAAG;AAAA,MAAA,IAAAC,OAAA,GAAA,IAAA,CAAA;MAC3B,OAAO,IAAI,CAACL,iBAAkB,GAAE,IAAI,CAAC5K,cAAc,CAACqK,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,QAAA,OAAKwM,OAAI,CAACnB,qBAAqB,CAACrL,MAAM,CAAC,CAAA;OAAA,CAAA,GAAI,CAAC,CAAC,CAAA;KACrH;IACDyM,2BAA2B,EAAA,SAAAA,8BAAG;AAAA,MAAA,IAAAC,OAAA,GAAA,IAAA,CAAA;AAC1B,MAAA,OAAO,IAAI,CAACP,iBAAgB,GAAIlM,WAAW,CAAC6L,aAAa,CAAC,IAAI,CAACvK,cAAc,EAAE,UAACvB,MAAM,EAAA;AAAA,QAAA,OAAK0M,OAAI,CAACrB,qBAAqB,CAACrL,MAAM,CAAC,CAAA;OAAA,CAAA,GAAI,CAAC,CAAC,CAAA;KACtI;IACD2M,2BAA2B,EAAA,SAAAA,2BAAC/M,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAgN,OAAA,GAAA,IAAA,CAAA;AAC/B,MAAA,IAAMZ,kBAAiB,GAAI,IAAI,CAACG,qBAAqBvM,KAAM,GAAE,IAAI,CAAC2B,cAAc,CAACE,SAAS,CAAA,GAAI,IAAI,CAACF,cAAc,CAACC,KAAK,CAAC5B,KAAM,GAAE,CAAC,CAAC,CAACgM,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,QAAA,OAAK4M,OAAI,CAACvB,qBAAqB,CAACrL,MAAM,CAAC,CAAA;OAAE,CAAA,GAAE,CAAC,CAAC,CAAA;AAEjM,MAAA,OAAOgM,kBAAiB,GAAI,CAAC,CAAE,GAAEA,kBAAiB,GAAIpM,KAAI,GAAI,CAAA,GAAI,CAAC,CAAC,CAAA;KACvE;IACDiN,2BAA2B,EAAA,SAAAA,2BAACjN,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAkN,OAAA,GAAA,IAAA,CAAA;MAC/B,IAAMd,kBAAmB,GAAE,IAAI,CAACG,iBAAkB,IAAGvM,QAAQ,CAAA,GAAIK,WAAW,CAAC6L,aAAa,CAAC,IAAI,CAACvK,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE5B,KAAK,CAAC,EAAE,UAACI,MAAM,EAAA;AAAA,QAAA,OAAK8M,OAAI,CAACzB,qBAAqB,CAACrL,MAAM,CAAC,CAAA;OAAE,CAAA,GAAE,CAAC,CAAC,CAAA;MAEpL,OAAOgM,kBAAiB,GAAI,CAAC,CAAA,GAAIA,kBAAiB,GAAI,CAAC,CAAC,CAAA;KAC3D;IACDxG,8BAA8B,EAAA,SAAAA,8BAAC5F,CAAAA,KAAK,EAAwB;AAAA,MAAA,IAAtBmN,YAAW,GAAAnI,SAAA,CAAAnD,MAAA,GAAA,CAAA,IAAAmD,SAAA,CAAA,CAAA,CAAA,KAAA9I,SAAA,GAAA8I,SAAA,CAAA,CAAA,CAAA,GAAI,KAAK,CAAA;MACtD,IAAIoH,kBAAiB,GAAI,CAAC,CAAC,CAAA;MAE3B,IAAI,IAAI,CAACG,iBAAiB,EAAE;AACxB,QAAA,IAAIY,YAAY,EAAE;AACdf,UAAAA,kBAAmB,GAAE,IAAI,CAACa,2BAA2B,CAACjN,KAAK,CAAC,CAAA;AAC5DoM,UAAAA,qBAAqBA,kBAAiB,KAAM,CAAC,CAAE,GAAE,IAAI,CAACW,2BAA2B,CAAC/M,KAAK,CAAA,GAAIoM,kBAAkB,CAAA;AACjH,SAAE,MAAK;AACHA,UAAAA,kBAAmB,GAAE,IAAI,CAACW,2BAA2B,CAAC/M,KAAK,CAAC,CAAA;AAC5DoM,UAAAA,qBAAqBA,kBAAiB,KAAM,CAAC,CAAE,GAAE,IAAI,CAACa,2BAA2B,CAACjN,KAAK,CAAA,GAAIoM,kBAAkB,CAAA;AACjH,SAAA;AACJ,OAAA;AAEA,MAAA,OAAOA,kBAAiB,GAAI,CAAC,IAAIA,kBAAiB,GAAIpM,KAAK,CAAA;KAC9D;IACDiC,2BAA2B,EAAA,SAAAA,8BAAG;AAC1B,MAAA,IAAMmL,gBAAgB,IAAI,CAAClL,uBAAuB,EAAE,CAAA;MAEpD,OAAOkL,aAAY,GAAI,CAAA,GAAI,IAAI,CAACnG,oBAAoB,EAAC,GAAImG,aAAa,CAAA;KACzE;IACD7F,0BAA0B,EAAA,SAAAA,6BAAG;AACzB,MAAA,IAAM6F,gBAAgB,IAAI,CAAClL,uBAAuB,EAAE,CAAA;MAEpD,OAAOkL,aAAY,GAAI,CAAA,GAAI,IAAI,CAAC9F,mBAAmB,EAAG,GAAE8F,aAAa,CAAA;KACxE;IACDhJ,aAAa,EAAA,SAAAA,aAACxB,CAAAA,KAAK,EAAE;AAAA,MAAA,IAAAyK,OAAA,GAAA,IAAA,CAAA;AACjB,MAAA,IAAI,CAAC7O,WAAY,GAAE,CAAC,IAAI,CAACA,WAAY,IAAG,EAAE,IAAIoE,KAAK,CAAClC,GAAG,CAAA;MAEvD,IAAIqG,WAAY,GAAE,CAAC,CAAC,CAAA;MAEpB,IAAI1G,WAAW,CAACmL,UAAU,CAAC,IAAI,CAAChN,WAAW,CAAC,EAAE;AAC1C,QAAA,IAAI,IAAI,CAACO,kBAAiB,KAAM,CAAC,CAAC,EAAE;AAChCgI,UAAAA,WAAU,GAAI,IAAI,CAACpF,cAAc,CAACC,KAAK,CAAC,IAAI,CAAC7C,kBAAkB,CAAC,CAACiN,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,YAAA,OAAKiN,OAAI,CAACjC,eAAe,CAAChL,MAAM,CAAC,CAAA;WAAC,CAAA,CAAA;UACpH2G,WAAU,GAAIA,gBAAgB,CAAC,IAAI,IAAI,CAACpF,cAAc,CAACC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC7C,kBAAkB,CAAC,CAACiN,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,YAAA,OAAKiN,OAAI,CAACjC,eAAe,CAAChL,MAAM,CAAC,CAAA;AAAA,WAAA,CAAE,GAAE2G,WAAU,GAAI,IAAI,CAAChI,kBAAkB,CAAA;AACxL,SAAE,MAAK;UACHgI,WAAU,GAAI,IAAI,CAACpF,cAAc,CAACqK,SAAS,CAAC,UAAC5L,MAAM,EAAA;AAAA,YAAA,OAAKiN,OAAI,CAACjC,eAAe,CAAChL,MAAM,CAAC,CAAA;WAAC,CAAA,CAAA;AACzF,SAAA;QAEA,IAAI2G,WAAY,KAAI,CAAC,KAAK,IAAI,CAAChI,kBAAiB,KAAM,CAAC,CAAC,EAAE;AACtDgI,UAAAA,WAAU,GAAI,IAAI,CAAC9E,2BAA2B,EAAE,CAAA;AACpD,SAAA;AAEA,QAAA,IAAI8E,WAAY,KAAI,CAAC,CAAC,EAAE;AACpB,UAAA,IAAI,CAACxB,wBAAwB,CAAC3C,KAAK,EAAEmE,WAAW,CAAC,CAAA;AACrD,SAAA;AACJ,OAAA;MAEA,IAAI,IAAI,CAACxI,aAAa,EAAE;AACpB+O,QAAAA,YAAY,CAAC,IAAI,CAAC/O,aAAa,CAAC,CAAA;AACpC,OAAA;AAEA,MAAA,IAAI,CAACA,aAAc,GAAEmE,UAAU,CAAC,YAAM;QAClC2K,OAAI,CAAC7O,WAAY,GAAE,EAAE,CAAA;QACrB6O,OAAI,CAAC9O,gBAAgB,IAAI,CAAA;OAC5B,EAAE,GAAG,CAAC,CAAA;KACV;AACDgH,IAAAA,wBAAwB,EAAAA,SAAAA,wBAAAA,CAAC3C,KAAK,EAAE5C,KAAK,EAAE;AACnC,MAAA,IAAI,IAAI,CAACjB,kBAAiB,KAAMiB,KAAK,EAAE;QACnC,IAAI,CAACjB,kBAAmB,GAAEiB,KAAK,CAAA;QAC/B,IAAI,CAAC6C,YAAY,EAAE,CAAA;QAEnB,IAAI,IAAI,CAACpE,aAAa,EAAE;UACpB,IAAI,CAACqG,cAAc,CAAClC,KAAK,EAAE,IAAI,CAACjB,cAAc,CAAC3B,KAAK,CAAC,CAAC,CAAA;AAC1D,SAAA;AACJ,OAAA;KACH;IACD6C,YAAY,EAAA,SAAAA,eAAa;AAAA,MAAA,IAAA0K,OAAA,GAAA,IAAA,CAAA;AAAA,MAAA,IAAZvN,4EAAQ,CAAC,CAAC,CAAA;MACnB,IAAI,CAACwN,SAAS,CAAC,YAAM;AACjB,QAAA,IAAM7O,EAAG,GAAEqB,KAAM,KAAI,CAAC,CAAA,MAAAoF,MAAA,CAAOmI,OAAI,CAAC5O,EAAE,OAAAyG,MAAA,CAAIpF,KAAK,CAAKuN,GAAAA,OAAI,CAACE,eAAe,CAAA;AACtE,QAAA,IAAMC,OAAQ,GAAEvL,UAAU,CAACwL,UAAU,CAACJ,OAAI,CAACnP,IAAI,EAAAgH,UAAAA,CAAAA,MAAA,CAAYzG,EAAE,QAAI,CAAC,CAAA;AAElE,QAAA,IAAI+O,OAAO,EAAE;AACTA,UAAAA,OAAO,CAACE,cAAa,IAAKF,OAAO,CAACE,cAAc,CAAC;AAAEC,YAAAA,KAAK,EAAE,SAAS;AAAEC,YAAAA,MAAM,EAAE,SAAA;AAAU,WAAC,CAAC,CAAA;AAC7F,SAAA,MAAO,IAAI,CAACP,OAAI,CAACrN,uBAAuB,EAAE;AACtCqN,UAAAA,OAAI,CAAClP,eAAc,IAAKkP,OAAI,CAAClP,eAAe,CAAC+H,aAAa,CAACpG,UAAU,CAAC,CAAA,GAAIA,KAAM,GAAEuN,OAAI,CAACxO,kBAAkB,CAAC,CAAA;AAC9G,SAAA;AACJ,OAAC,CAAC,CAAA;KACL;IACDO,eAAe,EAAA,SAAAA,kBAAG;AACd,MAAA,IAAI,IAAI,CAACb,aAAc,IAAG,IAAI,CAAC7B,eAAc,IAAK,CAAC,IAAI,CAAC2P,iBAAiB,EAAE;AACvE,QAAA,IAAI,CAACxN,kBAAiB,GAAI,IAAI,CAACkD,2BAA2B,EAAE,CAAA;AAC5D,QAAA,IAAM8B,KAAI,GAAI,IAAI,CAACxD,cAAc,CAAC,IAAI,CAACoB,cAAc,CAAC,IAAI,CAAC5C,kBAAkB,CAAC,CAAC,CAAA;QAE/E,IAAI,CAACmF,WAAW,CAAC,IAAI,EAAE,CAACH,KAAK,CAAC,CAAC,CAAA;AACnC,OAAA;KACH;AACDG,IAAAA,WAAW,EAAAA,SAAAA,WAAAA,CAACtB,KAAK,EAAEmB,KAAK,EAAE;AACtB,MAAA,IAAI,CAAC/B,KAAK,CAAC,mBAAmB,EAAE+B,KAAK,CAAC,CAAA;AACtC,MAAA,IAAI,CAAC/B,KAAK,CAAC,QAAQ,EAAE;AAAEmE,QAAAA,aAAa,EAAEvD,KAAK;AAAEmB,QAAAA,KAAM,EAANA,KAAAA;AAAM,OAAC,CAAC,CAAA;KACxD;IACDoG,WAAW,EAAA,SAAAA,WAACrQ,CAAAA,OAAO,EAAE;AAAA,MAAA,IAAAiU,OAAA,GAAA,IAAA,CAAA;AACjB,MAAA,OAAO,CAACjU,OAAQ,IAAG,EAAE,EAAEkU,MAAM,CAAC,UAACC,MAAM,EAAE7N,MAAM,EAAEJ,KAAK,EAAK;QACrDiO,MAAM,CAACC,IAAI,CAAC;AAAE7M,UAAAA,WAAW,EAAEjB,MAAM;AAAEkB,UAAAA,KAAK,EAAE,IAAI;AAAEtB,UAAAA,KAAM,EAANA,KAAAA;AAAM,SAAC,CAAC,CAAA;AAExD,QAAA,IAAM5F,mBAAkB,GAAI2T,OAAI,CAACvM,sBAAsB,CAACpB,MAAM,CAAC,CAAA;AAE/DhG,QAAAA,mBAAoB,IAAGA,mBAAmB,CAAC+T,OAAO,CAAC,UAACC,CAAC,EAAA;AAAA,UAAA,OAAKH,MAAM,CAACC,IAAI,CAACE,CAAC,CAAC,CAAA;SAAC,CAAA,CAAA;AAEzE,QAAA,OAAOH,MAAM,CAAA;OAChB,EAAE,EAAE,CAAC,CAAA;KACT;IACDI,UAAU,EAAA,SAAAA,UAACrG,CAAAA,EAAE,EAAE;MACX,IAAI,CAAC7J,OAAQ,GAAE6J,EAAE,CAAA;KACpB;AACDsG,IAAAA,OAAO,EAAAA,SAAAA,OAAAA,CAACtG,EAAE,EAAEuG,UAAU,EAAE;MACpB,IAAI,CAACnQ,IAAG,GAAI4J,EAAE,CAAA;AACduG,MAAAA,UAAW,IAAGA,UAAU,CAACvG,EAAE,CAAC;KAC/B;IACDwG,kBAAkB,EAAA,SAAAA,kBAACxG,CAAAA,EAAE,EAAE;MACnB,IAAI,CAAC3J,eAAc,GAAI2J,EAAE,CAAA;AAC7B,KAAA;GACH;AACDyG,EAAAA,QAAQ,EAAE;IACN9M,cAAc,EAAA,SAAAA,iBAAG;AAAA,MAAA,IAAA+M,OAAA,GAAA,IAAA,CAAA;AACb,MAAA,IAAM5U,UAAU,IAAI,CAACK,gBAAiB,GAAE,IAAI,CAACgQ,WAAW,CAAC,IAAI,CAACrQ,OAAO,IAAI,IAAI,CAACA,WAAW,EAAE,CAAA;MAE3F,IAAI,IAAI,CAACkF,WAAW,EAAE;QAClB,IAAM2P,eAAc,GAAIC,aAAa,CAACzT,MAAM,CAACrB,OAAO,EAAE,IAAI,CAAC+U,YAAY,EAAE,IAAI,CAAC7P,WAAW,EAAE,IAAI,CAAC1D,eAAe,EAAE,IAAI,CAACD,YAAY,CAAC,CAAA;QAEnI,IAAI,IAAI,CAAClB,gBAAgB,EAAE;AACvB,UAAA,IAAM2U,YAAW,GAAI,IAAI,CAAChV,OAAM,IAAK,EAAE,CAAA;UACvC,IAAMiV,QAAS,GAAE,EAAE,CAAA;AAEnBD,UAAAA,YAAY,CAACX,OAAO,CAAC,UAAC7M,KAAK,EAAK;AAC5B,YAAA,IAAM0N,aAAc,GAAEN,OAAI,CAAClN,sBAAsB,CAACF,KAAK,CAAC,CAAA;AACxD,YAAA,IAAM2N,aAAc,GAAED,aAAa,CAAC7T,MAAM,CAAC,UAAC+T,IAAI,EAAA;AAAA,cAAA,OAAKP,eAAe,CAACQ,QAAQ,CAACD,IAAI,CAAC,CAAA;aAAC,CAAA,CAAA;AAEpF,YAAA,IAAID,aAAa,CAACpN,MAAK,GAAI,CAAC,EAAEkN,QAAQ,CAACb,IAAI,CAAAkB,aAAA,CAAAA,aAAA,CAAA,EAAA,EAAM9N,KAAK,CAAA+N,EAAAA,EAAAA,EAAAA,iBAAA,CAAG,EAAA,EAAA,OAAOX,OAAI,CAACtU,mBAAoB,KAAI,QAAS,GAAEsU,OAAI,CAACtU,sBAAsB,OAAO,EAAAiL,kBAAA,CAAO4J,aAAa,GAAG,CAAC,CAAA;AACtK,WAAC,CAAC,CAAA;AAEF,UAAA,OAAO,IAAI,CAAC9E,WAAW,CAAC4E,QAAQ,CAAC,CAAA;AACrC,SAAA;AAEA,QAAA,OAAOJ,eAAe,CAAA;AAC1B,OAAA;AAEA,MAAA,OAAO7U,OAAO,CAAA;KACjB;IACDwV,KAAK,EAAA,SAAAA,QAAG;AACJ;AACA,MAAA,IAAIA,KAAK,CAAA;MAET,IAAI,IAAI,CAACzV,UAAS,IAAK,IAAI,CAACA,UAAU,CAACgI,MAAM,EAAE;AAC3C,QAAA,IAAIxB,WAAW,CAACmL,UAAU,CAAC,IAAI,CAAC5P,iBAAiB,KAAK,IAAI,CAAC/B,UAAU,CAACgI,MAAK,GAAI,IAAI,CAACjG,iBAAiB,EAAE;AACnG,UAAA,OAAO,IAAI,CAAC0O,qBAAqB,EAAE,CAAA;AACvC,SAAE,MAAK;AACHgF,UAAAA,KAAM,GAAE,EAAE,CAAA;AAEV,UAAA,KAAK,IAAIC,CAAE,GAAE,CAAC,EAAEA,IAAI,IAAI,CAAC1V,UAAU,CAACgI,MAAM,EAAE0N,CAAC,EAAE,EAAE;YAC7C,IAAIA,CAAA,KAAM,CAAC,EAAE;AACTD,cAAAA,KAAI,IAAK,IAAI,CAAA;AACjB,aAAA;YAEAA,KAAI,IAAK,IAAI,CAACrF,eAAe,CAAC,IAAI,CAACpQ,UAAU,CAAC0V,CAAC,CAAC,CAAC,CAAA;AACrD,WAAA;AACJ,SAAA;AACJ,OAAE,MAAK;QACHD,KAAI,GAAI,IAAI,CAAC9U,WAAW,CAAA;AAC5B,OAAA;AAEA,MAAA,OAAO8U,KAAK,CAAA;KACf;IACDE,iBAAiB,EAAA,SAAAA,oBAAG;AAChB,MAAA,OAAOnP,WAAW,CAACmL,UAAU,CAAC,IAAI,CAAC5P,iBAAiB,CAAA,IAAK,IAAI,CAAC/B,UAAS,IAAK,IAAI,CAACA,UAAU,CAACgI,SAAS,IAAI,CAACjG,iBAAkB,GAAE,IAAI,CAAC/B,UAAU,CAAC+H,KAAK,CAAC,CAAC,EAAE,IAAI,CAAChG,iBAAiB,IAAI,IAAI,CAAC/B,UAAU,CAAA;KACnM;IACDiH,WAAW,EAAA,SAAAA,cAAG;AAAA,MAAA,IAAA2O,OAAA,GAAA,IAAA,CAAA;MACV,OAAO,IAAI,CAAChT,SAAU,KAAI,IAAK,GAAE,IAAI,CAACA,YAAY4D,WAAW,CAACmL,UAAU,CAAC,IAAI,CAAC7J,cAAc,CAAA,IAAK,IAAI,CAACA,cAAc,CAAC+N,KAAK,CAAC,UAACtP,MAAM,EAAA;AAAA,QAAA,OAAKqP,OAAI,CAACrO,aAAa,CAAChB,MAAM,CAAE,IAAGqP,OAAI,CAACvO,gBAAgB,CAACd,MAAM,CAAA,IAAKqP,OAAI,CAACxO,UAAU,CAACb,MAAM,CAAC,CAAA;OAAC,CAAA,CAAA;KACjO;IACDmM,iBAAiB,EAAA,SAAAA,oBAAG;AAChB,MAAA,OAAOlM,WAAW,CAACmL,UAAU,CAAC,IAAI,CAAC3R,UAAU,CAAC,CAAA;KACjD;IACDsL,WAAW,EAAA,SAAAA,cAAG;MACV,OAAO,IAAI,CAAClL,WAAU,GAAI,IAAG,GAAI,IAAI,CAACiB,OAAO,CAAA;KAChD;IACD2T,YAAY,EAAA,SAAAA,eAAG;MACX,OAAO,IAAI,CAACtT,YAAW,IAAK,CAAC,IAAI,CAACvB,WAAW,CAAC,CAAA;KACjD;IACDmH,wBAAwB,EAAA,SAAAA,2BAAG;AACvB,MAAA,OAAO,IAAI,CAACrF,cAAe,IAAG,IAAI,CAACjC,cAAc,IAAI,CAACA,UAAU,CAACgI,MAAK,KAAM,IAAI,CAAC/F,cAAc,CAAA;KAClG;IACD6T,uBAAuB,EAAA,SAAAA,0BAAG;MACtB,OAAOtP,WAAW,CAACmL,UAAU,CAAC,IAAI,CAAC7J,cAAc,CAAE,GAAE,IAAI,CAACiO,iBAAiB,CAACC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAClO,cAAc,CAACE,MAAM,CAAE,GAAE,IAAI,CAACiO,sBAAsB,CAAA;KAC1J;IACDF,iBAAiB,EAAA,SAAAA,oBAAG;AAChB,MAAA,OAAO,IAAI,CAAC5S,iBAAiB,IAAI,CAACkL,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACuF,aAAY,IAAK,EAAE,CAAA;KAChF;IACDD,sBAAsB,EAAA,SAAAA,yBAAG;MACrB,OAAO,IAAI,CAAC3S,kBAAiB,IAAK,IAAI,CAAC+K,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACwF,kBAAmB,IAAG,IAAI,CAAC9H,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACrN,kBAAiB,IAAK,EAAE,CAAA;KAC7I;IACD8S,gBAAgB,EAAA,SAAAA,mBAAG;AACf,MAAA,OAAO,IAAI,CAAC7S,YAAW,IAAK,IAAI,CAAC8K,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACpN,YAAW,IAAK,EAAE,CAAA;KAC9E;IACD8S,oBAAoB,EAAA,SAAAA,uBAAG;AACnB,MAAA,OAAO,IAAI,CAACjT,oBAAoB,IAAI,CAACiL,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACvN,gBAAe,IAAK,EAAE,CAAA;KACtF;IACDkT,yBAAyB,EAAA,SAAAA,4BAAG;AACxB,MAAA,OAAO,IAAI,CAACjT,qBAAoB,IAAK,IAAI,CAACgL,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACtN,yBAAyB,EAAE,CAAA;KAChG;IACDkT,mBAAmB,EAAA,SAAAA,sBAAG;MAClB,OAAO,IAAI,CAAC7D,iBAAkB,GAAE,IAAI,CAAC2D,oBAAoB,CAACL,UAAU,CAAC,KAAK,EAAE,IAAI,CAAChW,UAAU,CAACgI,MAAM,CAAA,GAAI,IAAI,CAACsO,yBAAyB,CAAA;KACvI;IACD1C,eAAe,EAAA,SAAAA,kBAAG;AACd,MAAA,OAAO,IAAI,CAAC1O,kBAAiB,KAAM,CAAC,CAAA,MAAAqG,MAAA,CAAO,IAAI,CAACzG,EAAE,OAAAyG,MAAA,CAAI,IAAI,CAACrG,kBAAkB,IAAK,IAAI,CAAA;KACzF;IACDsR,WAAW,EAAA,SAAAA,cAAG;AAAA,MAAA,IAAAC,OAAA,GAAA,IAAA,CAAA;AACV,MAAA,OAAO,IAAI,CAAC3O,cAAc,CAACxG,MAAM,CAAC,UAACiF,MAAM,EAAA;AAAA,QAAA,OAAK,CAACkQ,OAAI,CAAClP,aAAa,CAAChB,MAAM,CAAC,CAAA;AAAA,OAAA,CAAC,CAACyB,MAAM,CAAA;KACpF;IACD0O,kBAAkB,EAAA,SAAAA,qBAAG;AACjB,MAAA,OAAO,IAAI,CAACrI,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACgG,IAAG,GAAI,IAAI,CAACtI,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACgG,IAAI,CAAC,IAAI,CAAC1P,WAAY,GAAE,WAAY,GAAE,aAAa,CAAA,GAAI5E,SAAS,CAAA;KAC3I;IACDuU,cAAc,EAAA,SAAAA,iBAAG;MACb,OAAO,IAAI,CAACvI,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACgG,OAAO,IAAI,CAACtI,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACgG,IAAI,CAACE,QAAQxU,SAAS,CAAA;KACjG;IACDyU,aAAa,EAAA,SAAAA,gBAAG;MACZ,OAAO,IAAI,CAACzI,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACgG,IAAK,GAAE,IAAI,CAACtI,SAAS,CAACC,MAAM,CAACqC,MAAM,CAACgG,IAAI,CAACI,YAAY1U,SAAS,CAAA;KACrG;IACDgE,uBAAuB,EAAA,SAAAA,0BAAG;MACtB,OAAO,CAAC,IAAI,CAACvD,sBAAsB,CAAA;AACvC,KAAA;GACH;AACDkU,EAAAA,UAAU,EAAE;AACRC,IAAAA,MAAM,EAAEC,MAAAA;GACX;AACDC,EAAAA,UAAU,EAAE;AACRC,IAAAA,SAAS,EAATA,SAAS;AACTC,IAAAA,QAAQ,EAARA,QAAQ;AACRC,IAAAA,eAAe,EAAfA,eAAe;AACfC,IAAAA,MAAM,EAANA,MAAM;AACNC,IAAAA,IAAI,EAAJA,IAAI;AACJC,IAAAA,SAAS,EAATA,SAAS;AACTC,IAAAA,SAAS,EAATA,SAAS;AACTC,IAAAA,SAAS,EAATA,SAAS;AACTC,IAAAA,UAAU,EAAVA,UAAU;AACVC,IAAAA,eAAe,EAAfA,eAAe;AACfC,IAAAA,WAAW,EAAXA,WAAW;AACXC,IAAAA,SAAQ,EAARA,SAAAA;AACJ,GAAA;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;ECxmCG,OAAAC,SAAA,EAAA,EAAAC,kBAAA,CA0MK,OA1MLC,UA0MK,CAAA;AA1MAC,IAAAA,GAAG,EAAC;AAAa,IAAA,OAAA,EAAOC,IAAE,CAAAC,EAAA,CAAA,MAAA,CAAA;AAAW1U,IAAAA,KAAK,EAAEyU,IAAE,CAAAE,EAAA,CAAA,MAAA,CAAA;IAAWC,OAAK;aAAEC,QAAgB,CAAAhO,gBAAA,IAAAgO,QAAA,CAAAhO,gBAAA,CAAAiO,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;KAAA,CAAA;KAAUiN,IAAI,CAAAM,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAC/FC,kBAsBK,CAAA,KAAA,EAtBLT,UAsBK,CAAA;IAtBA,OAAM,EAAA,qBAAA;KAA8BE,IAAG,CAAAtR,GAAA,CAAA,sBAAA,CAAA,EAAA;AAA2B,IAAA,0BAAwB,EAAE,IAAA;GAAI,CAAA,EAAA,CACjG6R,kBAAA,CAoBC,SApBDT,UAoBC,CAAA;AAnBGC,IAAAA,GAAG,EAAC,YAAW;IACdrT,EAAE,EAAEsT,IAAO,CAAApX,OAAA;AACZP,IAAAA,IAAI,EAAC,MAAK;AACVmY,IAAAA,QAAO,EAAP,EAAO;IACN7X,QAAQ,EAAEqX,IAAQ,CAAArX,QAAA;IAClBJ,WAAW,EAAEyX,IAAW,CAAAzX,WAAA;IACxB6C,QAAQ,EAAA,CAAG4U,IAAO,CAAArX,QAAA,GAAIqX,IAAS,CAAA5U,QAAA,GAAA,CAAA,CAAA;AAChCqV,IAAAA,IAAI,EAAC,UAAS;IACb,YAAU,EAAET,IAAS,CAAA3U,SAAA;IACrB,iBAAe,EAAE2U,IAAc,CAAA1U,cAAA;AAChC,IAAA,eAAa,EAAC,SAAQ;IACrB,eAAa,EAAEoV,KAAc,CAAA1T,cAAA;AAC7B,IAAA,eAAa,EAAE0T,KAAC,CAAAhU,EAAA,GAAA,OAAA;IAChB,uBAAqB,EAAEgU,KAAA,CAAA7T,OAAM,GAAIuT,QAAA,CAAA5E,eAAgB,GAAEvR,SAAS;AAC5D,IAAA,cAAY,EAAE+V,IAAM,CAAAvX,OAAA,IAAKwB,SAAS;IAClCyG,OAAK;aAAE0P,QAAO,CAAA1P,OAAA,IAAA0P,QAAA,CAAA1P,OAAA,CAAA2P,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;IACdlC,MAAI;aAAEuP,QAAM,CAAAvP,MAAA,IAAAuP,QAAA,CAAAvP,MAAA,CAAAwP,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;AAAA,KAAA,CAAA;IACZ4N,SAAO;aAAEP,QAAS,CAAAtP,SAAA,IAAAsP,QAAA,CAAAtP,SAAA,CAAAuP,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;KAAA,CAAA;KACXiN,IAAG,CAAAtR,GAAA,CAAA,aAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAAkS,UAAA,CAAA,QAGnBL,kBAAA,CAqBK,OArBLT,UAqBK,CAAA;AArBC,IAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,gBAAA,CAAA;KAA4BD,IAAG,CAAAtR,GAAA,CAAA,gBAAA,CAAA,CAAA,EAAA,CAC1C6R,kBAAA,CAmBK,OAnBLT,UAmBK,CAAA;AAnBC,IAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,OAAA,CAAA;KAAmBD,IAAG,CAAAtR,GAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CACjCmS,UAiBM,CAAAb,IAAA,CAAAc,MAAA,EAAA,OAAA,EAAA;IAjBchP,KAAK,EAAEkO,IAAU,CAAApY,UAAA;IAAGW,WAAW,EAAEyX,IAAW,CAAAzX,WAAAA;KAAhE,YAAA;AAAA,IAAA,OAiBM,CAhBcyX,IAAM,CAAAvW,OAAA,KAAA,OAAA,iBAAtBoW,kBAEU,CAAAkB,QAAA,EAAA;AAAAtS,MAAAA,GAAA,EAAA,CAAA;AAAA,KAAA,EAAA,iCADH2R,QAAM,CAAA/C,KAAA,IAAA,OAAA,CAAA,EAAA,CAAA,CAAA,UAEQ2C,IAAQ,CAAAvW,OAAA,KAAA,MAAA,iBAA7BoW,kBAYU,CAAAkB,QAAA,EAAA;AAAAtS,MAAAA,GAAA,EAAA,CAAA;KAAA,EAAA,mBAXNoR,kBASM,CAAAkB,QAAA,EAAA,IAAA,EAAAC,UAAA,CATeZ,QAAiB,CAAA7C,iBAAA,EAAA,UAAzBN,IAAG,EAAA;MAAhB,OAAA2C,SAAA,EAAA,EAAAC,kBAAA,CASM,QATNC,UASM,CAAA;AATmCrR,QAAAA,GAAG,EAAE2R,QAAe,CAAApI,eAAA,CAACiF,IAAI,CAAA;AAAI,QAAA,OAAA,EAAO+C,IAAE,CAAAC,EAAA,CAAA,UAAA,CAAA;;SAAsBD,IAAG,CAAAtR,GAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CACpGmS,UAOM,CAAAb,IAAA,CAAAc,MAAA,EAAA,MAAA,EAAA;AAPahP,QAAAA,KAAK,EAAEmL,IAAI;QAAGgE,cAAc,0BAAGtQ,KAAK,EAAA;AAAA,UAAA,OAAKyP,qBAAY,CAACzP,KAAK,EAAEsM,IAAI,CAAA,CAAA;AAAA,SAAA;SAApF,YAAA;AAAA,QAAA,OAOM,CALFiE,WAIM,CAAAC,eAAA,EAAA;UAJC,wBAAOnB,IAAE,CAAAC,EAAA,CAAA,QAAA,CAAA,CAAA;AAAa5C,UAAAA,KAAK,EAAE+C,QAAe,CAAApI,eAAA,CAACiF,IAAI,CAAA;AAAImE,UAAAA,UAAU,EAAEpB,IAAO,CAAAzV,QAAA,IAAKyV,IAAe,CAAA1V,eAAA;AAAE+W,UAAAA,SAAU,EAAV,EAAU;UAACC,QAAQ,EAAEtB,IAAQ,CAAAsB,QAAA;UAAGC,QAAM,EAAE,SAAAA,QAAAA,CAAAC,MAAA,EAAA;AAAA,YAAA,OAAApB,QAAA,CAAAtH,YAAY,CAAC0I,MAAM,EAAEvE,IAAI,CAAA,CAAA;WAAA;AAAIwE,UAAAA,EAAE,EAAEzB,IAAG,CAAAtR,GAAA,CAAA,QAAA,CAAA;;UAClKgT,UAAU,UACjB,YAAA;AAAA,YAAA,OAA4J,CAA5Jb,UAA4J,CAAAb,IAAA,CAAAc,MAAA,EAA/Id,IAAM,CAAAc,MAAA,CAACa,QAAS,GAAA,UAAA,GAAA,iBAAA,EAAA;cAAmC,wBAAO3B,IAAE,CAAAC,EAAA,CAAA,UAAA,CAAA,CAAA;AAAehD,cAAAA,IAAI,EAAEA,IAAI;cAAGgE,cAAc,0BAAGtQ,KAAK,EAAA;AAAA,gBAAA,OAAKyP,qBAAY,CAACzP,KAAK,EAAEsM,IAAI,CAAA,CAAA;AAAA,eAAA;;;;;;gBAKvJ+C,mBAAcA,IAAU,CAAApY,UAAA,CAACgI,6BAA1CiQ,kBAA8F,CAAAkB,QAAA,EAAA;AAAAtS,MAAAA,GAAA,EAAA,CAAA;AAAA,KAAA,EAAA,iCAAnCuR,IAAU,CAAAzX,WAAA,IAAA,OAAA,CAAA,EAAA,CAAA,CAAA;kBAKrFgY,kBAAA,CAQK,OARLT,UAQK,CAAA;AARC,IAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,UAAA,CAAA;KAAsBD,IAAG,CAAAtR,GAAA,CAAA,UAAA,CAAA,CAAA,EAAA,CACxBsR,IAAO,CAAAjW,OAAA,GAAnB8W,UAGM,CAAAb,IAAA,CAAAc,MAAA,EAAA,aAAA,EAAA;;AAHmC,IAAA,OAAA,iBAAOd,IAAE,CAAAC,EAAA,CAAA,aAAA,CAAA,CAAA;KAAlD,YAAA;AAAA,IAAA,OAGM,CAFUD,IAAW,CAAA3V,WAAA,IAAvBuV,SAAA,EAAA,EAAAC,kBAAA,CAA8H,QAA9HC,UAA8H,CAAA;;AAApG,MAAA,OAAA,EAAK,CAAGE,IAAE,CAAAC,EAAA,CAAA,aAAA,CAAA,EAAA,SAAA,EAA4BD,IAAW,CAAA3V,WAAA,CAAA;AAAG,MAAA,aAAW,EAAC,MAAA;OAAe2V,IAAG,CAAAtR,GAAA,CAAA,aAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,CAAA,KAC5GkR,SAAA,EAAA,EAAAgC,WAAA,CAAoGC,wBAApG/B,UAAoG,CAAA;;AAA/E,MAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,aAAA,CAAA;AAAiB6B,MAAAA,MAAA;AAAK,MAAA,aAAW,EAAC,MAAA;OAAe9B,IAAG,CAAAtR,GAAA,CAAA,aAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAA,CAAA;OAEtFmS,UAEM,CAAAb,IAAA,CAAAc,MAAA,EAAA,cAAA,EAAA;;AAF4B,IAAA,OAAA,iBAAOd,IAAE,CAAAC,EAAA,CAAA,cAAA,CAAA,CAAA;KAA3C,YAAA;AAAA,IAAA,OAEM,eADF2B,WAAwJ,CAAAG,uBAAA,CAAxI/B,IAAa,CAAA7V,YAAA,GAAA,MAAA,GAAA,iBAAA,CAAA,EAA7B2V,UAAwJ,CAAA;MAA5F,OAAK,EAAA,CAAGE,IAAE,CAAAC,EAAA,CAAA,cAAA,CAAA,EAAkBD,IAAY,CAAA7V,YAAA,CAAA;AAAG,MAAA,aAAW,EAAC,MAAA;OAAe6V,IAAG,CAAAtR,GAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAA;YAG7IwS,WAkJQ,CAAAc,iBAAA,EAAA;IAlJCzY,QAAQ,EAAEyW,IAAQ,CAAAzW,QAAAA;AAAA,GAAA,EAAA;uBACvB,YAAA;AAAA,MAAA,OAgJY,CAhJZ2X,WAAA,CAgJYe,YAhJZnC,UAgJY,CAAA;AAhJArY,QAAAA,IAAI,EAAC,qBAAoB;QAAGya,OAAK,EAAE9B,QAAc,CAAAtK,cAAA;QAAGqM,YAAW,EAAE/B,QAAmB,CAAA3J,mBAAA;QAAG2L,OAAK,EAAEhC,QAAc,CAAAvJ,cAAA;QAAGwL,YAAW,EAAEjC,QAAmB,CAAArJ,mBAAAA;SAAUiJ,IAAG,CAAAtR,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA;2BACpK,YAAA;AAAA,UAAA,OA8IK,CA9IMgS,KAAc,CAAA1T,cAAA,IAAzB4S,SAAA,EAAA,EAAAC,kBAAA,CA8IK,OA9ILC,UA8IK,CAAA;;YA9IuBC,GAAG,EAAEK,QAAU,CAAAhE,UAAA;YAAG7Q,KAAK,EAAA,CAAGyU,IAAU,CAAAlX,UAAA,EAAEkX,IAAY,CAAAhX,YAAA,CAAA;AAAI,YAAA,OAAA,EAAQ,CAAAgX,IAAA,CAAAC,EAAE,CAAa,SAAA,CAAA,EAAAD,IAAA,CAAAnX,UAAU,EAAEmX,IAAY,CAAAjX,YAAA,CAAA;YAAIoX,OAAK;qBAAEC,QAAc,CAAA3L,cAAA,IAAA2L,QAAA,CAAA3L,cAAA,CAAA4L,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;AAAA,aAAA,CAAA;YAAG4N,SAAO;qBAAEP,QAAgB,CAAAvL,gBAAA,IAAAuL,QAAA,CAAAvL,gBAAA,CAAAwL,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;aAAA,CAAA;aAAUiN,IAAG,CAAAtR,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAC/L6R,kBAAA,CAUO,QAVPT,UAUO,CAAA;AATHC,YAAAA,GAAG,EAAC,sCAAqC;AACzCU,YAAAA,IAAI,EAAC,cAAa;AAClB,YAAA,aAAW,EAAC,MAAK;AACjB,YAAA,OAAA,EAAM,wCAAuC;AAC5CrV,YAAAA,QAAQ,EAAE,CAAC;YACXsF,OAAK;qBAAE0P,QAAkB,CAAA7N,kBAAA,IAAA6N,QAAA,CAAA7N,kBAAA,CAAA8N,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;aAAA,CAAA;aAClBiN,IAAG,CAAAtR,GAAA,CAAA,wBAAA,CAAA,EAAA;AACV,YAAA,0BAAwB,EAAE,IAAI;AAC9B,YAAA,yBAAuB,EAAE,IAAA;yBAE9BmS,UAAwE,CAAAb,IAAA,CAAAc,MAAA,EAAA,QAAA,EAAA;YAAnDhP,KAAK,EAAEkO,IAAU,CAAApY,UAAA;YAAGC,OAAO,EAAEuY,QAAc,CAAA1Q,cAAAA;cACpDsQ,IAAY,CAAAlW,aAAA,IAAKkW,+BAA2BA,IAAM,CAAA9W,MAAA,IAA9D0W,SAAA,EAAA,EAAAC,kBAAA,CA+CK,OA/CLC,UA+CK,CAAA;;AA/C4D,YAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,QAAA,CAAA;aAAoBD,IAAG,CAAAtR,GAAA,CAAA,QAAA,CAAA,CAAA,EAAA,CAEnFsR,IAAA,CAAAlW,aAAc,IAAGkW,IAAe,CAAAnW,cAAA,IAAA,IAAA,iBAD1C+X,WAeU,CAAAU,mBAAA,EAAA;;YAbL1a,UAAU,EAAEwY,QAAW,CAAAvR,WAAA;AACvB0T,YAAAA,MAAM,EAAE,IAAI;YACZ5Z,QAAQ,EAAEqX,IAAQ,CAAArX,QAAA;YAClBH,OAAO,EAAEwX,IAAO,CAAAxX,OAAA;YAChB,YAAU,EAAE4X,QAAkB,CAAA9B,kBAAA;YAC9BkE,QAAM,EAAEpC,QAAW,CAAAzH,WAAA;YACnB2I,QAAQ,EAAEtB,IAAQ,CAAAsB,QAAA;AAClBG,YAAAA,EAAE,EAAErB,QAA0B,CAAA5R,0BAAA,CAAA,kBAAA,CAAA;;AAEpBiU,YAAAA,IAAI,EAAAC,OAAA,CACX,UAAmIC,SAD7G,EAAA;cAAA,OAAA,CACL3C,IAAA,CAAAc,MAAM,CAAC8B,kBAAkB,iBAA1ChB,WAAmI,CAAAG,uBAAA,CAAlF/B,IAAM,CAAAc,MAAA,CAAC8B,kBAAkB,CAAA,EAAA;;gBAAG/J,OAAO,EAAE8J,SAAS,CAAC9J,OAAO;gBAAG,OAAKgK,EAAAA,cAAA,CAAEF,SAAS,CAAM,OAAA,CAAA,CAAA;mDAC1GA,SAAS,CAAC9J,OAAO,iBAAvC+I,WAAmN,CAAAG,uBAAA,CAArK/B,2CAA9CF,UAAmN,CAAA;;AAA/H,gBAAA,OAAA,EAAK,CAAG6C,SAAS,CAAM,OAAA,CAAA,EAAAvF,eAAA,CAAA,EAAA,EAAK4C,IAAY,CAAAhW,YAAA,EAAG2Y,SAAS,CAAC9J;iBAAoBuH,QAA0B,CAAA5R,0BAAA,CAAA,uBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAA;;;oIAG/L0S,WA0BW,CAAA4B,oBAAA,EAAA;YA1BC,wBAAO9C,IAAE,CAAAC,EAAA,CAAA,mBAAA,CAAA,CAAA;YAAwBqB,QAAQ,EAAEtB,IAAQ,CAAAsB,QAAA;AAAGG,YAAAA,EAAE,EAAEzB,IAAG,CAAAtR,GAAA,CAAA,mBAAA,CAAA;;+BACrE,YAAA;AAAA,cAAA,OAkBC,CAlBDwS,WAkBC,CAAA6B,oBAAA,EAAA;AAjBGhD,gBAAAA,GAAG,EAAC,aAAY;gBACfjO,KAAK,EAAE4O,KAAW,CAAA3T,WAAA;gBAClBiW,cAAW,EAAE5C,QAAe,CAAA7L,eAAA;gBAC5B0O,cAAW,EAAE7C,QAAe,CAAA7L,eAAA;gBAC5B,wBAAOyL,IAAE,CAAAC,EAAA,CAAA,UAAA,CAAA,CAAA;gBACT1X,WAAW,EAAEyX,IAAiB,CAAA7W,iBAAA;gBAC9BR,QAAQ,EAAEqX,IAAQ,CAAArX,QAAA;gBAClBH,OAAO,EAAEwX,IAAO,CAAAxX,OAAA;gBAChB8Y,QAAQ,EAAEtB,IAAQ,CAAAsB,QAAA;AACnBb,gBAAAA,IAAI,EAAC,WAAU;AACfyC,gBAAAA,YAAY,EAAC,KAAI;AAChB,gBAAA,WAAS,EAAExC,KAAC,CAAAhU,EAAA,GAAA,OAAA;gBACZ,uBAAqB,EAAE0T,QAAe,CAAA5E,eAAA;gBACtCmF,SAAO,EAAEP,QAAe,CAAAhM,eAAA;gBACxBvD,MAAI,EAAEuP,QAAY,CAAA9L,YAAA;gBAClB6O,OAAK,EAAE/C,QAAc,CAAAnM,cAAA;AACrBwN,gBAAAA,EAAE,EAAEzB,IAAG,CAAAtR,GAAA,CAAA,UAAA,CAAA;mNAEZwS,WAAA,CAKWkC,sBALXtD,UAKW,CAAA;gBALCwB,QAAQ,EAAEtB,IAAA,CAAAsB,QAAAA;iBAAkBtB,IAAG,CAAAtR,GAAA,CAAA,uBAAA,CAAA,CAAA,EAAA;mCACvC,YAAA;kBAAA,OAGM,CAHNmS,UAAA,CAGMb,+BAHN,YAAA;AAAA,oBAAA,OAGM,CAFUA,IAAU,CAAA5V,UAAA,IAAtBwV,SAAA,EAAA,EAAAC,kBAAA,CAAwE,QAAxEC,UAAwE,CAAA;;AAA/C,sBAAA,OAAA,EAAOE,IAAU,CAAA5V,UAAAA;uBAAU4V,IAAG,CAAAtR,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,CAAA,KACvDkR,SAAA,EAAA,EAAAgC,WAAA,CAA+CyB;;uBAApBrD,IAAG,CAAAtR,GAAA,CAAA,YAAA,CAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;;;;;;;8CAI9BsR,IAAM,CAAA9W,MAAA,IAAlB0W,SAAA,EAAA,EAAAC,kBAAA,CAEM,QAFNC,UAEM,CAAA;;AAFcW,YAAAA,IAAI,EAAC,QAAS;AAAA,YAAA,WAAS,EAAC,QAAS;YAAA,OAAM,EAAA,qBAAA;AAA8B,WAAA,EAAAT,IAAA,CAAAtR,GAAG,CAAyB,oBAAA,CAAA,EAAA;AAAA,YAAA,0BAAwB,EAAE,IAAA;8BACxI0R,QAAsB,CAAA1C,uBAAA,CAAA,EAAA,EAAA,CAAA,wEAGjC6C,kBAAA,CA8DK,OA9DLT,UA8DK,CAAA;AA9DC,YAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,eAAA,CAAA;AAAoB1U,YAAAA,KAAK,EAAA;cAAA,YAAA,EAAkB6U,QAAsB,CAAAnS,uBAAA,GAAI+R,IAAa,CAAA5X,YAAA,GAAA,EAAA;AAAA,aAAA;aAAgB4X,IAAG,CAAAtR,GAAA,CAAA,eAAA,CAAA,CAAA,EAAA,CAChHwS,WAAA,CA4DiBoC,4BA5DjBxD,UA4DiB,CAAA;YA5DCC,GAAG,EAAEK,QAAA,CAAA7D,kBAAAA;aAA4ByD,IAAsB,CAAAtV,sBAAA,EAAA;YAAG6Y,KAAK,EAAEnD,QAAc,CAAA1Q,cAAA;AAAGnE,YAAAA,KAAK;sBAAYyU,IAAa,CAAA5X,YAAAA;aAAA;YAAIgD,QAAQ,EAAE,CAAE,CAAA;YAAGzC,QAAQ,EAAEyX,QAAuB,CAAAnS,uBAAA;AAAGwT,YAAAA,EAAE,EAAEzB,IAAG,CAAAtR,GAAA,CAAA,iBAAA,CAAA;;AAC3K8U,YAAAA,OAAO,EACpBd,OAAA,CAAA,UAAAe,KAAA,EAAA;AAAA,cAAA,IADwBC,UAAU,GAAAD,KAAA,CAAVC,UAAU;gBAAEpH,UAAU,GAAAmH,KAAA,CAAVnH,UAAU;gBAAEiH,KAAK,GAAAE,KAAA,CAALF,KAAK;gBAAEI,cAAc,GAAAF,KAAA,CAAdE,cAAc;gBAAEC,YAAY,GAAAH,KAAA,CAAZG,YAAY;gBAAEC,QAAO,GAAAJ,KAAA,CAAPI,QAAO,CAAA;AAAA,cAAA,OAAA,CAC5FtD,kBAAA,CAqDI,MArDJT,UAqDI,CAAA;gBArDCC,GAAG,eAAGhK,EAAE,EAAA;AAAA,kBAAA,OAAKqK,gBAAO,CAACrK,EAAE,EAAEuG,UAAU,CAAA,CAAA;AAAA,iBAAA;AAAI5P,gBAAAA,EAAE,EAAEgU,KAAG,CAAAhU,EAAA,GAAA,OAAA;gBAAY,OAAK,EAAA,CAAGsT,IAAE,CAAAC,EAAA,CAAA,MAAA,CAAA,EAAUyD,UAAU,CAAA;AAAInY,gBAAAA,KAAK,EAAEqY,YAAY;AAAEnD,gBAAAA,IAAI,EAAC,SAAQ;AAAE,gBAAA,sBAAoB,EAAC,MAAO;gBAAC,YAAU,EAAEL,QAAa,CAAA1B,aAAAA;iBAAUsB,IAAG,CAAAtR,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,EACpMkR,SAAA,CAAA,IAAA,CAAA,EAAAC,kBAAA,CA6CUkB,QA7CsB,EAAA,IAAA,EAAAC,UAAA,CAAAuC,KAAK,EAAnB,UAAApV,MAAM,EAAEmP,CAAC,EAAA;;AAAkB7O,kBAAAA,GAAA,EAAA2R,QAAA,CAAA7R,kBAAkB,CAACJ,MAAM,EAAEiS,uBAAc,CAAC9C,CAAC,EAAEqG,cAAc,CAAA,CAAA;oBAE1FvD,QAAA,CAAAjR,aAAa,CAAChB,MAAM,CAAA,IAD9ByR,SAAA,EAAA,EAAAC,kBAAA,CASI,MATJC,UASI,CAAA;;AAPCpT,kBAAAA,EAAE,EAAEgU,KAAC,CAAAhU,EAAA,GAAA,GAAA,GAAU0T,uBAAc,CAAC9C,CAAC,EAAEqG,cAAc,CAAA;AAC/CpY,kBAAAA,KAAK,EAAY;AAAAuY,oBAAAA,MAAA,EAAAD,QAAO,GAAIA,QAAO,UAAW5Z,SAAAA;mBAAQ;AACtD,kBAAA,OAAA,EAAO+V,IAAE,CAAAC,EAAA,CAAA,aAAA,CAAA;AACVQ,kBAAAA,IAAI,EAAC,QAAO;;mBACJT,IAAG,CAAAtR,GAAA,CAAA,aAAA,CAAA,CAAA,EAAA,CAEXmS,UAAoJ,CAAAb,IAAA,CAAAc,MAAA,EAAA,aAAA,EAAA;kBAA1H3S,MAAM,EAAEA,MAAM,CAACiB,WAAW;AAAGrB,kBAAAA,KAAK,EAAEqS,QAAA,CAAAtS,cAAc,CAACwP,CAAC,EAAEqG,cAAc,CAAA;mBAA9F,YAAA;AAAA,kBAAA,OAAoJ,iCAAhDvD,QAAmB,CAAA9Q,mBAAA,CAACnB,MAAM,CAACiB,WAAW,CAAA,CAAA,EAAA,CAAA,CAAA;wCAE9I2U,cAAA,EAAAnE,SAAA,EAAA,EAAAC,kBAAA,CAiCI,MAjCJC,UAiCI,CAAA;;AA/BCpT,kBAAAA,EAAE,EAAEgU,KAAC,CAAAhU,EAAA,GAAA,GAAA,GAAU0T,uBAAc,CAAC9C,CAAC,EAAEqG,cAAc,CAAA;AAE/CpY,kBAAAA,KAAK,EAAY;AAAAuY,oBAAAA,MAAA,EAAAD,QAAO,GAAIA,QAAO,UAAW5Z,SAAAA;mBAAQ;AACtD,kBAAA,OAAA,EAAO+V,IAAE,CAAAC,EAAA,CAAA,QAAA,EAAA;AAAa9R,oBAAAA,MAAM,EAANA,MAAM;AAASJ,oBAAAA,KAAA,EAAAuP,CAAC;AAAEqG,oBAAAA,cAAe,EAAfA,cAAAA;AAAe,mBAAA,CAAA;AACxDlD,kBAAAA,IAAI,EAAC,QAAO;AACX,kBAAA,YAAU,EAAEL,QAAc,CAAAlS,cAAA,CAACC,MAAM,CAAA;AACjC,kBAAA,eAAa,EAAEiS,QAAU,CAAApR,UAAA,CAACb,MAAM,CAAA;AAChC,kBAAA,eAAa,EAAEiS,QAAgB,CAAAnR,gBAAA,CAACd,MAAM,CAAA;kBACtC,cAAY,EAAEiS,QAAW,CAAAhC,WAAA;AACzB,kBAAA,eAAa,EAAEgC,QAAe,CAAA5Q,eAAA,CAAC4Q,uBAAc,CAAC9C,CAAC,EAAEqG,cAAc,CAAA,CAAA;kBAC/DxD,OAAK,EAAA,SAAAA,OAAAA,CAAAqB,MAAA,EAAA;AAAA,oBAAA,OAAEpB,QAAc,CAAAvN,cAAA,CAAC2O,MAAM,EAAErT,MAAM,EAAEiS,QAAc,CAAAtS,cAAA,CAACwP,CAAC,EAAEqG,cAAc,CAAA,EAAA,IAAA,CAAA,CAAA;mBAAA;kBACtEK,WAAS,EAAA,SAAAA,WAAAA,CAAAxC,MAAA,EAAA;AAAA,oBAAA,OAAEpB,0BAAiB,CAACoB,MAAM,EAAEpB,QAAc,CAAAtS,cAAA,CAACwP,CAAC,EAAEqG,cAAc,CAAA,CAAA,CAAA;mBAAA;;AAC9D,iBAAA,EAAAvD,QAAA,CAAAtR,oBAAoB,CAACX,MAAM,EAAEwV,cAAc,EAAErG,CAAC,EAAA,QAAA,CAAA,EAAA;AACrD,kBAAA,iBAAe,EAAE8C,QAAU,CAAApR,UAAA,CAACb,MAAM,CAAA;AAClC,kBAAA,gBAAc,EAAEuS,KAAiB,CAAA5T,kBAAA,KAAMsT,uBAAc,CAAC9C,CAAC,EAAEqG,cAAc,CAAA;AACvE,kBAAA,iBAAe,EAAEvD,QAAgB,CAAAnR,gBAAA,CAACd,MAAM,CAAA;qBAEzC+S,WAUU,CAAAoB,mBAAA,EAAA;AAVC1a,kBAAAA,UAAU,EAAEwY,QAAU,CAAApR,UAAA,CAACb,MAAM,CAAA;AAAIoU,kBAAAA,MAAM,EAAE,IAAI;kBAAGnX,QAAQ,EAAE,CAAE,CAAA;kBAAG5C,OAAO,EAAEwX,IAAO,CAAAxX,OAAA;kBAAG8Y,QAAQ,EAAEtB,IAAQ,CAAAsB,QAAA;kBAAGG,EAAE,EAAErB,QAAoB,CAAAtR,oBAAA,CAACX,MAAM,EAAEwV,cAAc,EAAErG,CAAC,EAAA,kBAAA,CAAA;;AACrJmF,kBAAAA,IAAI,EAAAC,OAAA,CACX,UAAyLC,SADnK,EAAA;AAAA,oBAAA,OAAA,CACL3C,IAAA,CAAAc,MAAM,CAACmD,sBAAsBjE,IAAA,CAAAc,MAAM,CAACoD,gBAAgB,IAArEtE,SAAA,EAAA,EAAAgC,WAAA,CAAyLG,wBAA7G/B,IAAM,CAAAc,MAAA,CAACmD,sBAAsBjE,IAAA,CAAAc,MAAM,CAACoD,gBAAgB,CAAA,EAAA;;sBAAGrL,OAAO,EAAE8J,SAAS,CAAC9J,OAAO;sBAAG,OAAKgK,EAAAA,cAAA,CAAEF,SAAS,CAAM,OAAA,CAAA,CAAA;yDAEvKA,SAAS,CAAC9J,OAAO,iBADhC+I,WAKC,CAAAG,uBAAA,CAHQ/B,IAAa,CAAAhW,YAAA,GAAA,MAAA,GAAA,WAAA,CAAA,EAFtB8V,UAKC,CAAA;;AAFI,sBAAA,OAAA,EAAK,CAAG6C,SAAS,CAAM,OAAA,CAAA,EAAAvF,eAAA,CAAA,EAAA,EAAK4C,IAAY,CAAAhW,YAAA,EAAG2Y,SAAS,CAAC9J,OAAQ,CAAA,CAAA;;AACtD,qBAAA,EAAAuH,QAAA,CAAAtR,oBAAoB,CAACX,MAAM,EAAEwV,cAAc,EAAErG,CAAC,EAAA,uBAAA,CAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,OAAA,CAAA,CAAA;;;uEAIlEuD,UAEM,CAAAb,IAAA,CAAAc,MAAA,EAAA,QAAA,EAAA;AAFe3S,kBAAAA,MAAM,EAAEA,MAAM;AAAGS,kBAAAA,QAAQ,EAAEwR,QAAU,CAAApR,UAAA,CAACb,MAAM,CAAA;AAAIJ,kBAAAA,KAAK,EAAEqS,QAAA,CAAAtS,cAAc,CAACwP,CAAC,EAAEqG,cAAc,CAAA;mBAA5G,YAAA;AAAA,kBAAA,OAEM,CADFpD,kBAAA,CAAoE,QAApET,UAAoE,CAAA;AAAAqE,oBAAAA,OAAA,EAAA,IAAA;mBAAA,EAAtDnE,QAAG,CAAoB,aAAA,CAAA,CAAA,EAAAoE,eAAA,CAAAhE,QAAA,CAAAlS,cAAc,CAACC,MAAM,CAAA,CAAA,EAAA,EAAA,CAAA;;yBAI5DuS,KAAA,CAAA3T,WAAY,MAAKwW,KAAI,IAAMA,KAAI,IAAKA,KAAK,CAAC3T,MAAK,KAAA,CAAA,CAAA,IAAzDgQ,SAAA,EAAA,EAAAC,kBAAA,CAEI,MAFJC,UAEI,CAAA;;AAFiE,gBAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,cAAA,CAAA;AAAkBQ,gBAAAA,IAAI,EAAC,QAAA;iBAAiBT,IAAG,CAAAtR,GAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CACrHmS,UAAA,CAA2Db,gCAA3D,YAAA;AAAA,gBAAA,OAA2D,iCAA/BI,QAAuB,CAAAvC,sBAAA,CAAA,EAAA,CAAA,CAAA;0BAEvC,CAAAmC,IAAA,CAAAnY,OAAM,IAAMmY,IAAA,CAAAnY,OAAQ,IAAGmY,IAAA,CAAAnY,OAAO,CAAC+H,MAAO,KAAA,CAAA,IAAtDgQ,SAAA,EAAA,EAAAC,kBAAA,CAEI,MAFJC,UAEI,CAAA;;AAF2D,gBAAA,OAAA,EAAOE,IAAE,CAAAC,EAAA,CAAA,cAAA,CAAA;AAAkBQ,gBAAAA,IAAI,EAAC,QAAA;iBAAiBT,IAAG,CAAAtR,GAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAC/GmS,UAAA,CAA+Cb,0BAA/C,YAAA;AAAA,gBAAA,OAA+C,iCAAzBI,QAAe,CAAApC,gBAAA,CAAA,EAAA,CAAA,CAAA;;;;cAIjCgC,IAAA,CAAAc,MAAM,CAACuD,MAAM;kBAAS,QAAM;AACxCrW,YAAAA,EAAA,EAAA0U,OAAA,CAAA,UAAA4B,KAAA,EAAA;AAAA,cAAA,IAD4Czc,OAAQ,GAAAyc,KAAA,CAARzc,OAAQ,CAAA;cAAA,OAAA,CACpDgZ,UAA6C,CAAAb,IAAA,CAAAc,MAAA,EAAA,QAAA,EAAA;AAAxBjZ,gBAAAA,OAAO,EAAEA,OAAAA;AAAO,eAAA,CAAA;;;8EAIjDgZ,UAAwE,CAAAb,IAAA,CAAAc,MAAA,EAAA,QAAA,EAAA;YAAnDhP,KAAK,EAAEkO,IAAU,CAAApY,UAAA;YAAGC,OAAO,EAAEuY,QAAc,CAAA1Q,cAAAA;cACnD,CAAAsQ,IAAA,CAAAnY,WAAYmY,IAAA,CAAAnY,OAAM,IAAKmY,IAAA,CAAAnY,OAAO,CAAC+H,MAAK,KAAA,CAAA,IAAjDgQ,SAAA,EAAA,EAAAC,kBAAA,CAEM,QAFNC,UAEM,CAAA;;AAFqDW,YAAAA,IAAI,EAAC,QAAS;AAAA,YAAA,WAAS,EAAC;YAAS,OAAM,EAAA,qBAAA;AAA8B,WAAA,EAAAT,IAAA,CAAAtR,GAAG,CAAyB,oBAAA,CAAA,EAAA;AAAA,YAAA,0BAAwB,EAAE,IAAA;8BAC/K0R,iEAEPG,kBAAA,CAEM,QAFNT,UAEM,CAAA;AAFAW,YAAAA,IAAI,EAAC,QAAS;AAAA,YAAA,WAAS,EAAC,QAAO;YAAE,OAAM,EAAA,qBAAA;AAA8B,WAAA,EAAAT,IAAA,CAAAtR,GAAG,CAA4B,uBAAA,CAAA,EAAA;AAAA,YAAA,0BAAwB,EAAE,IAAA;8BAC7H0R,oCAEPG,kBAAA,CAUO,QAVPT,UAUO,CAAA;AATHC,YAAAA,GAAG,EAAC,qCAAoC;AACxCU,YAAAA,IAAI,EAAC,cAAa;AAClB,YAAA,aAAW,EAAC,MAAK;AACjB,YAAA,OAAA,EAAM,wCAAuC;AAC5CrV,YAAAA,QAAQ,EAAE,CAAC;YACXsF,OAAK;qBAAE0P,QAAiB,CAAAzN,iBAAA,IAAAyN,QAAA,CAAAzN,iBAAA,CAAA0N,KAAA,CAAAD,QAAA,EAAArN,SAAA,CAAA,CAAA;aAAA,CAAA;aACjBiN,IAAG,CAAAtR,GAAA,CAAA,uBAAA,CAAA,EAAA;AACV,YAAA,0BAAwB,EAAE,IAAI;AAC9B,YAAA,yBAAuB,EAAE,IAAA;;;;;;;;;;;;;;"}