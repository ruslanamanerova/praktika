{"version":3,"file":"index.mjs","sources":["../../src/accordionheader/BaseAccordionHeader.vue","../../src/accordionheader/AccordionHeader.vue","../../src/accordionheader/AccordionHeader.vue?vue&type=template&id=2a8034cb&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport AccordionHeaderStyle from 'primevue/accordionheader/style';\n\nexport default {\n    name: 'BaseAccordionHeader',\n    extends: BaseComponent,\n    props: {\n        as: {\n            type: String,\n            default: 'BUTTON'\n        },\n        asChild: {\n            type: Boolean,\n            default: false\n        }\n    },\n    style: AccordionHeaderStyle,\n    provide() {\n        return {\n            $pcAccordionHeader: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <component v-if=\"!asChild\" :is=\"as\" v-ripple :class=\"cx('root')\" @click=\"onClick\" v-bind=\"attrs\">\n        <slot :active=\"$pcAccordionPanel.active\"></slot>\n        <slot name=\"toggleicon\" :active=\"$pcAccordionPanel.active\" :class=\"cx('toggleicon')\">\n            <component\n                v-if=\"$pcAccordionPanel.active\"\n                :is=\"$pcAccordion.$slots.collapseicon ? $pcAccordion.$slots.collapseicon : $pcAccordion.collapseIcon ? 'span' : 'ChevronDownIcon'\"\n                :class=\"[$pcAccordion.collapseIcon, cx('toggleicon')]\"\n                aria-hidden=\"true\"\n                v-bind=\"ptm('toggleicon', ptParams)\"\n            ></component>\n            <component\n                v-else\n                :is=\"$pcAccordion.$slots.expandicon ? $pcAccordion.$slots.expandicon : $pcAccordion.expandIcon ? 'span' : 'ChevronUpIcon'\"\n                :class=\"[$pcAccordion.expandIcon, cx('toggleicon')]\"\n                aria-hidden=\"true\"\n                v-bind=\"ptm('toggleicon', ptParams)\"\n            ></component>\n        </slot>\n    </component>\n    <slot v-else :class=\"cx('root')\" :active=\"$pcAccordionPanel.active\" :a11yAttrs=\"a11yAttrs\" :onClick=\"onClick\"></slot>\n</template>\n\n<script>\nimport { DomHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronUpIcon from '@primevue/icons/chevronup';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\nimport BaseAccordionHeader from './BaseAccordionHeader.vue';\n\nexport default {\n    name: 'AccordionHeader',\n    extends: BaseAccordionHeader,\n    inheritAttrs: false,\n    inject: ['$pcAccordion', '$pcAccordionPanel'],\n    methods: {\n        onFocus() {\n            this.$pcAccordion.selectOnFocus && this.changeActiveValue();\n        },\n        onClick() {\n            this.changeActiveValue();\n        },\n        onKeydown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const nextPanel = this.findNextPanel(this.findPanel(event.currentTarget));\n\n            nextPanel ? this.changeFocusedPanel(event, nextPanel) : this.onHomeKey(event);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const prevPanel = this.findPrevPanel(this.findPanel(event.currentTarget));\n\n            prevPanel ? this.changeFocusedPanel(event, prevPanel) : this.onEndKey(event);\n            event.preventDefault();\n        },\n        onHomeKey(event) {\n            const firstPanel = this.findFirstPanel();\n\n            this.changeFocusedPanel(event, firstPanel);\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const lastPanel = this.findLastPanel();\n\n            this.changeFocusedPanel(event, lastPanel);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            this.changeActiveValue();\n            event.preventDefault();\n        },\n        findPanel(headerElement) {\n            return headerElement?.closest('[data-pc-name=\"accordionpanel\"]');\n        },\n        findHeader(panelElement) {\n            return DomHandler.findSingle(panelElement, '[data-pc-name=\"accordionheader\"]');\n        },\n        findNextPanel(panelElement, selfCheck = false) {\n            const element = selfCheck ? panelElement : panelElement.nextElementSibling;\n\n            return element ? (DomHandler.getAttribute(element, 'data-p-disabled') ? this.findNextPanel(element) : this.findHeader(element)) : null;\n        },\n        findPrevPanel(panelElement, selfCheck = false) {\n            const element = selfCheck ? panelElement : panelElement.previousElementSibling;\n\n            return element ? (DomHandler.getAttribute(element, 'data-p-disabled') ? this.findPrevPanel(element) : this.findHeader(element)) : null;\n        },\n        findFirstPanel() {\n            return this.findNextPanel(this.$pcAccordion.$el.firstElementChild, true);\n        },\n        findLastPanel() {\n            return this.findPrevPanel(this.$pcAccordion.$el.lastElementChild, true);\n        },\n        changeActiveValue() {\n            this.$pcAccordion.updateValue(this.$pcAccordionPanel.value);\n        },\n        changeFocusedPanel(event, element) {\n            DomHandler.focus(this.findHeader(element));\n        }\n    },\n    computed: {\n        id() {\n            return `${this.$pcAccordion.id}_accordionheader_${this.$pcAccordionPanel.value}`;\n        },\n        ariaControls() {\n            return `${this.$pcAccordion.id}_accordioncontent_${this.$pcAccordionPanel.value}`;\n        },\n        attrs() {\n            return mergeProps(this.asAttrs, this.a11yAttrs, this.ptmi('root', this.ptParams));\n        },\n        asAttrs() {\n            return this.as === 'BUTTON' ? { type: 'button', disabled: this.$pcAccordionPanel.disabled } : undefined;\n        },\n        a11yAttrs() {\n            return {\n                id: this.id,\n                tabindex: this.$pcAccordion.tabindex,\n                'aria-expanded': this.$pcAccordionPanel.active,\n                'aria-controls': this.ariaControls,\n                'data-pc-name': 'accordionheader',\n                'data-p-disabled': this.$pcAccordionPanel.disabled,\n                'data-p-active': this.$pcAccordionPanel.active,\n                onFocus: this.onFocus,\n                onKeydown: this.onKeydown\n            };\n        },\n        ptParams() {\n            return {\n                context: {\n                    active: this.$pcAccordionPanel.active\n                }\n            };\n        }\n    },\n    components: {\n        ChevronUpIcon,\n        ChevronDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <component v-if=\"!asChild\" :is=\"as\" v-ripple :class=\"cx('root')\" @click=\"onClick\" v-bind=\"attrs\">\n        <slot :active=\"$pcAccordionPanel.active\"></slot>\n        <slot name=\"toggleicon\" :active=\"$pcAccordionPanel.active\" :class=\"cx('toggleicon')\">\n            <component\n                v-if=\"$pcAccordionPanel.active\"\n                :is=\"$pcAccordion.$slots.collapseicon ? $pcAccordion.$slots.collapseicon : $pcAccordion.collapseIcon ? 'span' : 'ChevronDownIcon'\"\n                :class=\"[$pcAccordion.collapseIcon, cx('toggleicon')]\"\n                aria-hidden=\"true\"\n                v-bind=\"ptm('toggleicon', ptParams)\"\n            ></component>\n            <component\n                v-else\n                :is=\"$pcAccordion.$slots.expandicon ? $pcAccordion.$slots.expandicon : $pcAccordion.expandIcon ? 'span' : 'ChevronUpIcon'\"\n                :class=\"[$pcAccordion.expandIcon, cx('toggleicon')]\"\n                aria-hidden=\"true\"\n                v-bind=\"ptm('toggleicon', ptParams)\"\n            ></component>\n        </slot>\n    </component>\n    <slot v-else :class=\"cx('root')\" :active=\"$pcAccordionPanel.active\" :a11yAttrs=\"a11yAttrs\" :onClick=\"onClick\"></slot>\n</template>\n\n<script>\nimport { DomHandler } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronUpIcon from '@primevue/icons/chevronup';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\nimport BaseAccordionHeader from './BaseAccordionHeader.vue';\n\nexport default {\n    name: 'AccordionHeader',\n    extends: BaseAccordionHeader,\n    inheritAttrs: false,\n    inject: ['$pcAccordion', '$pcAccordionPanel'],\n    methods: {\n        onFocus() {\n            this.$pcAccordion.selectOnFocus && this.changeActiveValue();\n        },\n        onClick() {\n            this.changeActiveValue();\n        },\n        onKeydown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onEnterKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const nextPanel = this.findNextPanel(this.findPanel(event.currentTarget));\n\n            nextPanel ? this.changeFocusedPanel(event, nextPanel) : this.onHomeKey(event);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const prevPanel = this.findPrevPanel(this.findPanel(event.currentTarget));\n\n            prevPanel ? this.changeFocusedPanel(event, prevPanel) : this.onEndKey(event);\n            event.preventDefault();\n        },\n        onHomeKey(event) {\n            const firstPanel = this.findFirstPanel();\n\n            this.changeFocusedPanel(event, firstPanel);\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const lastPanel = this.findLastPanel();\n\n            this.changeFocusedPanel(event, lastPanel);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            this.changeActiveValue();\n            event.preventDefault();\n        },\n        findPanel(headerElement) {\n            return headerElement?.closest('[data-pc-name=\"accordionpanel\"]');\n        },\n        findHeader(panelElement) {\n            return DomHandler.findSingle(panelElement, '[data-pc-name=\"accordionheader\"]');\n        },\n        findNextPanel(panelElement, selfCheck = false) {\n            const element = selfCheck ? panelElement : panelElement.nextElementSibling;\n\n            return element ? (DomHandler.getAttribute(element, 'data-p-disabled') ? this.findNextPanel(element) : this.findHeader(element)) : null;\n        },\n        findPrevPanel(panelElement, selfCheck = false) {\n            const element = selfCheck ? panelElement : panelElement.previousElementSibling;\n\n            return element ? (DomHandler.getAttribute(element, 'data-p-disabled') ? this.findPrevPanel(element) : this.findHeader(element)) : null;\n        },\n        findFirstPanel() {\n            return this.findNextPanel(this.$pcAccordion.$el.firstElementChild, true);\n        },\n        findLastPanel() {\n            return this.findPrevPanel(this.$pcAccordion.$el.lastElementChild, true);\n        },\n        changeActiveValue() {\n            this.$pcAccordion.updateValue(this.$pcAccordionPanel.value);\n        },\n        changeFocusedPanel(event, element) {\n            DomHandler.focus(this.findHeader(element));\n        }\n    },\n    computed: {\n        id() {\n            return `${this.$pcAccordion.id}_accordionheader_${this.$pcAccordionPanel.value}`;\n        },\n        ariaControls() {\n            return `${this.$pcAccordion.id}_accordioncontent_${this.$pcAccordionPanel.value}`;\n        },\n        attrs() {\n            return mergeProps(this.asAttrs, this.a11yAttrs, this.ptmi('root', this.ptParams));\n        },\n        asAttrs() {\n            return this.as === 'BUTTON' ? { type: 'button', disabled: this.$pcAccordionPanel.disabled } : undefined;\n        },\n        a11yAttrs() {\n            return {\n                id: this.id,\n                tabindex: this.$pcAccordion.tabindex,\n                'aria-expanded': this.$pcAccordionPanel.active,\n                'aria-controls': this.ariaControls,\n                'data-pc-name': 'accordionheader',\n                'data-p-disabled': this.$pcAccordionPanel.disabled,\n                'data-p-active': this.$pcAccordionPanel.active,\n                onFocus: this.onFocus,\n                onKeydown: this.onKeydown\n            };\n        },\n        ptParams() {\n            return {\n                context: {\n                    active: this.$pcAccordionPanel.active\n                }\n            };\n        }\n    },\n    components: {\n        ChevronUpIcon,\n        ChevronDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","as","type","String","asChild","Boolean","style","AccordionHeaderStyle","provide","$pcAccordionHeader","$parentInstance","BaseAccordionHeader","inheritAttrs","inject","methods","onFocus","$pcAccordion","selectOnFocus","changeActiveValue","onClick","onKeydown","event","code","onArrowDownKey","onArrowUpKey","onHomeKey","onEndKey","onEnterKey","nextPanel","findNextPanel","findPanel","currentTarget","changeFocusedPanel","preventDefault","prevPanel","findPrevPanel","firstPanel","findFirstPanel","lastPanel","findLastPanel","headerElement","closest","findHeader","panelElement","DomHandler","findSingle","selfCheck","element","nextElementSibling","getAttribute","previousElementSibling","$el","firstElementChild","lastElementChild","updateValue","$pcAccordionPanel","value","focus","computed","id","concat","ariaControls","attrs","mergeProps","asAttrs","a11yAttrs","ptmi","ptParams","disabled","undefined","tabindex","active","context","components","ChevronUpIcon","ChevronDownIcon","directives","ripple","Ripple","_ctx","_createBlock","_resolveDynamicComponent","_mergeProps","cx","$options","_renderSlot","$slots","_openBlock","collapseicon","collapseIcon","ptm","expandicon","expandIcon"],"mappings":"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"}