{"version":3,"file":"index.mjs","sources":["../../src/inputmask/BaseInputMask.vue","../../src/inputmask/InputMask.vue","../../src/inputmask/InputMask.vue?vue&type=template&id=1c680b6f&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputMaskStyle from 'primevue/inputmask/style';\n\nexport default {\n    name: 'BaseInputMask',\n    extends: BaseComponent,\n    props: {\n        modelValue: null,\n        slotChar: {\n            type: String,\n            default: '_'\n        },\n        mask: {\n            type: String,\n            default: null\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        autoClear: {\n            type: Boolean,\n            default: true\n        },\n        unmask: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        }\n    },\n    style: InputMaskStyle,\n    provide() {\n        return {\n            $pcInputMask: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <InputText\n        :value=\"modelValue\"\n        :class=\"cx('root')\"\n        :readonly=\"readonly\"\n        :disabled=\"disabled\"\n        :invalid=\"invalid\"\n        :variant=\"variant\"\n        :placeholder=\"placeholder\"\n        :unstyled=\"unstyled\"\n        @input=\"onInput\"\n        @focus=\"onFocus\"\n        @blur=\"onBlur\"\n        @keydown=\"onKeyDown\"\n        @keypress=\"onKeyPress\"\n        @paste=\"onPaste\"\n        :pt=\"ptmi('root', ptmParams)\"\n    />\n</template>\n\n<script>\nimport { DomHandler } from '@primevue/core/utils';\nimport InputText from 'primevue/inputtext';\nimport BaseInputMask from './BaseInputMask.vue';\n\nexport default {\n    name: 'InputMask',\n    extends: BaseInputMask,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'focus', 'blur', 'keydown', 'complete', 'keypress', 'paste'],\n    watch: {\n        mask(newMask, oldMask) {\n            if (oldMask !== newMask) {\n                this.initMask();\n            }\n        }\n    },\n    mounted() {\n        this.initMask();\n    },\n    updated() {\n        if (this.isValueUpdated()) {\n            this.updateValue();\n        }\n    },\n    methods: {\n        onInput(event) {\n            if (this.androidChrome) this.handleAndroidInput(event);\n            else this.handleInputChange(event);\n\n            this.$emit('update:modelValue', event.target.value);\n        },\n        onFocus(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            this.focus = true;\n\n            clearTimeout(this.caretTimeoutId);\n            let pos;\n\n            this.focusText = this.$el.value;\n\n            pos = this.checkVal();\n\n            this.caretTimeoutId = setTimeout(() => {\n                if (this.$el !== document.activeElement) {\n                    return;\n                }\n\n                this.writeBuffer();\n\n                if (pos === this.mask.replace('?', '').length) {\n                    this.caret(0, pos);\n                } else {\n                    this.caret(pos);\n                }\n            }, 10);\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focus = false;\n            this.checkVal();\n            this.updateModel(event);\n\n            if (this.$el.value !== this.focusText) {\n                let e = document.createEvent('HTMLEvents');\n\n                e.initEvent('change', true, false);\n                this.$el.dispatchEvent(e);\n            }\n\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let k = event.code,\n                pos,\n                begin,\n                end;\n            let iPhone = /iphone/i.test(DomHandler.getUserAgent());\n\n            this.oldVal = this.$el.value;\n\n            //backspace, delete, and escape get special treatment\n            if (k === 'Backspace' || k === 'Delete' || (iPhone && k === 'Escape')) {\n                pos = this.caret();\n                begin = pos.begin;\n                end = pos.end;\n\n                if (end - begin === 0) {\n                    begin = k !== 'Delete' ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));\n                    end = k === 'Delete' ? this.seekNext(end) : end;\n                }\n\n                this.clearBuffer(begin, end);\n                this.shiftL(begin, end - 1);\n                this.updateModel(event);\n\n                event.preventDefault();\n            } else if (k === 'Enter') {\n                // enter\n                this.$el.blur();\n                this.updateModel(event);\n            } else if (k === 'Escape') {\n                // escape\n                this.$el.value = this.focusText;\n                this.caret(0, this.checkVal());\n                this.updateModel(event);\n                event.preventDefault();\n            }\n\n            this.$emit('keydown', event);\n        },\n        onKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            var k = event.code,\n                pos = this.caret(),\n                p,\n                c,\n                next,\n                completed;\n\n            if (event.ctrlKey || event.altKey || event.metaKey || event.shiftKey || event.key === 'CapsLock' || event.key === 'Escape' || event.key === 'Tab') {\n                //Ignore\n                return;\n            } else if (k && k !== 'Enter') {\n                if (pos.end - pos.begin !== 0) {\n                    this.clearBuffer(pos.begin, pos.end);\n                    this.shiftL(pos.begin, pos.end - 1);\n                }\n\n                p = this.seekNext(pos.begin - 1);\n\n                if (p < this.len) {\n                    c = event.key;\n\n                    if (this.tests[p].test(c)) {\n                        this.shiftR(p);\n\n                        this.buffer[p] = c;\n                        this.writeBuffer();\n                        next = this.seekNext(p);\n\n                        if (/android/i.test(DomHandler.getUserAgent())) {\n                            //Path for CSP Violation on FireFox OS 1.1\n                            let proxy = () => {\n                                this.caret(next);\n                            };\n\n                            setTimeout(proxy, 0);\n                        } else {\n                            this.caret(next);\n                        }\n\n                        if (pos.begin <= this.lastRequiredNonMaskPos) {\n                            completed = this.isCompleted();\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            }\n\n            this.updateModel(event);\n\n            if (completed) {\n                this.$emit('complete', event);\n            }\n\n            this.$emit('keypress', event);\n        },\n        onPaste(event) {\n            this.handleInputChange(event);\n\n            this.$emit('paste', event);\n        },\n        caret(first, last) {\n            let range, begin, end;\n\n            if (!this.$el.offsetParent || this.$el !== document.activeElement) {\n                return;\n            }\n\n            if (typeof first === 'number') {\n                begin = first;\n                end = typeof last === 'number' ? last : begin;\n\n                if (this.$el.setSelectionRange) {\n                    this.$el.setSelectionRange(begin, end);\n                } else if (this.$el['createTextRange']) {\n                    range = this.$el['createTextRange']();\n                    range.collapse(true);\n                    range.moveEnd('character', end);\n                    range.moveStart('character', begin);\n                    range.select();\n                }\n            } else {\n                if (this.$el.setSelectionRange) {\n                    begin = this.$el.selectionStart;\n                    end = this.$el.selectionEnd;\n                } else if (document['selection'] && document['selection'].createRange) {\n                    range = document['selection'].createRange();\n                    begin = 0 - range.duplicate().moveStart('character', -100000);\n                    end = begin + range.text.length;\n                }\n\n                return { begin: begin, end: end };\n            }\n        },\n        isCompleted() {\n            for (let i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\n                if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        getPlaceholder(i) {\n            if (i < this.slotChar.length) {\n                return this.slotChar.charAt(i);\n            }\n\n            return this.slotChar.charAt(0);\n        },\n        seekNext(pos) {\n            while (++pos < this.len && !this.tests[pos]);\n\n            return pos;\n        },\n        seekPrev(pos) {\n            while (--pos >= 0 && !this.tests[pos]);\n\n            return pos;\n        },\n        shiftL(begin, end) {\n            let i, j;\n\n            if (begin < 0) {\n                return;\n            }\n\n            for (i = begin, j = this.seekNext(end); i < this.len; i++) {\n                if (this.tests[i]) {\n                    if (j < this.len && this.tests[i].test(this.buffer[j])) {\n                        this.buffer[i] = this.buffer[j];\n                        this.buffer[j] = this.getPlaceholder(j);\n                    } else {\n                        break;\n                    }\n\n                    j = this.seekNext(j);\n                }\n            }\n\n            this.writeBuffer();\n            this.caret(Math.max(this.firstNonMaskPos, begin));\n        },\n        shiftR(pos) {\n            let i, c, j, t;\n\n            for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\n                if (this.tests[i]) {\n                    j = this.seekNext(i);\n                    t = this.buffer[i];\n                    this.buffer[i] = c;\n\n                    if (j < this.len && this.tests[j].test(t)) {\n                        c = t;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        },\n        handleAndroidInput(event) {\n            var curVal = this.$el.value;\n            var pos = this.caret();\n\n            if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n                // a deletion or backspace happened\n                this.checkVal(true);\n                while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n\n                if (pos.begin === 0) {\n                    while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;\n                }\n\n                this.caret(pos.begin, pos.begin);\n            } else {\n                this.checkVal(true);\n                while (pos.begin < this.len && !this.tests[pos.begin]) pos.begin++;\n\n                this.caret(pos.begin, pos.begin);\n            }\n\n            if (this.isCompleted()) {\n                this.$emit('complete', event);\n            }\n        },\n        clearBuffer(start, end) {\n            let i;\n\n            for (i = start; i < end && i < this.len; i++) {\n                if (this.tests[i]) {\n                    this.buffer[i] = this.getPlaceholder(i);\n                }\n            }\n        },\n        writeBuffer() {\n            this.$el.value = this.buffer.join('');\n        },\n        checkVal(allow) {\n            this.isValueChecked = true;\n            //try to place characters where they belong\n            let test = this.$el.value,\n                lastMatch = -1,\n                i,\n                c,\n                pos;\n\n            for (i = 0, pos = 0; i < this.len; i++) {\n                if (this.tests[i]) {\n                    this.buffer[i] = this.getPlaceholder(i);\n\n                    while (pos++ < test.length) {\n                        c = test.charAt(pos - 1);\n\n                        if (this.tests[i].test(c)) {\n                            this.buffer[i] = c;\n                            lastMatch = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > test.length) {\n                        this.clearBuffer(i + 1, this.len);\n                        break;\n                    }\n                } else {\n                    if (this.buffer[i] === test.charAt(pos)) {\n                        pos++;\n                    }\n\n                    if (i < this.partialPosition) {\n                        lastMatch = i;\n                    }\n                }\n            }\n\n            if (allow) {\n                this.writeBuffer();\n            } else if (lastMatch + 1 < this.partialPosition) {\n                if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n                    // Invalid value. Remove it and replace it with the\n                    // mask, which is the default behavior.\n                    if (this.$el.value) this.$el.value = '';\n                    this.clearBuffer(0, this.len);\n                } else {\n                    // Invalid value, but we opt to show the value to the\n                    // user and allow them to correct their mistake.\n                    this.writeBuffer();\n                }\n            } else {\n                this.writeBuffer();\n                this.$el.value = this.$el.value.substring(0, lastMatch + 1);\n            }\n\n            return this.partialPosition ? i : this.firstNonMaskPos;\n        },\n        handleInputChange(event) {\n            const isPasteEvent = event.type === 'paste';\n\n            if (this.readonly || isPasteEvent) {\n                return;\n            }\n\n            var pos = this.checkVal(true);\n\n            this.caret(pos);\n            this.updateModel(event);\n\n            if (this.isCompleted()) {\n                this.$emit('complete', event);\n            }\n        },\n        getUnmaskedValue() {\n            let unmaskedBuffer = [];\n\n            for (let i = 0; i < this.buffer.length; i++) {\n                let c = this.buffer[i];\n\n                if (this.tests[i] && c !== this.getPlaceholder(i)) {\n                    unmaskedBuffer.push(c);\n                }\n            }\n\n            return unmaskedBuffer.join('');\n        },\n        updateModel(e) {\n            let val = this.unmask ? this.getUnmaskedValue() : e.target.value;\n\n            this.$emit('update:modelValue', this.defaultBuffer !== val ? val : '');\n        },\n        updateValue(updateModel = true) {\n            if (this.$el) {\n                if (this.modelValue == null) {\n                    this.$el.value = '';\n                    updateModel && this.$emit('update:modelValue', '');\n                } else {\n                    this.$el.value = this.modelValue;\n                    this.checkVal();\n\n                    setTimeout(() => {\n                        if (this.$el) {\n                            this.writeBuffer();\n                            this.checkVal();\n\n                            if (updateModel) {\n                                let val = this.unmask ? this.getUnmaskedValue() : this.$el.value;\n\n                                this.$emit('update:modelValue', this.defaultBuffer !== val ? val : '');\n                            }\n                        }\n                    }, 10);\n                }\n\n                this.focusText = this.$el.value;\n            }\n        },\n        initMask() {\n            this.tests = [];\n            this.partialPosition = this.mask.length;\n            this.len = this.mask.length;\n            this.firstNonMaskPos = null;\n            this.defs = {\n                9: '[0-9]',\n                a: '[A-Za-z]',\n                '*': '[A-Za-z0-9]'\n            };\n\n            let ua = DomHandler.getUserAgent();\n\n            this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\n\n            let maskTokens = this.mask.split('');\n\n            for (let i = 0; i < maskTokens.length; i++) {\n                let c = maskTokens[i];\n\n                if (c === '?') {\n                    this.len--;\n                    this.partialPosition = i;\n                } else if (this.defs[c]) {\n                    this.tests.push(new RegExp(this.defs[c]));\n\n                    if (this.firstNonMaskPos === null) {\n                        this.firstNonMaskPos = this.tests.length - 1;\n                    }\n\n                    if (i < this.partialPosition) {\n                        this.lastRequiredNonMaskPos = this.tests.length - 1;\n                    }\n                } else {\n                    this.tests.push(null);\n                }\n            }\n\n            this.buffer = [];\n\n            for (let i = 0; i < maskTokens.length; i++) {\n                let c = maskTokens[i];\n\n                if (c !== '?') {\n                    if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));\n                    else this.buffer.push(c);\n                }\n            }\n\n            this.defaultBuffer = this.buffer.join('');\n            this.updateValue(false);\n        },\n        isValueUpdated() {\n            return this.unmask ? this.modelValue != this.getUnmaskedValue() : this.defaultBuffer !== this.$el.value && this.$el.value !== this.modelValue;\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        ptmParams() {\n            return {\n                context: {\n                    filled: this.filled\n                }\n            };\n        }\n    },\n    components: {\n        InputText\n    }\n};\n</script>\n","<template>\n    <InputText\n        :value=\"modelValue\"\n        :class=\"cx('root')\"\n        :readonly=\"readonly\"\n        :disabled=\"disabled\"\n        :invalid=\"invalid\"\n        :variant=\"variant\"\n        :placeholder=\"placeholder\"\n        :unstyled=\"unstyled\"\n        @input=\"onInput\"\n        @focus=\"onFocus\"\n        @blur=\"onBlur\"\n        @keydown=\"onKeyDown\"\n        @keypress=\"onKeyPress\"\n        @paste=\"onPaste\"\n        :pt=\"ptmi('root', ptmParams)\"\n    />\n</template>\n\n<script>\nimport { DomHandler } from '@primevue/core/utils';\nimport InputText from 'primevue/inputtext';\nimport BaseInputMask from './BaseInputMask.vue';\n\nexport default {\n    name: 'InputMask',\n    extends: BaseInputMask,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'focus', 'blur', 'keydown', 'complete', 'keypress', 'paste'],\n    watch: {\n        mask(newMask, oldMask) {\n            if (oldMask !== newMask) {\n                this.initMask();\n            }\n        }\n    },\n    mounted() {\n        this.initMask();\n    },\n    updated() {\n        if (this.isValueUpdated()) {\n            this.updateValue();\n        }\n    },\n    methods: {\n        onInput(event) {\n            if (this.androidChrome) this.handleAndroidInput(event);\n            else this.handleInputChange(event);\n\n            this.$emit('update:modelValue', event.target.value);\n        },\n        onFocus(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            this.focus = true;\n\n            clearTimeout(this.caretTimeoutId);\n            let pos;\n\n            this.focusText = this.$el.value;\n\n            pos = this.checkVal();\n\n            this.caretTimeoutId = setTimeout(() => {\n                if (this.$el !== document.activeElement) {\n                    return;\n                }\n\n                this.writeBuffer();\n\n                if (pos === this.mask.replace('?', '').length) {\n                    this.caret(0, pos);\n                } else {\n                    this.caret(pos);\n                }\n            }, 10);\n\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.focus = false;\n            this.checkVal();\n            this.updateModel(event);\n\n            if (this.$el.value !== this.focusText) {\n                let e = document.createEvent('HTMLEvents');\n\n                e.initEvent('change', true, false);\n                this.$el.dispatchEvent(e);\n            }\n\n            this.$emit('blur', event);\n        },\n        onKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let k = event.code,\n                pos,\n                begin,\n                end;\n            let iPhone = /iphone/i.test(DomHandler.getUserAgent());\n\n            this.oldVal = this.$el.value;\n\n            //backspace, delete, and escape get special treatment\n            if (k === 'Backspace' || k === 'Delete' || (iPhone && k === 'Escape')) {\n                pos = this.caret();\n                begin = pos.begin;\n                end = pos.end;\n\n                if (end - begin === 0) {\n                    begin = k !== 'Delete' ? this.seekPrev(begin) : (end = this.seekNext(begin - 1));\n                    end = k === 'Delete' ? this.seekNext(end) : end;\n                }\n\n                this.clearBuffer(begin, end);\n                this.shiftL(begin, end - 1);\n                this.updateModel(event);\n\n                event.preventDefault();\n            } else if (k === 'Enter') {\n                // enter\n                this.$el.blur();\n                this.updateModel(event);\n            } else if (k === 'Escape') {\n                // escape\n                this.$el.value = this.focusText;\n                this.caret(0, this.checkVal());\n                this.updateModel(event);\n                event.preventDefault();\n            }\n\n            this.$emit('keydown', event);\n        },\n        onKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            var k = event.code,\n                pos = this.caret(),\n                p,\n                c,\n                next,\n                completed;\n\n            if (event.ctrlKey || event.altKey || event.metaKey || event.shiftKey || event.key === 'CapsLock' || event.key === 'Escape' || event.key === 'Tab') {\n                //Ignore\n                return;\n            } else if (k && k !== 'Enter') {\n                if (pos.end - pos.begin !== 0) {\n                    this.clearBuffer(pos.begin, pos.end);\n                    this.shiftL(pos.begin, pos.end - 1);\n                }\n\n                p = this.seekNext(pos.begin - 1);\n\n                if (p < this.len) {\n                    c = event.key;\n\n                    if (this.tests[p].test(c)) {\n                        this.shiftR(p);\n\n                        this.buffer[p] = c;\n                        this.writeBuffer();\n                        next = this.seekNext(p);\n\n                        if (/android/i.test(DomHandler.getUserAgent())) {\n                            //Path for CSP Violation on FireFox OS 1.1\n                            let proxy = () => {\n                                this.caret(next);\n                            };\n\n                            setTimeout(proxy, 0);\n                        } else {\n                            this.caret(next);\n                        }\n\n                        if (pos.begin <= this.lastRequiredNonMaskPos) {\n                            completed = this.isCompleted();\n                        }\n                    }\n                }\n\n                event.preventDefault();\n            }\n\n            this.updateModel(event);\n\n            if (completed) {\n                this.$emit('complete', event);\n            }\n\n            this.$emit('keypress', event);\n        },\n        onPaste(event) {\n            this.handleInputChange(event);\n\n            this.$emit('paste', event);\n        },\n        caret(first, last) {\n            let range, begin, end;\n\n            if (!this.$el.offsetParent || this.$el !== document.activeElement) {\n                return;\n            }\n\n            if (typeof first === 'number') {\n                begin = first;\n                end = typeof last === 'number' ? last : begin;\n\n                if (this.$el.setSelectionRange) {\n                    this.$el.setSelectionRange(begin, end);\n                } else if (this.$el['createTextRange']) {\n                    range = this.$el['createTextRange']();\n                    range.collapse(true);\n                    range.moveEnd('character', end);\n                    range.moveStart('character', begin);\n                    range.select();\n                }\n            } else {\n                if (this.$el.setSelectionRange) {\n                    begin = this.$el.selectionStart;\n                    end = this.$el.selectionEnd;\n                } else if (document['selection'] && document['selection'].createRange) {\n                    range = document['selection'].createRange();\n                    begin = 0 - range.duplicate().moveStart('character', -100000);\n                    end = begin + range.text.length;\n                }\n\n                return { begin: begin, end: end };\n            }\n        },\n        isCompleted() {\n            for (let i = this.firstNonMaskPos; i <= this.lastRequiredNonMaskPos; i++) {\n                if (this.tests[i] && this.buffer[i] === this.getPlaceholder(i)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        getPlaceholder(i) {\n            if (i < this.slotChar.length) {\n                return this.slotChar.charAt(i);\n            }\n\n            return this.slotChar.charAt(0);\n        },\n        seekNext(pos) {\n            while (++pos < this.len && !this.tests[pos]);\n\n            return pos;\n        },\n        seekPrev(pos) {\n            while (--pos >= 0 && !this.tests[pos]);\n\n            return pos;\n        },\n        shiftL(begin, end) {\n            let i, j;\n\n            if (begin < 0) {\n                return;\n            }\n\n            for (i = begin, j = this.seekNext(end); i < this.len; i++) {\n                if (this.tests[i]) {\n                    if (j < this.len && this.tests[i].test(this.buffer[j])) {\n                        this.buffer[i] = this.buffer[j];\n                        this.buffer[j] = this.getPlaceholder(j);\n                    } else {\n                        break;\n                    }\n\n                    j = this.seekNext(j);\n                }\n            }\n\n            this.writeBuffer();\n            this.caret(Math.max(this.firstNonMaskPos, begin));\n        },\n        shiftR(pos) {\n            let i, c, j, t;\n\n            for (i = pos, c = this.getPlaceholder(pos); i < this.len; i++) {\n                if (this.tests[i]) {\n                    j = this.seekNext(i);\n                    t = this.buffer[i];\n                    this.buffer[i] = c;\n\n                    if (j < this.len && this.tests[j].test(t)) {\n                        c = t;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        },\n        handleAndroidInput(event) {\n            var curVal = this.$el.value;\n            var pos = this.caret();\n\n            if (this.oldVal && this.oldVal.length && this.oldVal.length > curVal.length) {\n                // a deletion or backspace happened\n                this.checkVal(true);\n                while (pos.begin > 0 && !this.tests[pos.begin - 1]) pos.begin--;\n\n                if (pos.begin === 0) {\n                    while (pos.begin < this.firstNonMaskPos && !this.tests[pos.begin]) pos.begin++;\n                }\n\n                this.caret(pos.begin, pos.begin);\n            } else {\n                this.checkVal(true);\n                while (pos.begin < this.len && !this.tests[pos.begin]) pos.begin++;\n\n                this.caret(pos.begin, pos.begin);\n            }\n\n            if (this.isCompleted()) {\n                this.$emit('complete', event);\n            }\n        },\n        clearBuffer(start, end) {\n            let i;\n\n            for (i = start; i < end && i < this.len; i++) {\n                if (this.tests[i]) {\n                    this.buffer[i] = this.getPlaceholder(i);\n                }\n            }\n        },\n        writeBuffer() {\n            this.$el.value = this.buffer.join('');\n        },\n        checkVal(allow) {\n            this.isValueChecked = true;\n            //try to place characters where they belong\n            let test = this.$el.value,\n                lastMatch = -1,\n                i,\n                c,\n                pos;\n\n            for (i = 0, pos = 0; i < this.len; i++) {\n                if (this.tests[i]) {\n                    this.buffer[i] = this.getPlaceholder(i);\n\n                    while (pos++ < test.length) {\n                        c = test.charAt(pos - 1);\n\n                        if (this.tests[i].test(c)) {\n                            this.buffer[i] = c;\n                            lastMatch = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > test.length) {\n                        this.clearBuffer(i + 1, this.len);\n                        break;\n                    }\n                } else {\n                    if (this.buffer[i] === test.charAt(pos)) {\n                        pos++;\n                    }\n\n                    if (i < this.partialPosition) {\n                        lastMatch = i;\n                    }\n                }\n            }\n\n            if (allow) {\n                this.writeBuffer();\n            } else if (lastMatch + 1 < this.partialPosition) {\n                if (this.autoClear || this.buffer.join('') === this.defaultBuffer) {\n                    // Invalid value. Remove it and replace it with the\n                    // mask, which is the default behavior.\n                    if (this.$el.value) this.$el.value = '';\n                    this.clearBuffer(0, this.len);\n                } else {\n                    // Invalid value, but we opt to show the value to the\n                    // user and allow them to correct their mistake.\n                    this.writeBuffer();\n                }\n            } else {\n                this.writeBuffer();\n                this.$el.value = this.$el.value.substring(0, lastMatch + 1);\n            }\n\n            return this.partialPosition ? i : this.firstNonMaskPos;\n        },\n        handleInputChange(event) {\n            const isPasteEvent = event.type === 'paste';\n\n            if (this.readonly || isPasteEvent) {\n                return;\n            }\n\n            var pos = this.checkVal(true);\n\n            this.caret(pos);\n            this.updateModel(event);\n\n            if (this.isCompleted()) {\n                this.$emit('complete', event);\n            }\n        },\n        getUnmaskedValue() {\n            let unmaskedBuffer = [];\n\n            for (let i = 0; i < this.buffer.length; i++) {\n                let c = this.buffer[i];\n\n                if (this.tests[i] && c !== this.getPlaceholder(i)) {\n                    unmaskedBuffer.push(c);\n                }\n            }\n\n            return unmaskedBuffer.join('');\n        },\n        updateModel(e) {\n            let val = this.unmask ? this.getUnmaskedValue() : e.target.value;\n\n            this.$emit('update:modelValue', this.defaultBuffer !== val ? val : '');\n        },\n        updateValue(updateModel = true) {\n            if (this.$el) {\n                if (this.modelValue == null) {\n                    this.$el.value = '';\n                    updateModel && this.$emit('update:modelValue', '');\n                } else {\n                    this.$el.value = this.modelValue;\n                    this.checkVal();\n\n                    setTimeout(() => {\n                        if (this.$el) {\n                            this.writeBuffer();\n                            this.checkVal();\n\n                            if (updateModel) {\n                                let val = this.unmask ? this.getUnmaskedValue() : this.$el.value;\n\n                                this.$emit('update:modelValue', this.defaultBuffer !== val ? val : '');\n                            }\n                        }\n                    }, 10);\n                }\n\n                this.focusText = this.$el.value;\n            }\n        },\n        initMask() {\n            this.tests = [];\n            this.partialPosition = this.mask.length;\n            this.len = this.mask.length;\n            this.firstNonMaskPos = null;\n            this.defs = {\n                9: '[0-9]',\n                a: '[A-Za-z]',\n                '*': '[A-Za-z0-9]'\n            };\n\n            let ua = DomHandler.getUserAgent();\n\n            this.androidChrome = /chrome/i.test(ua) && /android/i.test(ua);\n\n            let maskTokens = this.mask.split('');\n\n            for (let i = 0; i < maskTokens.length; i++) {\n                let c = maskTokens[i];\n\n                if (c === '?') {\n                    this.len--;\n                    this.partialPosition = i;\n                } else if (this.defs[c]) {\n                    this.tests.push(new RegExp(this.defs[c]));\n\n                    if (this.firstNonMaskPos === null) {\n                        this.firstNonMaskPos = this.tests.length - 1;\n                    }\n\n                    if (i < this.partialPosition) {\n                        this.lastRequiredNonMaskPos = this.tests.length - 1;\n                    }\n                } else {\n                    this.tests.push(null);\n                }\n            }\n\n            this.buffer = [];\n\n            for (let i = 0; i < maskTokens.length; i++) {\n                let c = maskTokens[i];\n\n                if (c !== '?') {\n                    if (this.defs[c]) this.buffer.push(this.getPlaceholder(i));\n                    else this.buffer.push(c);\n                }\n            }\n\n            this.defaultBuffer = this.buffer.join('');\n            this.updateValue(false);\n        },\n        isValueUpdated() {\n            return this.unmask ? this.modelValue != this.getUnmaskedValue() : this.defaultBuffer !== this.$el.value && this.$el.value !== this.modelValue;\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        ptmParams() {\n            return {\n                context: {\n                    filled: this.filled\n                }\n            };\n        }\n    },\n    components: {\n        InputText\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","modelValue","slotChar","type","String","mask","placeholder","autoClear","Boolean","unmask","readonly","invalid","disabled","variant","style","InputMaskStyle","provide","$pcInputMask","$parentInstance","BaseInputMask","inheritAttrs","emits","watch","newMask","oldMask","initMask","mounted","updated","isValueUpdated","updateValue","methods","onInput","event","androidChrome","handleAndroidInput","handleInputChange","$emit","target","value","onFocus","_this","focus","clearTimeout","caretTimeoutId","pos","focusText","$el","checkVal","setTimeout","document","activeElement","writeBuffer","replace","length","caret","onBlur","updateModel","e","createEvent","initEvent","dispatchEvent","onKeyDown","k","code","begin","end","iPhone","test","DomHandler","getUserAgent","oldVal","seekPrev","seekNext","clearBuffer","shiftL","preventDefault","blur","onKeyPress","_this2","p","c","next","completed","ctrlKey","altKey","metaKey","shiftKey","key","len","tests","shiftR","buffer","proxy","lastRequiredNonMaskPos","isCompleted","onPaste","first","last","range","offsetParent","setSelectionRange","collapse","moveEnd","moveStart","select","selectionStart","selectionEnd","createRange","duplicate","text","i","firstNonMaskPos","getPlaceholder","charAt","j","Math","max","t","curVal","start","join","allow","isValueChecked","lastMatch","partialPosition","defaultBuffer","substring","isPasteEvent","getUnmaskedValue","unmaskedBuffer","push","val","_this3","arguments","undefined","defs","a","ua","maskTokens","split","RegExp","computed","filled","toString","ptmParams","context","components","InputText","_createBlock","_component_InputText","_ctx","cx","unstyled","$options","onKeydown","onKeypress","pt","ptmi"],"mappings":"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"}