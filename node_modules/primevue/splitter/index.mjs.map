{"version":3,"file":"index.mjs","sources":["../../src/splitter/BaseSplitter.vue","../../src/splitter/Splitter.vue","../../src/splitter/Splitter.vue?vue&type=template&id=203f34f5&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterStyle from 'primevue/splitter/style';\n\nexport default {\n    name: 'BaseSplitter',\n    extends: BaseComponent,\n    props: {\n        layout: {\n            type: String,\n            default: 'horizontal'\n        },\n        gutterSize: {\n            type: Number,\n            default: 4\n        },\n        stateKey: {\n            type: String,\n            default: null\n        },\n        stateStorage: {\n            type: String,\n            default: 'session'\n        },\n        step: {\n            type: Number,\n            default: 5\n        }\n    },\n    style: SplitterStyle,\n    provide() {\n        return {\n            $pcSplitter: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    data() {\n        return {\n            prevSize: null\n        };\n    },\n    mounted() {\n        if (this.panels && this.panels.length) {\n            let initialized = false;\n\n            if (this.isStateful()) {\n                initialized = this.restoreState();\n            }\n\n            if (!initialized) {\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                let _panelSizes = [];\n\n                this.panels.map((panel, i) => {\n                    let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                    let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                    _panelSizes[i] = panelSize;\n                    children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                this.panelSizes = _panelSizes;\n                this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n            }\n        }\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? DomHandler.getWidth(this.$el) : DomHandler.getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) newPos = (event.pageX * 100) / this.size - (this.startPos * 100) / this.size;\n                else newPos = (event.pageY * 100) / this.size - (this.startPos * 100) / this.size;\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (ObjectUtils.isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    data() {\n        return {\n            prevSize: null\n        };\n    },\n    mounted() {\n        if (this.panels && this.panels.length) {\n            let initialized = false;\n\n            if (this.isStateful()) {\n                initialized = this.restoreState();\n            }\n\n            if (!initialized) {\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                let _panelSizes = [];\n\n                this.panels.map((panel, i) => {\n                    let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                    let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                    _panelSizes[i] = panelSize;\n                    children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                this.panelSizes = _panelSizes;\n                this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n            }\n        }\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? DomHandler.getWidth(this.$el) : DomHandler.getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) newPos = (event.pageX * 100) / this.size - (this.startPos * 100) / this.size;\n                else newPos = (event.pageY * 100) / this.size - (this.startPos * 100) / this.size;\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (ObjectUtils.isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","layout","type","String","gutterSize","Number","stateKey","stateStorage","step","style","SplitterStyle","provide","$pcSplitter","$parentInstance","BaseSplitter","inheritAttrs","emits","dragging","mouseMoveListener","mouseUpListener","touchMoveListener","touchEndListener","size","gutterElement","startPos","prevPanelElement","nextPanelElement","nextPanelSize","prevPanelSize","panelSizes","prevPanelIndex","timer","data","prevSize","mounted","_this","panels","length","initialized","isStateful","restoreState","children","_toConsumableArray","$el","filter","child","getAttribute","_panelSizes","map","panel","i","panelInitialSize","panelSize","flexBasis","parseFloat","toFixed","beforeUnmount","clear","unbindMouseListeners","methods","isSplitterPanel","onResizeStart","event","index","isKeyDown","currentTarget","target","parentElement","horizontal","DomHandler","getWidth","getHeight","pageX","changedTouches","pageY","previousElementSibling","nextElementSibling","getOuterWidth","getOuterHeight","$emit","originalEvent","sizes","$refs","gutter","setAttribute","onResize","newPos","newPrevPanelSize","newNextPanelSize","validateResize","onResizeEnd","saveState","forEach","repeat","setTimer","_this2","setInterval","clearTimer","clearInterval","onGutterKeyUp","onGutterKeyDown","code","preventDefault","onGutterMouseDown","bindMouseListeners","onGutterTouchStart","bindTouchListeners","onGutterTouchMove","onGutterTouchEnd","unbindTouchListeners","_this3","document","addEventListener","_this4","resizeEnd","prevPanelMinSize","ObjectUtils","getVNodeProp","newPanelMinSize","removeEventListener","getStorage","window","localStorage","sessionStorage","Error","isArray","setItem","JSON","stringify","_this5","storage","stateString","getItem","parse","computed","_this6","$slots","push","Array","nestedChild","gutterStyle","width","height","getPTOptions","_this$$parentInstance","context","nested","nestedState","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","sx","ptmi","$options","_Fragment","_renderList","_createBlock","_resolveDynamicComponent","tabindex","ref","role","onMousedown","$event","onTouchstart","onTouchmove","onTouchend","ptm","_createElementVNode","$data","onKeyup","apply","arguments","onKeydown","_hoisted_2"],"mappings":"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"}