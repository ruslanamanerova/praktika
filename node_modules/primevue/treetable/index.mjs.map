{"version":3,"file":"index.mjs","sources":["../../src/treetable/BaseTreeTable.vue","../../src/treetable/FooterCell.vue","../../src/treetable/FooterCell.vue?vue&type=template&id=44fb3940&lang.js","../../src/treetable/HeaderCell.vue","../../src/treetable/HeaderCell.vue?vue&type=template&id=8f925596&lang.js","../../src/treetable/BodyCell.vue","../../src/treetable/BodyCell.vue?vue&type=template&id=1fafae03&lang.js","../../src/treetable/TreeTableRow.vue","../../src/treetable/TreeTableRow.vue?vue&type=template&id=60c31a3c&lang.js","../../src/treetable/TreeTable.vue","../../src/treetable/TreeTable.vue?vue&type=template&id=73d7d6de&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport TreeTableStyle from 'primevue/treetable/style';\n\nexport default {\n    name: 'BaseTreeTable',\n    extends: BaseComponent,\n    props: {\n        value: {\n            type: null,\n            default: null\n        },\n        dataKey: {\n            type: [String, Function],\n            default: 'key'\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        metaKeySelection: {\n            type: Boolean,\n            default: false\n        },\n        rows: {\n            type: Number,\n            default: 0\n        },\n        first: {\n            type: Number,\n            default: 0\n        },\n        totalRecords: {\n            type: Number,\n            default: 0\n        },\n        paginator: {\n            type: Boolean,\n            default: false\n        },\n        paginatorPosition: {\n            type: String,\n            default: 'bottom'\n        },\n        alwaysShowPaginator: {\n            type: Boolean,\n            default: true\n        },\n        paginatorTemplate: {\n            type: String,\n            default: 'FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown'\n        },\n        pageLinkSize: {\n            type: Number,\n            default: 5\n        },\n        rowsPerPageOptions: {\n            type: Array,\n            default: null\n        },\n        currentPageReportTemplate: {\n            type: String,\n            default: '({currentPage} of {totalPages})'\n        },\n        lazy: {\n            type: Boolean,\n            default: false\n        },\n        loading: {\n            type: Boolean,\n            default: false\n        },\n        loadingIcon: {\n            type: String,\n            default: undefined\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        rowHover: {\n            type: Boolean,\n            default: false\n        },\n        autoLayout: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        defaultSortOrder: {\n            type: Number,\n            default: 1\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        removableSort: {\n            type: Boolean,\n            default: false\n        },\n        filters: {\n            type: Object,\n            default: null\n        },\n        filterMode: {\n            type: String,\n            default: 'lenient'\n        },\n        filterLocale: {\n            type: String,\n            default: undefined\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        columnResizeMode: {\n            type: String,\n            default: 'fit'\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        showGridlines: {\n            type: Boolean,\n            default: false\n        },\n        scrollable: {\n            type: Boolean,\n            default: false\n        },\n        scrollHeight: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        },\n        tableStyle: {\n            type: null,\n            default: null\n        },\n        tableClass: {\n            type: [String, Object],\n            default: null\n        },\n        tableProps: {\n            type: Object,\n            default: null\n        }\n    },\n    style: TreeTableStyle,\n    provide() {\n        return {\n            $pcTreeTable: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('footerCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <component v-if=\"column.children && column.children.footer\" :is=\"column.children.footer\" :column=\"column\" />\n        <span v-if=\"columnProp('footer')\" :class=\"cx('columnFooter')\" v-bind=\"getColumnPT('columnFooter')\">{{ columnProp('footer') }}</span>\n    </td>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'FooterCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return ObjectUtils.getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    frozen: this.columnProp('frozen'),\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let right = 0;\n                    let next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.right = right + 'px';\n                } else {\n                    let left = 0;\n                    let prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.left = left + 'px';\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('footerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        }\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('footerCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <component v-if=\"column.children && column.children.footer\" :is=\"column.children.footer\" :column=\"column\" />\n        <span v-if=\"columnProp('footer')\" :class=\"cx('columnFooter')\" v-bind=\"getColumnPT('columnFooter')\">{{ columnProp('footer') }}</span>\n    </td>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'FooterCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return ObjectUtils.getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    frozen: this.columnProp('frozen'),\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined;\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let right = 0;\n                    let next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.right = right + 'px';\n                } else {\n                    let left = 0;\n                    let prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.left = left + 'px';\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('footerClass'), this.columnProp('class'), this.cx('footerCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('footerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        }\n    }\n};\n</script>\n","<template>\n    <th\n        :class=\"containerClass\"\n        :style=\"[containerStyle]\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        :tabindex=\"columnProp('sortable') ? '0' : null\"\n        :aria-sort=\"ariaSort\"\n        role=\"columnheader\"\n        v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('headerCell') }\"\n        :data-p-sortable-column=\"columnProp('sortable')\"\n        :data-p-resizable-column=\"resizableColumns\"\n        :data-p-sorted=\"isColumnSorted()\"\n        :data-p-frozen-column=\"columnProp('frozen')\"\n    >\n        <span v-if=\"resizableColumns && !columnProp('frozen')\" :class=\"cx('columnResizer')\" @mousedown=\"onResizeStart\" v-bind=\"getColumnPT('columnResizer')\"></span>\n        <div :class=\"cx('columnHeaderContent')\" v-bind=\"getColumnPT('columnHeaderContent')\">\n            <component v-if=\"column.children && column.children.header\" :is=\"column.children.header\" :column=\"column\" />\n            <span v-if=\"columnProp('header')\" :class=\"cx('columnTitle')\" v-bind=\"getColumnPT('columnTitle')\">{{ columnProp('header') }}</span>\n            <span v-if=\"columnProp('sortable')\" v-bind=\"getColumnPT('sort')\">\n                <component :is=\"(column.children && column.children.sorticon) || sortableColumnIcon\" :sorted=\"sortState.sorted\" :sortOrder=\"sortState.sortOrder\" :class=\"cx('sortIcon')\" v-bind=\"getColumnPT('sortIcon')\" />\n            </span>\n            <Badge v-if=\"isMultiSorted()\" :class=\"cx('pcSortBadge')\" v-bind=\"getColumnPT('pcSortBadge')\" :value=\"getMultiSortMetaIndex() + 1\" size=\"small\" />\n        </div>\n    </th>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport SortAltIcon from '@primevue/icons/sortalt';\nimport SortAmountDownIcon from '@primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from '@primevue/icons/sortamountupalt';\nimport Badge from 'primevue/badge';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'HeaderCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['column-click', 'column-resizestart'],\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return ObjectUtils.getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    sorted: this.isColumnSorted(),\n                    frozen: this.$parentInstance.scrollable && this.columnProp('frozen'),\n                    resizable: this.resizableColumns,\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let right = 0;\n                    let next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.right = right + 'px';\n                } else {\n                    let left = 0;\n                    let prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.left = left + 'px';\n                }\n\n                let filterRow = this.$el.parentElement.nextElementSibling;\n\n                if (filterRow) {\n                    let index = DomHandler.index(this.$el);\n\n                    filterRow.children[index].style.left = this.styleObject.left;\n                    filterRow.children[index].style.right = this.styleObject.right;\n                }\n            }\n        },\n        onClick(event) {\n            this.$emit('column-click', { originalEvent: event, column: this.column });\n        },\n        onKeyDown(event) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && DomHandler.getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.$emit('column-click', { originalEvent: event, column: this.column });\n\n                event.preventDefault();\n            }\n        },\n        onResizeStart(event) {\n            this.$emit('column-resizestart', event);\n        },\n        getMultiSortMetaIndex() {\n            let index = -1;\n\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                let meta = this.multiSortMeta[i];\n\n                if (meta.field === this.columnProp('field') || meta.field === this.columnProp('sortField')) {\n                    index = i;\n                    break;\n                }\n            }\n\n            return index;\n        },\n        isMultiSorted() {\n            return this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n        },\n        isColumnSorted() {\n            return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('headerClass'), this.columnProp('class'), this.cx('headerCell')];\n        },\n        containerStyle() {\n            let headerStyle = this.columnProp('headerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n        },\n        sortState() {\n            let sorted = false;\n            let sortOrder = null;\n\n            if (this.sortMode === 'single') {\n                sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n                sortOrder = sorted ? this.sortOrder : 0;\n            } else if (this.sortMode === 'multiple') {\n                let metaIndex = this.getMultiSortMetaIndex();\n\n                if (metaIndex > -1) {\n                    sorted = true;\n                    sortOrder = this.multiSortMeta[metaIndex].order;\n                }\n            }\n\n            return {\n                sorted,\n                sortOrder\n            };\n        },\n        sortableColumnIcon() {\n            const { sorted, sortOrder } = this.sortState;\n\n            if (!sorted) return SortAltIcon;\n            else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;\n            else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n\n            return null;\n        },\n        ariaSort() {\n            if (this.columnProp('sortable')) {\n                const { sorted, sortOrder } = this.sortState;\n\n                if (sorted && sortOrder < 0) return 'descending';\n                else if (sorted && sortOrder > 0) return 'ascending';\n                else return 'none';\n            } else {\n                return null;\n            }\n        }\n    },\n    components: {\n        Badge,\n        SortAltIcon: SortAltIcon,\n        SortAmountUpAltIcon: SortAmountUpAltIcon,\n        SortAmountDownIcon: SortAmountDownIcon\n    }\n};\n</script>\n","<template>\n    <th\n        :class=\"containerClass\"\n        :style=\"[containerStyle]\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        :tabindex=\"columnProp('sortable') ? '0' : null\"\n        :aria-sort=\"ariaSort\"\n        role=\"columnheader\"\n        v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('headerCell') }\"\n        :data-p-sortable-column=\"columnProp('sortable')\"\n        :data-p-resizable-column=\"resizableColumns\"\n        :data-p-sorted=\"isColumnSorted()\"\n        :data-p-frozen-column=\"columnProp('frozen')\"\n    >\n        <span v-if=\"resizableColumns && !columnProp('frozen')\" :class=\"cx('columnResizer')\" @mousedown=\"onResizeStart\" v-bind=\"getColumnPT('columnResizer')\"></span>\n        <div :class=\"cx('columnHeaderContent')\" v-bind=\"getColumnPT('columnHeaderContent')\">\n            <component v-if=\"column.children && column.children.header\" :is=\"column.children.header\" :column=\"column\" />\n            <span v-if=\"columnProp('header')\" :class=\"cx('columnTitle')\" v-bind=\"getColumnPT('columnTitle')\">{{ columnProp('header') }}</span>\n            <span v-if=\"columnProp('sortable')\" v-bind=\"getColumnPT('sort')\">\n                <component :is=\"(column.children && column.children.sorticon) || sortableColumnIcon\" :sorted=\"sortState.sorted\" :sortOrder=\"sortState.sortOrder\" :class=\"cx('sortIcon')\" v-bind=\"getColumnPT('sortIcon')\" />\n            </span>\n            <Badge v-if=\"isMultiSorted()\" :class=\"cx('pcSortBadge')\" v-bind=\"getColumnPT('pcSortBadge')\" :value=\"getMultiSortMetaIndex() + 1\" size=\"small\" />\n        </div>\n    </th>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport SortAltIcon from '@primevue/icons/sortalt';\nimport SortAmountDownIcon from '@primevue/icons/sortamountdown';\nimport SortAmountUpAltIcon from '@primevue/icons/sortamountupalt';\nimport Badge from 'primevue/badge';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'HeaderCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['column-click', 'column-resizestart'],\n    props: {\n        column: {\n            type: Object,\n            default: null\n        },\n        resizableColumns: {\n            type: Boolean,\n            default: false\n        },\n        sortField: {\n            type: [String, Function],\n            default: null\n        },\n        sortOrder: {\n            type: Number,\n            default: null\n        },\n        multiSortMeta: {\n            type: Array,\n            default: null\n        },\n        sortMode: {\n            type: String,\n            default: 'single'\n        },\n        index: {\n            type: Number,\n            default: null\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        columnProp(prop) {\n            return ObjectUtils.getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    sorted: this.isColumnSorted(),\n                    frozen: this.$parentInstance.scrollable && this.columnProp('frozen'),\n                    resizable: this.resizableColumns,\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo:\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let right = 0;\n                    let next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.right = right + 'px';\n                } else {\n                    let left = 0;\n                    let prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.left = left + 'px';\n                }\n\n                let filterRow = this.$el.parentElement.nextElementSibling;\n\n                if (filterRow) {\n                    let index = DomHandler.index(this.$el);\n\n                    filterRow.children[index].style.left = this.styleObject.left;\n                    filterRow.children[index].style.right = this.styleObject.right;\n                }\n            }\n        },\n        onClick(event) {\n            this.$emit('column-click', { originalEvent: event, column: this.column });\n        },\n        onKeyDown(event) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space') && event.currentTarget.nodeName === 'TH' && DomHandler.getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.$emit('column-click', { originalEvent: event, column: this.column });\n\n                event.preventDefault();\n            }\n        },\n        onResizeStart(event) {\n            this.$emit('column-resizestart', event);\n        },\n        getMultiSortMetaIndex() {\n            let index = -1;\n\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                let meta = this.multiSortMeta[i];\n\n                if (meta.field === this.columnProp('field') || meta.field === this.columnProp('sortField')) {\n                    index = i;\n                    break;\n                }\n            }\n\n            return index;\n        },\n        isMultiSorted() {\n            return this.columnProp('sortable') && this.getMultiSortMetaIndex() > -1;\n        },\n        isColumnSorted() {\n            return this.sortMode === 'single' ? this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField')) : this.isMultiSorted();\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('headerClass'), this.columnProp('class'), this.cx('headerCell')];\n        },\n        containerStyle() {\n            let headerStyle = this.columnProp('headerStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, headerStyle, this.styleObject] : [columnStyle, headerStyle];\n        },\n        sortState() {\n            let sorted = false;\n            let sortOrder = null;\n\n            if (this.sortMode === 'single') {\n                sorted = this.sortField && (this.sortField === this.columnProp('field') || this.sortField === this.columnProp('sortField'));\n                sortOrder = sorted ? this.sortOrder : 0;\n            } else if (this.sortMode === 'multiple') {\n                let metaIndex = this.getMultiSortMetaIndex();\n\n                if (metaIndex > -1) {\n                    sorted = true;\n                    sortOrder = this.multiSortMeta[metaIndex].order;\n                }\n            }\n\n            return {\n                sorted,\n                sortOrder\n            };\n        },\n        sortableColumnIcon() {\n            const { sorted, sortOrder } = this.sortState;\n\n            if (!sorted) return SortAltIcon;\n            else if (sorted && sortOrder > 0) return SortAmountUpAltIcon;\n            else if (sorted && sortOrder < 0) return SortAmountDownIcon;\n\n            return null;\n        },\n        ariaSort() {\n            if (this.columnProp('sortable')) {\n                const { sorted, sortOrder } = this.sortState;\n\n                if (sorted && sortOrder < 0) return 'descending';\n                else if (sorted && sortOrder > 0) return 'ascending';\n                else return 'none';\n            } else {\n                return null;\n            }\n        }\n    },\n    components: {\n        Badge,\n        SortAltIcon: SortAltIcon,\n        SortAmountUpAltIcon: SortAmountUpAltIcon,\n        SortAmountDownIcon: SortAmountDownIcon\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('bodyCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <div :class=\"cx('bodyCellContent')\" v-bind=\"getColumnPT('bodyCellContent')\">\n            <button v-if=\"columnProp('expander')\" v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" :style=\"togglerStyle\" tabindex=\"-1\" v-bind=\"getColumnPT('nodeToggleButton')\" data-pc-group-section=\"rowactionbutton\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <component v-if=\"templates['nodetoggleicon']\" :is=\"templates['nodetoggleicon']\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"templates['nodetogglericon']\" :is=\"templates['nodetogglericon']\" />\n                    <SpinnerIcon v-else spin v-bind=\"ptm('nodetoggleicon')\" />\n                </template>\n                <template v-else>\n                    <component v-if=\"column.children && column.children.rowtoggleicon\" :is=\"column.children.rowtoggleicon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('rowToggleIcon')\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"column.children && column.children.rowtogglericon\" :is=\"column.children.rowtogglericon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('rowToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('rowToggleIcon')\" v-bind=\"getColumnPT('rowToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('rowToggleIcon')\" v-bind=\"getColumnPT('rowToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox\n                v-if=\"checkboxSelectionMode && columnProp('expander')\"\n                :modelValue=\"checked\"\n                :binary=\"true\"\n                :class=\"cx('pcNodeCheckbox')\"\n                @change=\"toggleCheckbox\"\n                :tabindex=\"-1\"\n                :indeterminate=\"partialChecked\"\n                :unstyled=\"unstyled\"\n                :pt=\"getColumnCheckboxPT('pcNodeCheckbox')\"\n                :data-p-partialchecked=\"partialChecked\"\n            >\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"column.children && column.children.body\" :is=\"column.children.body\" :node=\"node\" :column=\"column\" />\n            <template v-else>{{ resolveFieldData(node.data, columnProp('field')) }}</template>\n        </div>\n    </td>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'BodyCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'checkbox-toggle'],\n    props: {\n        node: {\n            type: Object,\n            default: null\n        },\n        column: {\n            type: Object,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        leaf: {\n            type: Boolean,\n            default: false\n        },\n        expanded: {\n            type: Boolean,\n            default: false\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        checked: {\n            type: Boolean,\n            default: false\n        },\n        partialChecked: {\n            type: Boolean,\n            default: false\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        columnProp(prop) {\n            return ObjectUtils.getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.$parent.selected,\n                    frozen: this.columnProp('frozen'),\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo\n        },\n        getColumnCheckboxPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    checked: this.checked,\n                    partialChecked: this.partialChecked\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let right = 0;\n                    let next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.right = right + 'px';\n                } else {\n                    let left = 0;\n                    let prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.left = left + 'px';\n                }\n            }\n        },\n        resolveFieldData(rowData, field) {\n            return ObjectUtils.resolveFieldData(rowData, field);\n        },\n        toggleCheckbox() {\n            this.$emit('checkbox-toggle');\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('bodyStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        },\n        togglerStyle() {\n            return {\n                marginLeft: this.level * this.indentation + 'rem',\n                visibility: this.leaf ? 'hidden' : 'visible'\n            };\n        },\n        checkboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronRightIcon,\n        ChevronDownIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <td :style=\"containerStyle\" :class=\"containerClass\" role=\"cell\" v-bind=\"{ ...getColumnPT('root'), ...getColumnPT('bodyCell') }\" :data-p-frozen-column=\"columnProp('frozen')\">\n        <div :class=\"cx('bodyCellContent')\" v-bind=\"getColumnPT('bodyCellContent')\">\n            <button v-if=\"columnProp('expander')\" v-ripple type=\"button\" :class=\"cx('nodeToggleButton')\" @click=\"toggle\" :style=\"togglerStyle\" tabindex=\"-1\" v-bind=\"getColumnPT('nodeToggleButton')\" data-pc-group-section=\"rowactionbutton\">\n                <template v-if=\"node.loading && loadingMode === 'icon'\">\n                    <component v-if=\"templates['nodetoggleicon']\" :is=\"templates['nodetoggleicon']\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"templates['nodetogglericon']\" :is=\"templates['nodetogglericon']\" />\n                    <SpinnerIcon v-else spin v-bind=\"ptm('nodetoggleicon')\" />\n                </template>\n                <template v-else>\n                    <component v-if=\"column.children && column.children.rowtoggleicon\" :is=\"column.children.rowtoggleicon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('rowToggleIcon')\" />\n                    <!-- TODO: Deprecated since v4.0-->\n                    <component v-if=\"column.children && column.children.rowtogglericon\" :is=\"column.children.rowtogglericon\" :node=\"node\" :expanded=\"expanded\" :class=\"cx('rowToggleIcon')\" />\n                    <component v-else-if=\"expanded\" :is=\"node.expandedIcon ? 'span' : 'ChevronDownIcon'\" :class=\"cx('rowToggleIcon')\" v-bind=\"getColumnPT('rowToggleIcon')\" />\n                    <component v-else :is=\"node.collapsedIcon ? 'span' : 'ChevronRightIcon'\" :class=\"cx('rowToggleIcon')\" v-bind=\"getColumnPT('rowToggleIcon')\" />\n                </template>\n            </button>\n            <Checkbox\n                v-if=\"checkboxSelectionMode && columnProp('expander')\"\n                :modelValue=\"checked\"\n                :binary=\"true\"\n                :class=\"cx('pcNodeCheckbox')\"\n                @change=\"toggleCheckbox\"\n                :tabindex=\"-1\"\n                :indeterminate=\"partialChecked\"\n                :unstyled=\"unstyled\"\n                :pt=\"getColumnCheckboxPT('pcNodeCheckbox')\"\n                :data-p-partialchecked=\"partialChecked\"\n            >\n                <template #icon=\"slotProps\">\n                    <component v-if=\"templates['checkboxicon']\" :is=\"templates['checkboxicon']\" :checked=\"slotProps.checked\" :partialChecked=\"partialChecked\" :class=\"slotProps.class\" />\n                </template>\n            </Checkbox>\n            <component v-if=\"column.children && column.children.body\" :is=\"column.children.body\" :node=\"node\" :column=\"column\" />\n            <template v-else>{{ resolveFieldData(node.data, columnProp('field')) }}</template>\n        </div>\n    </td>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport CheckIcon from '@primevue/icons/check';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport MinusIcon from '@primevue/icons/minus';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Checkbox from 'primevue/checkbox';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'BodyCell',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-toggle', 'checkbox-toggle'],\n    props: {\n        node: {\n            type: Object,\n            default: null\n        },\n        column: {\n            type: Object,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        leaf: {\n            type: Boolean,\n            default: false\n        },\n        expanded: {\n            type: Boolean,\n            default: false\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        checked: {\n            type: Boolean,\n            default: false\n        },\n        partialChecked: {\n            type: Boolean,\n            default: false\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        index: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        }\n    },\n    data() {\n        return {\n            styleObject: {}\n        };\n    },\n    mounted() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    updated() {\n        if (this.columnProp('frozen')) {\n            this.updateStickyPosition();\n        }\n    },\n    methods: {\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        columnProp(prop) {\n            return ObjectUtils.getVNodeProp(this.column, prop);\n        },\n        getColumnPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    index: this.index,\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.$parent.selected,\n                    frozen: this.columnProp('frozen'),\n                    scrollable: this.$parentInstance.scrollable,\n                    showGridlines: this.$parentInstance.showGridlines,\n                    size: this.$parentInstance?.size\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        getColumnProp() {\n            return this.column.props && this.column.props.pt ? this.column.props.pt : undefined; //@todo\n        },\n        getColumnCheckboxPT(key) {\n            const columnMetaData = {\n                props: this.column.props,\n                parent: {\n                    instance: this,\n                    props: this.$props,\n                    state: this.$data\n                },\n                context: {\n                    checked: this.checked,\n                    partialChecked: this.partialChecked\n                }\n            };\n\n            return mergeProps(this.ptm(`column.${key}`, { column: columnMetaData }), this.ptm(`column.${key}`, columnMetaData), this.ptmo(this.getColumnProp(), key, columnMetaData));\n        },\n        updateStickyPosition() {\n            if (this.columnProp('frozen')) {\n                let align = this.columnProp('alignFrozen');\n\n                if (align === 'right') {\n                    let right = 0;\n                    let next = DomHandler.getNextElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (next) {\n                        right = DomHandler.getOuterWidth(next) + parseFloat(next.style.right || 0);\n                    }\n\n                    this.styleObject.right = right + 'px';\n                } else {\n                    let left = 0;\n                    let prev = DomHandler.getPreviousElementSibling(this.$el, '[data-p-frozen-column=\"true\"]');\n\n                    if (prev) {\n                        left = DomHandler.getOuterWidth(prev) + parseFloat(prev.style.left || 0);\n                    }\n\n                    this.styleObject.left = left + 'px';\n                }\n            }\n        },\n        resolveFieldData(rowData, field) {\n            return ObjectUtils.resolveFieldData(rowData, field);\n        },\n        toggleCheckbox() {\n            this.$emit('checkbox-toggle');\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.columnProp('bodyClass'), this.columnProp('class'), this.cx('bodyCell')];\n        },\n        containerStyle() {\n            let bodyStyle = this.columnProp('bodyStyle');\n            let columnStyle = this.columnProp('style');\n\n            return this.columnProp('frozen') ? [columnStyle, bodyStyle, this.styleObject] : [columnStyle, bodyStyle];\n        },\n        togglerStyle() {\n            return {\n                marginLeft: this.level * this.indentation + 'rem',\n                visibility: this.leaf ? 'hidden' : 'visible'\n            };\n        },\n        checkboxSelectionMode() {\n            return this.selectionMode === 'checkbox';\n        }\n    },\n    components: {\n        Checkbox,\n        ChevronRightIcon,\n        ChevronDownIcon,\n        CheckIcon,\n        MinusIcon,\n        SpinnerIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n","<template>\n    <tr\n        ref=\"node\"\n        :class=\"containerClass\"\n        :style=\"node.style\"\n        :tabindex=\"tabindex\"\n        role=\"row\"\n        :aria-expanded=\"node.children && node.children.length ? expanded : undefined\"\n        :aria-level=\"level + 1\"\n        :aria-setsize=\"ariaSetSize\"\n        :aria-posinset=\"ariaPosInset\"\n        :aria-selected=\"getAriaSelected\"\n        :aria-checked=\"checked || undefined\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        @touchend=\"onTouchEnd\"\n        v-bind=\"ptm('row', ptmOptions)\"\n        :data-p-selected=\"selected\"\n    >\n        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n            <TTBodyCell\n                v-if=\"!columnProp(col, 'hidden')\"\n                :column=\"col\"\n                :node=\"node\"\n                :level=\"level\"\n                :leaf=\"leaf\"\n                :indentation=\"indentation\"\n                :expanded=\"expanded\"\n                :selectionMode=\"selectionMode\"\n                :checked=\"checked\"\n                :partialChecked=\"partialChecked\"\n                :templates=\"templates\"\n                @node-toggle=\"$emit('node-toggle', $event)\"\n                @checkbox-toggle=\"toggleCheckbox\"\n                :index=\"i\"\n                :loadingMode=\"loadingMode\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            ></TTBodyCell>\n        </template>\n    </tr>\n    <template v-if=\"expanded && node.children && node.children.length\">\n        <TreeTableRow\n            v-for=\"childNode of node.children\"\n            :key=\"nodeKey(childNode)\"\n            :dataKey=\"dataKey\"\n            :columns=\"columns\"\n            :node=\"childNode\"\n            :parentNode=\"node\"\n            :level=\"level + 1\"\n            :expandedKeys=\"expandedKeys\"\n            :selectionMode=\"selectionMode\"\n            :selectionKeys=\"selectionKeys\"\n            :indentation=\"indentation\"\n            :ariaPosInset=\"node.children.indexOf(childNode) + 1\"\n            :ariaSetSize=\"node.children.length\"\n            :templates=\"templates\"\n            @node-toggle=\"$emit('node-toggle', $event)\"\n            @node-click=\"$emit('node-click', $event)\"\n            @checkbox-change=\"onCheckboxChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"pt\"\n        />\n    </template>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport BodyCell from './BodyCell.vue';\n\nexport default {\n    name: 'TreeTableRow',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-click', 'node-toggle', 'checkbox-change', 'nodeClick', 'nodeToggle', 'checkboxChange'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        dataKey: {\n            type: [String, Function],\n            default: 'key'\n        },\n        parentNode: {\n            type: null,\n            default: null\n        },\n        columns: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        tabindex: {\n            type: Number,\n            default: -1\n        },\n        ariaSetSize: {\n            type: Number,\n            default: null\n        },\n        ariaPosInset: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        templates: {\n            type: Object,\n            default: null\n        }\n    },\n    nodeTouched: false,\n    methods: {\n        columnProp(col, prop) {\n            return ObjectUtils.getVNodeProp(col, prop);\n        },\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        onClick(event) {\n            if (\n                DomHandler.isClickable(event.target) ||\n                DomHandler.getAttribute(event.target, 'data-pc-section') === 'rowtogglebutton' ||\n                DomHandler.getAttribute(event.target, 'data-pc-section') === 'rowtoggleicon' ||\n                event.target.tagName === 'path'\n            ) {\n                return;\n            }\n\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n            this.nodeTouched = false;\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        nodeKey(node) {\n            return ObjectUtils.resolveFieldData(node, this.dataKey);\n        },\n        onKeyDown(event, item) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    if (!DomHandler.isClickable(event.target)) {\n                        this.onEnterKey(event, item);\n                    }\n\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const nextElementSibling = event.currentTarget.nextElementSibling;\n\n            nextElementSibling && this.focusRowChange(event.currentTarget, nextElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const previousElementSibling = event.currentTarget.previousElementSibling;\n\n            previousElementSibling && this.focusRowChange(event.currentTarget, previousElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowRightKey(event) {\n            const ishiddenIcon = DomHandler.findSingle(event.currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = DomHandler.findSingle(this.$refs.node, '[data-pc-section=\"rowtogglebutton\"]');\n\n            if (ishiddenIcon) return;\n\n            !this.expanded && togglerElement.click();\n\n            this.$nextTick(() => {\n                this.onArrowDownKey(event);\n            });\n\n            event.preventDefault();\n        },\n        onArrowLeftKey(event) {\n            if (this.level === 0 && !this.expanded) {\n                return;\n            }\n\n            const currentTarget = event.currentTarget;\n            const ishiddenIcon = DomHandler.findSingle(currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = DomHandler.findSingle(currentTarget, '[data-pc-section=\"rowtogglebutton\"]');\n\n            if (this.expanded && !ishiddenIcon) {\n                togglerElement.click();\n\n                return;\n            }\n\n            const target = this.findBeforeClickableNode(currentTarget);\n\n            target && this.focusRowChange(currentTarget, target);\n        },\n        onHomeKey(event) {\n            const findFirstElement = DomHandler.findSingle(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n\n            findFirstElement && DomHandler.focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const nodes = DomHandler.find(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n            const findFirstElement = nodes[nodes.length - 1];\n\n            DomHandler.focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            event.preventDefault();\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            if (this.selectionMode === 'checkbox') {\n                this.toggleCheckbox();\n\n                return;\n            }\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n\n            this.nodeTouched = false;\n        },\n        onTabKey() {\n            const rows = [...DomHandler.find(this.$refs.node.parentElement, 'tr')];\n            const hasSelectedRow = rows.some((row) => DomHandler.getAttribute(row, 'data-p-selected') || row.getAttribute('aria-checked') === 'true');\n\n            rows.forEach((row) => {\n                row.tabIndex = -1;\n            });\n\n            if (hasSelectedRow) {\n                const selectedNodes = rows.filter((node) => DomHandler.getAttribute(node, 'data-p-selected') || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            rows[0].tabIndex = 0;\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n            DomHandler.focus(currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const prevNode = node.previousElementSibling;\n\n            if (prevNode) {\n                const prevNodeButton = prevNode.querySelector('button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return prevNode;\n                }\n\n                return this.findBeforeClickableNode(prevNode);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check) selectionKeys[this.nodeKey(node)] = { checked: true, partialChecked: false };\n            else delete selectionKeys[this.nodeKey(node)];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onCheckboxChange(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...DomHandler.find(this.$refs.node.parentElement, 'tr')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.node.styleClass, this.cx('row')];\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.nodeKey(this.node)] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] === true : false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].partialChecked : false;\n        },\n        getAriaSelected() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : null;\n        },\n        ptmOptions() {\n            return {\n                context: {\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.selected,\n                    scrollable: this.$parentInstance.scrollable\n                }\n            };\n        }\n    },\n    components: {\n        TTBodyCell: BodyCell\n    }\n};\n</script>\n","<template>\n    <tr\n        ref=\"node\"\n        :class=\"containerClass\"\n        :style=\"node.style\"\n        :tabindex=\"tabindex\"\n        role=\"row\"\n        :aria-expanded=\"node.children && node.children.length ? expanded : undefined\"\n        :aria-level=\"level + 1\"\n        :aria-setsize=\"ariaSetSize\"\n        :aria-posinset=\"ariaPosInset\"\n        :aria-selected=\"getAriaSelected\"\n        :aria-checked=\"checked || undefined\"\n        @click=\"onClick\"\n        @keydown=\"onKeyDown\"\n        @touchend=\"onTouchEnd\"\n        v-bind=\"ptm('row', ptmOptions)\"\n        :data-p-selected=\"selected\"\n    >\n        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n            <TTBodyCell\n                v-if=\"!columnProp(col, 'hidden')\"\n                :column=\"col\"\n                :node=\"node\"\n                :level=\"level\"\n                :leaf=\"leaf\"\n                :indentation=\"indentation\"\n                :expanded=\"expanded\"\n                :selectionMode=\"selectionMode\"\n                :checked=\"checked\"\n                :partialChecked=\"partialChecked\"\n                :templates=\"templates\"\n                @node-toggle=\"$emit('node-toggle', $event)\"\n                @checkbox-toggle=\"toggleCheckbox\"\n                :index=\"i\"\n                :loadingMode=\"loadingMode\"\n                :unstyled=\"unstyled\"\n                :pt=\"pt\"\n            ></TTBodyCell>\n        </template>\n    </tr>\n    <template v-if=\"expanded && node.children && node.children.length\">\n        <TreeTableRow\n            v-for=\"childNode of node.children\"\n            :key=\"nodeKey(childNode)\"\n            :dataKey=\"dataKey\"\n            :columns=\"columns\"\n            :node=\"childNode\"\n            :parentNode=\"node\"\n            :level=\"level + 1\"\n            :expandedKeys=\"expandedKeys\"\n            :selectionMode=\"selectionMode\"\n            :selectionKeys=\"selectionKeys\"\n            :indentation=\"indentation\"\n            :ariaPosInset=\"node.children.indexOf(childNode) + 1\"\n            :ariaSetSize=\"node.children.length\"\n            :templates=\"templates\"\n            @node-toggle=\"$emit('node-toggle', $event)\"\n            @node-click=\"$emit('node-click', $event)\"\n            @checkbox-change=\"onCheckboxChange\"\n            :unstyled=\"unstyled\"\n            :pt=\"pt\"\n        />\n    </template>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport BodyCell from './BodyCell.vue';\n\nexport default {\n    name: 'TreeTableRow',\n    hostName: 'TreeTable',\n    extends: BaseComponent,\n    emits: ['node-click', 'node-toggle', 'checkbox-change', 'nodeClick', 'nodeToggle', 'checkboxChange'],\n    props: {\n        node: {\n            type: null,\n            default: null\n        },\n        dataKey: {\n            type: [String, Function],\n            default: 'key'\n        },\n        parentNode: {\n            type: null,\n            default: null\n        },\n        columns: {\n            type: null,\n            default: null\n        },\n        expandedKeys: {\n            type: null,\n            default: null\n        },\n        selectionKeys: {\n            type: null,\n            default: null\n        },\n        selectionMode: {\n            type: String,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        indentation: {\n            type: Number,\n            default: 1\n        },\n        tabindex: {\n            type: Number,\n            default: -1\n        },\n        ariaSetSize: {\n            type: Number,\n            default: null\n        },\n        ariaPosInset: {\n            type: Number,\n            default: null\n        },\n        loadingMode: {\n            type: String,\n            default: 'mask'\n        },\n        templates: {\n            type: Object,\n            default: null\n        }\n    },\n    nodeTouched: false,\n    methods: {\n        columnProp(col, prop) {\n            return ObjectUtils.getVNodeProp(col, prop);\n        },\n        toggle() {\n            this.$emit('node-toggle', this.node);\n        },\n        onClick(event) {\n            if (\n                DomHandler.isClickable(event.target) ||\n                DomHandler.getAttribute(event.target, 'data-pc-section') === 'rowtogglebutton' ||\n                DomHandler.getAttribute(event.target, 'data-pc-section') === 'rowtoggleicon' ||\n                event.target.tagName === 'path'\n            ) {\n                return;\n            }\n\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n            this.nodeTouched = false;\n        },\n        onTouchEnd() {\n            this.nodeTouched = true;\n        },\n        nodeKey(node) {\n            return ObjectUtils.resolveFieldData(node, this.dataKey);\n        },\n        onKeyDown(event, item) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    if (!DomHandler.isClickable(event.target)) {\n                        this.onEnterKey(event, item);\n                    }\n\n                    break;\n\n                case 'Tab':\n                    this.onTabKey(event);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const nextElementSibling = event.currentTarget.nextElementSibling;\n\n            nextElementSibling && this.focusRowChange(event.currentTarget, nextElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const previousElementSibling = event.currentTarget.previousElementSibling;\n\n            previousElementSibling && this.focusRowChange(event.currentTarget, previousElementSibling);\n\n            event.preventDefault();\n        },\n        onArrowRightKey(event) {\n            const ishiddenIcon = DomHandler.findSingle(event.currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = DomHandler.findSingle(this.$refs.node, '[data-pc-section=\"rowtogglebutton\"]');\n\n            if (ishiddenIcon) return;\n\n            !this.expanded && togglerElement.click();\n\n            this.$nextTick(() => {\n                this.onArrowDownKey(event);\n            });\n\n            event.preventDefault();\n        },\n        onArrowLeftKey(event) {\n            if (this.level === 0 && !this.expanded) {\n                return;\n            }\n\n            const currentTarget = event.currentTarget;\n            const ishiddenIcon = DomHandler.findSingle(currentTarget, 'button').style.visibility === 'hidden';\n            const togglerElement = DomHandler.findSingle(currentTarget, '[data-pc-section=\"rowtogglebutton\"]');\n\n            if (this.expanded && !ishiddenIcon) {\n                togglerElement.click();\n\n                return;\n            }\n\n            const target = this.findBeforeClickableNode(currentTarget);\n\n            target && this.focusRowChange(currentTarget, target);\n        },\n        onHomeKey(event) {\n            const findFirstElement = DomHandler.findSingle(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n\n            findFirstElement && DomHandler.focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            const nodes = DomHandler.find(event.currentTarget.parentElement, `tr[aria-level=\"${this.level + 1}\"]`);\n            const findFirstElement = nodes[nodes.length - 1];\n\n            DomHandler.focus(findFirstElement);\n\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            event.preventDefault();\n            this.setTabIndexForSelectionMode(event, this.nodeTouched);\n\n            if (this.selectionMode === 'checkbox') {\n                this.toggleCheckbox();\n\n                return;\n            }\n\n            this.$emit('node-click', {\n                originalEvent: event,\n                nodeTouched: this.nodeTouched,\n                node: this.node\n            });\n\n            this.nodeTouched = false;\n        },\n        onTabKey() {\n            const rows = [...DomHandler.find(this.$refs.node.parentElement, 'tr')];\n            const hasSelectedRow = rows.some((row) => DomHandler.getAttribute(row, 'data-p-selected') || row.getAttribute('aria-checked') === 'true');\n\n            rows.forEach((row) => {\n                row.tabIndex = -1;\n            });\n\n            if (hasSelectedRow) {\n                const selectedNodes = rows.filter((node) => DomHandler.getAttribute(node, 'data-p-selected') || node.getAttribute('aria-checked') === 'true');\n\n                selectedNodes[0].tabIndex = 0;\n\n                return;\n            }\n\n            rows[0].tabIndex = 0;\n        },\n        focusRowChange(firstFocusableRow, currentFocusedRow) {\n            firstFocusableRow.tabIndex = '-1';\n            currentFocusedRow.tabIndex = '0';\n            DomHandler.focus(currentFocusedRow);\n        },\n        findBeforeClickableNode(node) {\n            const prevNode = node.previousElementSibling;\n\n            if (prevNode) {\n                const prevNodeButton = prevNode.querySelector('button');\n\n                if (prevNodeButton && prevNodeButton.style.visibility !== 'hidden') {\n                    return prevNode;\n                }\n\n                return this.findBeforeClickableNode(prevNode);\n            }\n\n            return null;\n        },\n        toggleCheckbox() {\n            let _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n            const _check = !this.checked;\n\n            this.propagateDown(this.node, _check, _selectionKeys);\n\n            this.$emit('checkbox-change', {\n                node: this.node,\n                check: _check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        propagateDown(node, check, selectionKeys) {\n            if (check) selectionKeys[this.nodeKey(node)] = { checked: true, partialChecked: false };\n            else delete selectionKeys[this.nodeKey(node)];\n\n            if (node.children && node.children.length) {\n                for (let child of node.children) {\n                    this.propagateDown(child, check, selectionKeys);\n                }\n            }\n        },\n        propagateUp(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        onCheckboxChange(event) {\n            let check = event.check;\n            let _selectionKeys = { ...event.selectionKeys };\n            let checkedChildCount = 0;\n            let childPartialSelected = false;\n\n            for (let child of this.node.children) {\n                if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].checked) checkedChildCount++;\n                else if (_selectionKeys[this.nodeKey(child)] && _selectionKeys[this.nodeKey(child)].partialChecked) childPartialSelected = true;\n            }\n\n            if (check && checkedChildCount === this.node.children.length) {\n                _selectionKeys[this.nodeKey(this.node)] = { checked: true, partialChecked: false };\n            } else {\n                if (!check) {\n                    delete _selectionKeys[this.nodeKey(this.node)];\n                }\n\n                if (childPartialSelected || (checkedChildCount > 0 && checkedChildCount !== this.node.children.length)) _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: true };\n                else _selectionKeys[this.nodeKey(this.node)] = { checked: false, partialChecked: false };\n            }\n\n            this.$emit('checkbox-change', {\n                node: event.node,\n                check: event.check,\n                selectionKeys: _selectionKeys\n            });\n        },\n        setTabIndexForSelectionMode(event, nodeTouched) {\n            if (this.selectionMode !== null) {\n                const elements = [...DomHandler.find(this.$refs.node.parentElement, 'tr')];\n\n                event.currentTarget.tabIndex = nodeTouched === false ? -1 : 0;\n\n                if (elements.every((element) => element.tabIndex === -1)) {\n                    elements[0].tabIndex = 0;\n                }\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return [this.node.styleClass, this.cx('row')];\n        },\n        expanded() {\n            return this.expandedKeys && this.expandedKeys[this.nodeKey(this.node)] === true;\n        },\n        leaf() {\n            return this.node.leaf === false ? false : !(this.node.children && this.node.children.length);\n        },\n        selected() {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] === true : false;\n        },\n        checked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].checked : false;\n        },\n        partialChecked() {\n            return this.selectionKeys ? this.selectionKeys[this.nodeKey(this.node)] && this.selectionKeys[this.nodeKey(this.node)].partialChecked : false;\n        },\n        getAriaSelected() {\n            return this.selectionMode === 'single' || this.selectionMode === 'multiple' ? this.selected : null;\n        },\n        ptmOptions() {\n            return {\n                context: {\n                    selectable: this.$parentInstance.rowHover || this.$parentInstance.rowSelectionMode,\n                    selected: this.selected,\n                    scrollable: this.$parentInstance.scrollable\n                }\n            };\n        }\n    },\n    components: {\n        TTBodyCell: BodyCell\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" data-scrollselectors=\".p-treetable-scrollable-body\" v-bind=\"ptmi('root')\">\n        <slot></slot>\n        <div v-if=\"loading && loadingMode === 'mask'\" :class=\"cx('loading')\" v-bind=\"ptm('loading')\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <component :is=\"loadingIcon ? 'span' : 'SpinnerIcon'\" spin :class=\"[cx('loadingIcon'), loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </div>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <slot name=\"header\"></slot>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorTop\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'top' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div :class=\"cx('tableContainer')\" :style=\"[sx('tableContainer'), { maxHeight: scrollHeight }]\" v-bind=\"ptm('tableContainer')\">\n            <table ref=\"table\" role=\"table\" :class=\"[cx('table'), tableClass]\" :style=\"tableStyle\" v-bind=\"{ ...tableProps, ...ptm('table') }\">\n                <thead :class=\"cx('thead')\" :style=\"sx('thead')\" role=\"rowgroup\" v-bind=\"ptm('thead')\">\n                    <tr role=\"row\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTHeaderCell\n                                v-if=\"!columnProp(col, 'hidden')\"\n                                :column=\"col\"\n                                :resizableColumns=\"resizableColumns\"\n                                :sortField=\"d_sortField\"\n                                :sortOrder=\"d_sortOrder\"\n                                :multiSortMeta=\"d_multiSortMeta\"\n                                :sortMode=\"sortMode\"\n                                @column-click=\"onColumnHeaderClick($event)\"\n                                @column-resizestart=\"onColumnResizeStart($event)\"\n                                :index=\"i\"\n                                :unstyled=\"unstyled\"\n                                :pt=\"pt\"\n                            ></TTHeaderCell>\n                        </template>\n                    </tr>\n                    <tr v-if=\"hasColumnFilter()\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <th v-if=\"!columnProp(col, 'hidden')\" :class=\"getFilterColumnHeaderClass(col)\" :style=\"[columnProp(col, 'style'), columnProp(col, 'filterHeaderStyle')]\" v-bind=\"ptm('headerCell', ptHeaderCellOptions(col))\">\n                                <component v-if=\"col.children && col.children.filter\" :is=\"col.children.filter\" :column=\"col\" :index=\"i\" />\n                            </th>\n                        </template>\n                    </tr>\n                </thead>\n                <tbody :class=\"cx('tbody')\" role=\"rowgroup\" v-bind=\"ptm('tbody')\">\n                    <template v-if=\"!empty\">\n                        <TTRow\n                            v-for=\"(node, index) of dataToRender\"\n                            :key=\"nodeKey(node)\"\n                            :dataKey=\"dataKey\"\n                            :columns=\"columns\"\n                            :node=\"node\"\n                            :level=\"0\"\n                            :expandedKeys=\"d_expandedKeys\"\n                            :indentation=\"indentation\"\n                            :selectionMode=\"selectionMode\"\n                            :selectionKeys=\"selectionKeys\"\n                            :ariaSetSize=\"dataToRender.length\"\n                            :ariaPosInset=\"index + 1\"\n                            :tabindex=\"setTabindex(node, index)\"\n                            :loadingMode=\"loadingMode\"\n                            :templates=\"$slots\"\n                            @node-toggle=\"onNodeToggle\"\n                            @node-click=\"onNodeClick\"\n                            @checkbox-change=\"onCheckboxChange\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"pt\"\n                        ></TTRow>\n                    </template>\n                    <tr v-else :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                        <td :colspan=\"columns.length\" v-bind=\"ptm('emptyMessageCell')\">\n                            <slot name=\"empty\"></slot>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot v-if=\"hasFooter\" :class=\"cx('tfoot')\" :style=\"sx('tfoot')\" role=\"rowgroup\" v-bind=\"ptm('tfoot')\">\n                    <tr role=\"row\" v-bind=\"ptm('footerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTFooterCell v-if=\"!columnProp(col, 'hidden')\" :column=\"col\" :index=\"i\" :unstyled=\"unstyled\" :pt=\"pt\"></TTFooterCell>\n                        </template>\n                    </tr>\n                </tfoot>\n            </table>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorBottom\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'bottom' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n            <slot name=\"footer\"></slot>\n        </div>\n        <div ref=\"resizeHelper\" :class=\"cx('columnResizeIndicator')\" style=\"display: none\" v-bind=\"ptm('columnResizeIndicator')\"></div>\n    </div>\n</template>\n\n<script>\nimport { FilterService } from '@primevue/core/api';\nimport { DomHandler, HelperSet, ObjectUtils, UniqueComponentId } from '@primevue/core/utils';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport BaseTreeTable from './BaseTreeTable.vue';\nimport FooterCell from './FooterCell.vue';\nimport HeaderCell from './HeaderCell.vue';\nimport TreeTableRow from './TreeTableRow.vue';\n\nexport default {\n    name: 'TreeTable',\n    extends: BaseTreeTable,\n    inheritAttrs: false,\n    emits: [\n        'node-expand',\n        'node-collapse',\n        'update:expandedKeys',\n        'update:selectionKeys',\n        'node-select',\n        'node-unselect',\n        'update:first',\n        'update:rows',\n        'page',\n        'update:sortField',\n        'update:sortOrder',\n        'update:multiSortMeta',\n        'sort',\n        'filter',\n        'column-resize-end'\n    ],\n    provide() {\n        return {\n            $columns: this.d_columns\n        };\n    },\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            d_first: this.first,\n            d_rows: this.rows,\n            d_sortField: this.sortField,\n            d_sortOrder: this.sortOrder,\n            d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],\n            hasASelectedNode: false,\n            d_columns: new HelperSet({ type: 'Column' })\n        };\n    },\n    documentColumnResizeListener: null,\n    documentColumnResizeEndListener: null,\n    lastResizeHelperX: null,\n    resizeColumnElement: null,\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        },\n        first(newValue) {\n            this.d_first = newValue;\n        },\n        rows(newValue) {\n            this.d_rows = newValue;\n        },\n        sortField(newValue) {\n            this.d_sortField = newValue;\n        },\n        sortOrder(newValue) {\n            this.d_sortOrder = newValue;\n        },\n        multiSortMeta(newValue) {\n            this.d_multiSortMeta = newValue;\n        }\n    },\n    mounted() {\n        this.$el.setAttribute(this.attributeSelector, '');\n    },\n    beforeUnmount() {\n        this.destroyStyleElement();\n        this.d_columns.clear();\n    },\n    methods: {\n        columnProp(col, prop) {\n            return ObjectUtils.getVNodeProp(col, prop);\n        },\n        ptHeaderCellOptions(column) {\n            return {\n                context: {\n                    frozen: this.columnProp(column, 'frozen')\n                }\n            };\n        },\n        onNodeToggle(node) {\n            const key = this.nodeKey(node);\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.rowSelectionMode && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        nodeKey(node) {\n            return ObjectUtils.resolveFieldData(node, this.dataKey);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[nodeKey] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[nodeKey] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[nodeKey] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        onPage(event) {\n            this.d_first = event.first;\n            this.d_rows = event.rows;\n\n            let pageEvent = this.createLazyLoadEvent(event);\n\n            pageEvent.pageCount = event.pageCount;\n            pageEvent.page = event.page;\n\n            this.d_expandedKeys = {};\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:rows', this.d_rows);\n            this.$emit('page', pageEvent);\n        },\n        resetPage() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n        },\n        getFilterColumnHeaderClass(column) {\n            return [this.cx('headerCell', { column }), this.columnProp(column, 'filterHeaderClass')];\n        },\n        onColumnHeaderClick(e) {\n            let event = e.originalEvent;\n            let column = e.column;\n\n            if (this.columnProp(column, 'sortable')) {\n                const targetNode = event.target;\n                const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n\n                if (\n                    DomHandler.getAttribute(targetNode, 'data-p-sortable-column') === true ||\n                    DomHandler.getAttribute(targetNode, 'data-pc-section') === 'columntitle' ||\n                    DomHandler.getAttribute(targetNode, 'data-pc-section') === 'columnheadercontent' ||\n                    DomHandler.getAttribute(targetNode, 'data-pc-section') === 'sorticon' ||\n                    DomHandler.getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' ||\n                    DomHandler.getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' ||\n                    targetNode.closest('[data-p-sortable-column=\"true\"]')\n                ) {\n                    DomHandler.clearSelection();\n\n                    if (this.sortMode === 'single') {\n                        if (this.d_sortField === columnField) {\n                            if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                                this.d_sortOrder = null;\n                                this.d_sortField = null;\n                            } else {\n                                this.d_sortOrder = this.d_sortOrder * -1;\n                            }\n                        } else {\n                            this.d_sortOrder = this.defaultSortOrder;\n                            this.d_sortField = columnField;\n                        }\n\n                        this.$emit('update:sortField', this.d_sortField);\n                        this.$emit('update:sortOrder', this.d_sortOrder);\n                        this.resetPage();\n                    } else if (this.sortMode === 'multiple') {\n                        let metaKey = event.metaKey || event.ctrlKey;\n\n                        if (!metaKey) {\n                            this.d_multiSortMeta = this.d_multiSortMeta.filter((meta) => meta.field === columnField);\n                        }\n\n                        this.addMultiSortField(columnField);\n                        this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n                    }\n\n                    this.$emit('sort', this.createLazyLoadEvent(event));\n                }\n            }\n        },\n        addMultiSortField(field) {\n            let index = this.d_multiSortMeta.findIndex((meta) => meta.field === field);\n\n            if (index >= 0) {\n                if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);\n                else this.d_multiSortMeta[index] = { field: field, order: this.d_multiSortMeta[index].order * -1 };\n            } else {\n                this.d_multiSortMeta.push({ field: field, order: this.defaultSortOrder });\n            }\n\n            this.d_multiSortMeta = [...this.d_multiSortMeta];\n        },\n        sortSingle(nodes) {\n            return this.sortNodesSingle(nodes);\n        },\n        sortNodesSingle(nodes) {\n            let _nodes = [...nodes];\n            const comparer = ObjectUtils.localeComparator();\n\n            _nodes.sort((node1, node2) => {\n                const value1 = ObjectUtils.resolveFieldData(node1.data, this.d_sortField);\n                const value2 = ObjectUtils.resolveFieldData(node2.data, this.d_sortField);\n\n                return ObjectUtils.sort(value1, value2, this.d_sortOrder, comparer);\n            });\n\n            return _nodes;\n        },\n        sortMultiple(nodes) {\n            return this.sortNodesMultiple(nodes);\n        },\n        sortNodesMultiple(nodes) {\n            let _nodes = [...nodes];\n\n            _nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, 0);\n            });\n\n            return _nodes;\n        },\n        multisortField(node1, node2, index) {\n            const value1 = ObjectUtils.resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n            const value2 = ObjectUtils.resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n            const comparer = ObjectUtils.localeComparator();\n\n            if (value1 === value2) {\n                return this.d_multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, index + 1) : 0;\n            }\n\n            return ObjectUtils.sort(value1, value2, this.d_multiSortMeta[index].order, comparer);\n        },\n        filter(value) {\n            let filteredNodes = [];\n            const strict = this.filterMode === 'strict';\n\n            for (let node of value) {\n                let copyNode = { ...node };\n                let localMatch = true;\n                let globalMatch = false;\n\n                for (let j = 0; j < this.columns.length; j++) {\n                    let col = this.columns[j];\n                    let filterField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');\n\n                    //local\n                    if (Object.prototype.hasOwnProperty.call(this.filters, filterField)) {\n                        let filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n                        let filterValue = this.filters[filterField];\n                        let filterConstraint = FilterService.filters[filterMatchMode];\n                        let paramsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                            (!strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))\n                        ) {\n                            localMatch = false;\n                        }\n\n                        if (!localMatch) {\n                            break;\n                        }\n                    }\n\n                    //global\n                    if (this.hasGlobalFilter() && !globalMatch) {\n                        let copyNodeForGlobal = { ...copyNode };\n                        let filterValue = this.filters['global'];\n                        let filterConstraint = FilterService.filters['contains'];\n                        let globalFilterParamsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode))) ||\n                            (!strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode)))\n                        ) {\n                            globalMatch = true;\n                            copyNode = copyNodeForGlobal;\n                        }\n                    }\n                }\n\n                let matches = localMatch;\n\n                if (this.hasGlobalFilter()) {\n                    matches = localMatch && globalMatch;\n                }\n\n                if (matches) {\n                    filteredNodes.push(copyNode);\n                }\n            }\n\n            let filterEvent = this.createLazyLoadEvent(event);\n\n            filterEvent.filteredValue = filteredNodes;\n            this.$emit('filter', filterEvent);\n\n            return filteredNodes;\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { filterField, filterValue, filterConstraint, strict }) {\n            let matched = false;\n            let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n\n            if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                matched = true;\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, strict }) || matched;\n            }\n\n            return matched;\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)] === true : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        createLazyLoadEvent(event) {\n            let filterMatchModes;\n\n            if (this.hasFilters()) {\n                filterMatchModes = {};\n                this.columns.forEach((col) => {\n                    if (this.columnProp(col, 'field')) {\n                        filterMatchModes[col.props.field] = this.columnProp(col, 'filterMatchMode');\n                    }\n                });\n            }\n\n            return {\n                originalEvent: event,\n                first: this.d_first,\n                rows: this.d_rows,\n                sortField: this.d_sortField,\n                sortOrder: this.d_sortOrder,\n                multiSortMeta: this.d_multiSortMeta,\n                filters: this.filters,\n                filterMatchModes: filterMatchModes\n            };\n        },\n        onColumnResizeStart(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n\n            this.resizeColumnElement = event.target.parentElement;\n            this.columnResizing = true;\n            this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n\n            this.bindColumnResizeEvents();\n        },\n        onColumnResize(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n\n            this.$el.setAttribute('data-p-unselectable-text', 'true');\n            !this.isUnstyled && DomHandler.addStyles(this.$el, { 'user-select': 'none' });\n            this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n            this.$refs.resizeHelper.style.top = 0 + 'px';\n            this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n\n            this.$refs.resizeHelper.style.display = 'block';\n        },\n        onColumnResizeEnd() {\n            let delta = this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n            let columnWidth = this.resizeColumnElement.offsetWidth;\n            let newColumnWidth = columnWidth + delta;\n            let minWidth = this.resizeColumnElement.style.minWidth || 15;\n\n            if (columnWidth + delta > parseInt(minWidth, 10)) {\n                if (this.columnResizeMode === 'fit') {\n                    let nextColumn = this.resizeColumnElement.nextElementSibling;\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > 15) {\n                        this.resizeTableCells(newColumnWidth, nextColumnWidth);\n                    }\n                } else if (this.columnResizeMode === 'expand') {\n                    const tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n\n                    const updateTableWidth = (el) => {\n                        !!el && (el.style.width = el.style.minWidth = tableWidth);\n                    };\n\n                    // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n                    this.resizeTableCells(newColumnWidth);\n                    updateTableWidth(this.$refs.table);\n                }\n\n                this.$emit('column-resize-end', {\n                    element: this.resizeColumnElement,\n                    delta: delta\n                });\n            }\n\n            this.$refs.resizeHelper.style.display = 'none';\n            this.resizeColumn = null;\n            this.$el.removeAttribute('data-p-unselectable-text');\n            !this.isUnstyled && (this.$el.style['user-select'] = '');\n\n            this.unbindColumnResizeEvents();\n        },\n        resizeTableCells(newColumnWidth, nextColumnWidth) {\n            let colIndex = DomHandler.index(this.resizeColumnElement);\n            let widths = [];\n            let headers = DomHandler.find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n\n            headers.forEach((header) => widths.push(DomHandler.getOuterWidth(header)));\n\n            this.destroyStyleElement();\n            this.createStyleElement();\n\n            let innerHTML = '';\n            let selector = `[data-pc-name=\"treetable\"][${this.attributeSelector}] > [data-pc-section=\"tablecontainer\"] > table[data-pc-section=\"table\"]`;\n\n            widths.forEach((width, index) => {\n                let colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n                let style = `width: ${colWidth}px !important; max-width: ${colWidth}px !important`;\n\n                innerHTML += `\n                    ${selector} > thead[data-pc-section=\"thead\"] > tr > th:nth-child(${index + 1}),\n                    ${selector} > tbody[data-pc-section=\"tbody\"] > tr > td:nth-child(${index + 1}),\n                    ${selector} > tfoot[data-pc-section=\"tfoot\"] > tr > td:nth-child(${index + 1}) {\n                        ${style}\n                    }\n                `;\n            });\n\n            this.styleElement.innerHTML = innerHTML;\n        },\n        bindColumnResizeEvents() {\n            if (!this.documentColumnResizeListener) {\n                this.documentColumnResizeListener = document.addEventListener('mousemove', (event) => {\n                    if (this.columnResizing) {\n                        this.onColumnResize(event);\n                    }\n                });\n            }\n\n            if (!this.documentColumnResizeEndListener) {\n                this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {\n                    if (this.columnResizing) {\n                        this.columnResizing = false;\n                        this.onColumnResizeEnd();\n                    }\n                });\n            }\n        },\n        unbindColumnResizeEvents() {\n            if (this.documentColumnResizeListener) {\n                document.removeEventListener('document', this.documentColumnResizeListener);\n                this.documentColumnResizeListener = null;\n            }\n\n            if (this.documentColumnResizeEndListener) {\n                document.removeEventListener('document', this.documentColumnResizeEndListener);\n                this.documentColumnResizeEndListener = null;\n            }\n        },\n        onColumnKeyDown(event, col) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter') && event.currentTarget.nodeName === 'TH' && DomHandler.getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.onColumnHeaderClick(event, col);\n            }\n        },\n        hasColumnFilter() {\n            if (this.columns) {\n                for (let col of this.columns) {\n                    if (col.children && col.children.filter) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n        hasFilters() {\n            return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n        },\n        hasGlobalFilter() {\n            return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n        },\n        getItemLabel(node) {\n            return node.data.name;\n        },\n        createStyleElement() {\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            DomHandler.setAttribute(this.styleElement, 'nonce', this.$primevue?.config?.csp?.nonce);\n            document.head.appendChild(this.styleElement);\n        },\n        destroyStyleElement() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        setTabindex(node, index) {\n            if (this.isNodeSelected(node)) {\n                this.hasASelectedNode = true;\n\n                return 0;\n            }\n\n            if (this.selectionMode) {\n                if (!this.isNodeSelected(node) && index === 0 && !this.hasASelectedNode) return 0;\n            } else if (!this.selectionMode && index === 0) {\n                return 0;\n            }\n\n            return -1;\n        }\n    },\n    computed: {\n        columns() {\n            return this.d_columns.get(this);\n        },\n        processedData() {\n            if (this.lazy) {\n                return this.value;\n            } else {\n                if (this.value && this.value.length) {\n                    let data = this.value;\n\n                    if (this.sorted) {\n                        if (this.sortMode === 'single') data = this.sortSingle(data);\n                        else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n                    }\n\n                    if (this.hasFilters()) {\n                        data = this.filter(data);\n                    }\n\n                    return data;\n                } else {\n                    return null;\n                }\n            }\n        },\n        dataToRender() {\n            const data = this.processedData;\n\n            if (this.paginator) {\n                const first = this.lazy ? 0 : this.d_first;\n\n                return data.slice(first, first + this.d_rows);\n            } else {\n                return data;\n            }\n        },\n        empty() {\n            const data = this.processedData;\n\n            return !data || data.length === 0;\n        },\n        sorted() {\n            return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);\n        },\n        hasFooter() {\n            let hasFooter = false;\n\n            for (let col of this.columns) {\n                if (this.columnProp(col, 'footer') || (col.children && col.children.footer)) {\n                    hasFooter = true;\n                    break;\n                }\n            }\n\n            return hasFooter;\n        },\n        paginatorTop() {\n            return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n        },\n        paginatorBottom() {\n            return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n        },\n        singleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'single';\n        },\n        multipleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'multiple';\n        },\n        rowSelectionMode() {\n            return this.singleSelectionMode || this.multipleSelectionMode;\n        },\n        totalRecordsLength() {\n            if (this.lazy) {\n                return this.totalRecords;\n            } else {\n                const data = this.processedData;\n\n                return data ? data.length : 0;\n            }\n        },\n        attributeSelector() {\n            return UniqueComponentId();\n        }\n    },\n    components: {\n        TTRow: TreeTableRow,\n        TTPaginator: Paginator,\n        TTHeaderCell: HeaderCell,\n        TTFooterCell: FooterCell,\n        SpinnerIcon: SpinnerIcon\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" data-scrollselectors=\".p-treetable-scrollable-body\" v-bind=\"ptmi('root')\">\n        <slot></slot>\n        <div v-if=\"loading && loadingMode === 'mask'\" :class=\"cx('loading')\" v-bind=\"ptm('loading')\">\n            <div :class=\"cx('mask')\" v-bind=\"ptm('mask')\">\n                <slot name=\"loadingicon\" :class=\"cx('loadingIcon')\">\n                    <component :is=\"loadingIcon ? 'span' : 'SpinnerIcon'\" spin :class=\"[cx('loadingIcon'), loadingIcon]\" v-bind=\"ptm('loadingIcon')\" />\n                </slot>\n            </div>\n        </div>\n        <div v-if=\"$slots.header\" :class=\"cx('header')\" v-bind=\"ptm('header')\">\n            <slot name=\"header\"></slot>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorTop\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'top' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div :class=\"cx('tableContainer')\" :style=\"[sx('tableContainer'), { maxHeight: scrollHeight }]\" v-bind=\"ptm('tableContainer')\">\n            <table ref=\"table\" role=\"table\" :class=\"[cx('table'), tableClass]\" :style=\"tableStyle\" v-bind=\"{ ...tableProps, ...ptm('table') }\">\n                <thead :class=\"cx('thead')\" :style=\"sx('thead')\" role=\"rowgroup\" v-bind=\"ptm('thead')\">\n                    <tr role=\"row\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTHeaderCell\n                                v-if=\"!columnProp(col, 'hidden')\"\n                                :column=\"col\"\n                                :resizableColumns=\"resizableColumns\"\n                                :sortField=\"d_sortField\"\n                                :sortOrder=\"d_sortOrder\"\n                                :multiSortMeta=\"d_multiSortMeta\"\n                                :sortMode=\"sortMode\"\n                                @column-click=\"onColumnHeaderClick($event)\"\n                                @column-resizestart=\"onColumnResizeStart($event)\"\n                                :index=\"i\"\n                                :unstyled=\"unstyled\"\n                                :pt=\"pt\"\n                            ></TTHeaderCell>\n                        </template>\n                    </tr>\n                    <tr v-if=\"hasColumnFilter()\" v-bind=\"ptm('headerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <th v-if=\"!columnProp(col, 'hidden')\" :class=\"getFilterColumnHeaderClass(col)\" :style=\"[columnProp(col, 'style'), columnProp(col, 'filterHeaderStyle')]\" v-bind=\"ptm('headerCell', ptHeaderCellOptions(col))\">\n                                <component v-if=\"col.children && col.children.filter\" :is=\"col.children.filter\" :column=\"col\" :index=\"i\" />\n                            </th>\n                        </template>\n                    </tr>\n                </thead>\n                <tbody :class=\"cx('tbody')\" role=\"rowgroup\" v-bind=\"ptm('tbody')\">\n                    <template v-if=\"!empty\">\n                        <TTRow\n                            v-for=\"(node, index) of dataToRender\"\n                            :key=\"nodeKey(node)\"\n                            :dataKey=\"dataKey\"\n                            :columns=\"columns\"\n                            :node=\"node\"\n                            :level=\"0\"\n                            :expandedKeys=\"d_expandedKeys\"\n                            :indentation=\"indentation\"\n                            :selectionMode=\"selectionMode\"\n                            :selectionKeys=\"selectionKeys\"\n                            :ariaSetSize=\"dataToRender.length\"\n                            :ariaPosInset=\"index + 1\"\n                            :tabindex=\"setTabindex(node, index)\"\n                            :loadingMode=\"loadingMode\"\n                            :templates=\"$slots\"\n                            @node-toggle=\"onNodeToggle\"\n                            @node-click=\"onNodeClick\"\n                            @checkbox-change=\"onCheckboxChange\"\n                            :unstyled=\"unstyled\"\n                            :pt=\"pt\"\n                        ></TTRow>\n                    </template>\n                    <tr v-else :class=\"cx('emptyMessage')\" v-bind=\"ptm('emptyMessage')\">\n                        <td :colspan=\"columns.length\" v-bind=\"ptm('emptyMessageCell')\">\n                            <slot name=\"empty\"></slot>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot v-if=\"hasFooter\" :class=\"cx('tfoot')\" :style=\"sx('tfoot')\" role=\"rowgroup\" v-bind=\"ptm('tfoot')\">\n                    <tr role=\"row\" v-bind=\"ptm('footerRow')\">\n                        <template v-for=\"(col, i) of columns\" :key=\"columnProp(col, 'columnKey') || columnProp(col, 'field') || i\">\n                            <TTFooterCell v-if=\"!columnProp(col, 'hidden')\" :column=\"col\" :index=\"i\" :unstyled=\"unstyled\" :pt=\"pt\"></TTFooterCell>\n                        </template>\n                    </tr>\n                </tfoot>\n            </table>\n        </div>\n        <TTPaginator\n            v-if=\"paginatorBottom\"\n            :rows=\"d_rows\"\n            :first=\"d_first\"\n            :totalRecords=\"totalRecordsLength\"\n            :pageLinkSize=\"pageLinkSize\"\n            :template=\"paginatorTemplate\"\n            :rowsPerPageOptions=\"rowsPerPageOptions\"\n            :currentPageReportTemplate=\"currentPageReportTemplate\"\n            :class=\"cx('pcPaginator', { position: 'bottom' })\"\n            @page=\"onPage($event)\"\n            :alwaysShow=\"alwaysShowPaginator\"\n            :unstyled=\"unstyled\"\n            :pt=\"ptm('pcPaginator')\"\n        >\n            <template v-if=\"$slots.paginatorstart\" #start>\n                <slot name=\"paginatorstart\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorend\" #end>\n                <slot name=\"paginatorend\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorfirstpagelinkicon\" #firstpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorfirstpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorprevpagelinkicon\" #prevpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorprevpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatornextpagelinkicon\" #nextpagelinkicon=\"slotProps\">\n                <slot name=\"paginatornextpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorlastpagelinkicon\" #lastpagelinkicon=\"slotProps\">\n                <slot name=\"paginatorlastpagelinkicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorjumptopagedropdownicon\" #jumptopagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorjumptopagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n            <template v-if=\"$slots.paginatorrowsperpagedropdownicon\" #rowsperpagedropdownicon=\"slotProps\">\n                <slot name=\"paginatorrowsperpagedropdownicon\" :class=\"slotProps.class\"></slot>\n            </template>\n        </TTPaginator>\n        <div v-if=\"$slots.footer\" :class=\"cx('footer')\" v-bind=\"ptm('footer')\">\n            <slot name=\"footer\"></slot>\n        </div>\n        <div ref=\"resizeHelper\" :class=\"cx('columnResizeIndicator')\" style=\"display: none\" v-bind=\"ptm('columnResizeIndicator')\"></div>\n    </div>\n</template>\n\n<script>\nimport { FilterService } from '@primevue/core/api';\nimport { DomHandler, HelperSet, ObjectUtils, UniqueComponentId } from '@primevue/core/utils';\nimport SpinnerIcon from '@primevue/icons/spinner';\nimport Paginator from 'primevue/paginator';\nimport BaseTreeTable from './BaseTreeTable.vue';\nimport FooterCell from './FooterCell.vue';\nimport HeaderCell from './HeaderCell.vue';\nimport TreeTableRow from './TreeTableRow.vue';\n\nexport default {\n    name: 'TreeTable',\n    extends: BaseTreeTable,\n    inheritAttrs: false,\n    emits: [\n        'node-expand',\n        'node-collapse',\n        'update:expandedKeys',\n        'update:selectionKeys',\n        'node-select',\n        'node-unselect',\n        'update:first',\n        'update:rows',\n        'page',\n        'update:sortField',\n        'update:sortOrder',\n        'update:multiSortMeta',\n        'sort',\n        'filter',\n        'column-resize-end'\n    ],\n    provide() {\n        return {\n            $columns: this.d_columns\n        };\n    },\n    data() {\n        return {\n            d_expandedKeys: this.expandedKeys || {},\n            d_first: this.first,\n            d_rows: this.rows,\n            d_sortField: this.sortField,\n            d_sortOrder: this.sortOrder,\n            d_multiSortMeta: this.multiSortMeta ? [...this.multiSortMeta] : [],\n            hasASelectedNode: false,\n            d_columns: new HelperSet({ type: 'Column' })\n        };\n    },\n    documentColumnResizeListener: null,\n    documentColumnResizeEndListener: null,\n    lastResizeHelperX: null,\n    resizeColumnElement: null,\n    watch: {\n        expandedKeys(newValue) {\n            this.d_expandedKeys = newValue;\n        },\n        first(newValue) {\n            this.d_first = newValue;\n        },\n        rows(newValue) {\n            this.d_rows = newValue;\n        },\n        sortField(newValue) {\n            this.d_sortField = newValue;\n        },\n        sortOrder(newValue) {\n            this.d_sortOrder = newValue;\n        },\n        multiSortMeta(newValue) {\n            this.d_multiSortMeta = newValue;\n        }\n    },\n    mounted() {\n        this.$el.setAttribute(this.attributeSelector, '');\n    },\n    beforeUnmount() {\n        this.destroyStyleElement();\n        this.d_columns.clear();\n    },\n    methods: {\n        columnProp(col, prop) {\n            return ObjectUtils.getVNodeProp(col, prop);\n        },\n        ptHeaderCellOptions(column) {\n            return {\n                context: {\n                    frozen: this.columnProp(column, 'frozen')\n                }\n            };\n        },\n        onNodeToggle(node) {\n            const key = this.nodeKey(node);\n\n            if (this.d_expandedKeys[key]) {\n                delete this.d_expandedKeys[key];\n                this.$emit('node-collapse', node);\n            } else {\n                this.d_expandedKeys[key] = true;\n                this.$emit('node-expand', node);\n            }\n\n            this.d_expandedKeys = { ...this.d_expandedKeys };\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n        },\n        onNodeClick(event) {\n            if (this.rowSelectionMode && event.node.selectable !== false) {\n                const metaSelection = event.nodeTouched ? false : this.metaKeySelection;\n                const _selectionKeys = metaSelection ? this.handleSelectionWithMetaKey(event) : this.handleSelectionWithoutMetaKey(event);\n\n                this.$emit('update:selectionKeys', _selectionKeys);\n            }\n        },\n        nodeKey(node) {\n            return ObjectUtils.resolveFieldData(node, this.dataKey);\n        },\n        handleSelectionWithMetaKey(event) {\n            const originalEvent = event.originalEvent;\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (selected && metaKey) {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n                }\n\n                this.$emit('node-unselect', node);\n            } else {\n                if (this.isSingleSelectionMode()) {\n                    _selectionKeys = {};\n                } else if (this.isMultipleSelectionMode()) {\n                    _selectionKeys = !metaKey ? {} : this.selectionKeys ? { ...this.selectionKeys } : {};\n                }\n\n                _selectionKeys[nodeKey] = true;\n                this.$emit('node-select', node);\n            }\n\n            return _selectionKeys;\n        },\n        handleSelectionWithoutMetaKey(event) {\n            const node = event.node;\n            const nodeKey = this.nodeKey(node);\n            const selected = this.isNodeSelected(node);\n            let _selectionKeys;\n\n            if (this.isSingleSelectionMode()) {\n                if (selected) {\n                    _selectionKeys = {};\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = {};\n                    _selectionKeys[nodeKey] = true;\n                    this.$emit('node-select', node);\n                }\n            } else {\n                if (selected) {\n                    _selectionKeys = { ...this.selectionKeys };\n                    delete _selectionKeys[nodeKey];\n\n                    this.$emit('node-unselect', node);\n                } else {\n                    _selectionKeys = this.selectionKeys ? { ...this.selectionKeys } : {};\n                    _selectionKeys[nodeKey] = true;\n\n                    this.$emit('node-select', node);\n                }\n            }\n\n            return _selectionKeys;\n        },\n        onCheckboxChange(event) {\n            this.$emit('update:selectionKeys', event.selectionKeys);\n\n            if (event.check) this.$emit('node-select', event.node);\n            else this.$emit('node-unselect', event.node);\n        },\n        isSingleSelectionMode() {\n            return this.selectionMode === 'single';\n        },\n        isMultipleSelectionMode() {\n            return this.selectionMode === 'multiple';\n        },\n        onPage(event) {\n            this.d_first = event.first;\n            this.d_rows = event.rows;\n\n            let pageEvent = this.createLazyLoadEvent(event);\n\n            pageEvent.pageCount = event.pageCount;\n            pageEvent.page = event.page;\n\n            this.d_expandedKeys = {};\n            this.$emit('update:expandedKeys', this.d_expandedKeys);\n            this.$emit('update:first', this.d_first);\n            this.$emit('update:rows', this.d_rows);\n            this.$emit('page', pageEvent);\n        },\n        resetPage() {\n            this.d_first = 0;\n            this.$emit('update:first', this.d_first);\n        },\n        getFilterColumnHeaderClass(column) {\n            return [this.cx('headerCell', { column }), this.columnProp(column, 'filterHeaderClass')];\n        },\n        onColumnHeaderClick(e) {\n            let event = e.originalEvent;\n            let column = e.column;\n\n            if (this.columnProp(column, 'sortable')) {\n                const targetNode = event.target;\n                const columnField = this.columnProp(column, 'sortField') || this.columnProp(column, 'field');\n\n                if (\n                    DomHandler.getAttribute(targetNode, 'data-p-sortable-column') === true ||\n                    DomHandler.getAttribute(targetNode, 'data-pc-section') === 'columntitle' ||\n                    DomHandler.getAttribute(targetNode, 'data-pc-section') === 'columnheadercontent' ||\n                    DomHandler.getAttribute(targetNode, 'data-pc-section') === 'sorticon' ||\n                    DomHandler.getAttribute(targetNode.parentElement, 'data-pc-section') === 'sorticon' ||\n                    DomHandler.getAttribute(targetNode.parentElement.parentElement, 'data-pc-section') === 'sorticon' ||\n                    targetNode.closest('[data-p-sortable-column=\"true\"]')\n                ) {\n                    DomHandler.clearSelection();\n\n                    if (this.sortMode === 'single') {\n                        if (this.d_sortField === columnField) {\n                            if (this.removableSort && this.d_sortOrder * -1 === this.defaultSortOrder) {\n                                this.d_sortOrder = null;\n                                this.d_sortField = null;\n                            } else {\n                                this.d_sortOrder = this.d_sortOrder * -1;\n                            }\n                        } else {\n                            this.d_sortOrder = this.defaultSortOrder;\n                            this.d_sortField = columnField;\n                        }\n\n                        this.$emit('update:sortField', this.d_sortField);\n                        this.$emit('update:sortOrder', this.d_sortOrder);\n                        this.resetPage();\n                    } else if (this.sortMode === 'multiple') {\n                        let metaKey = event.metaKey || event.ctrlKey;\n\n                        if (!metaKey) {\n                            this.d_multiSortMeta = this.d_multiSortMeta.filter((meta) => meta.field === columnField);\n                        }\n\n                        this.addMultiSortField(columnField);\n                        this.$emit('update:multiSortMeta', this.d_multiSortMeta);\n                    }\n\n                    this.$emit('sort', this.createLazyLoadEvent(event));\n                }\n            }\n        },\n        addMultiSortField(field) {\n            let index = this.d_multiSortMeta.findIndex((meta) => meta.field === field);\n\n            if (index >= 0) {\n                if (this.removableSort && this.d_multiSortMeta[index].order * -1 === this.defaultSortOrder) this.d_multiSortMeta.splice(index, 1);\n                else this.d_multiSortMeta[index] = { field: field, order: this.d_multiSortMeta[index].order * -1 };\n            } else {\n                this.d_multiSortMeta.push({ field: field, order: this.defaultSortOrder });\n            }\n\n            this.d_multiSortMeta = [...this.d_multiSortMeta];\n        },\n        sortSingle(nodes) {\n            return this.sortNodesSingle(nodes);\n        },\n        sortNodesSingle(nodes) {\n            let _nodes = [...nodes];\n            const comparer = ObjectUtils.localeComparator();\n\n            _nodes.sort((node1, node2) => {\n                const value1 = ObjectUtils.resolveFieldData(node1.data, this.d_sortField);\n                const value2 = ObjectUtils.resolveFieldData(node2.data, this.d_sortField);\n\n                return ObjectUtils.sort(value1, value2, this.d_sortOrder, comparer);\n            });\n\n            return _nodes;\n        },\n        sortMultiple(nodes) {\n            return this.sortNodesMultiple(nodes);\n        },\n        sortNodesMultiple(nodes) {\n            let _nodes = [...nodes];\n\n            _nodes.sort((node1, node2) => {\n                return this.multisortField(node1, node2, 0);\n            });\n\n            return _nodes;\n        },\n        multisortField(node1, node2, index) {\n            const value1 = ObjectUtils.resolveFieldData(node1.data, this.d_multiSortMeta[index].field);\n            const value2 = ObjectUtils.resolveFieldData(node2.data, this.d_multiSortMeta[index].field);\n            const comparer = ObjectUtils.localeComparator();\n\n            if (value1 === value2) {\n                return this.d_multiSortMeta.length - 1 > index ? this.multisortField(node1, node2, index + 1) : 0;\n            }\n\n            return ObjectUtils.sort(value1, value2, this.d_multiSortMeta[index].order, comparer);\n        },\n        filter(value) {\n            let filteredNodes = [];\n            const strict = this.filterMode === 'strict';\n\n            for (let node of value) {\n                let copyNode = { ...node };\n                let localMatch = true;\n                let globalMatch = false;\n\n                for (let j = 0; j < this.columns.length; j++) {\n                    let col = this.columns[j];\n                    let filterField = this.columnProp(col, 'filterField') || this.columnProp(col, 'field');\n\n                    //local\n                    if (Object.prototype.hasOwnProperty.call(this.filters, filterField)) {\n                        let filterMatchMode = this.columnProp(col, 'filterMatchMode') || 'startsWith';\n                        let filterValue = this.filters[filterField];\n                        let filterConstraint = FilterService.filters[filterMatchMode];\n                        let paramsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && !(this.findFilteredNodes(copyNode, paramsWithoutNode) || this.isFilterMatched(copyNode, paramsWithoutNode))) ||\n                            (!strict && !(this.isFilterMatched(copyNode, paramsWithoutNode) || this.findFilteredNodes(copyNode, paramsWithoutNode)))\n                        ) {\n                            localMatch = false;\n                        }\n\n                        if (!localMatch) {\n                            break;\n                        }\n                    }\n\n                    //global\n                    if (this.hasGlobalFilter() && !globalMatch) {\n                        let copyNodeForGlobal = { ...copyNode };\n                        let filterValue = this.filters['global'];\n                        let filterConstraint = FilterService.filters['contains'];\n                        let globalFilterParamsWithoutNode = { filterField, filterValue, filterConstraint, strict };\n\n                        if (\n                            (strict && (this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode))) ||\n                            (!strict && (this.isFilterMatched(copyNodeForGlobal, globalFilterParamsWithoutNode) || this.findFilteredNodes(copyNodeForGlobal, globalFilterParamsWithoutNode)))\n                        ) {\n                            globalMatch = true;\n                            copyNode = copyNodeForGlobal;\n                        }\n                    }\n                }\n\n                let matches = localMatch;\n\n                if (this.hasGlobalFilter()) {\n                    matches = localMatch && globalMatch;\n                }\n\n                if (matches) {\n                    filteredNodes.push(copyNode);\n                }\n            }\n\n            let filterEvent = this.createLazyLoadEvent(event);\n\n            filterEvent.filteredValue = filteredNodes;\n            this.$emit('filter', filterEvent);\n\n            return filteredNodes;\n        },\n        findFilteredNodes(node, paramsWithoutNode) {\n            if (node) {\n                let matched = false;\n\n                if (node.children) {\n                    let childNodes = [...node.children];\n\n                    node.children = [];\n\n                    for (let childNode of childNodes) {\n                        let copyChildNode = { ...childNode };\n\n                        if (this.isFilterMatched(copyChildNode, paramsWithoutNode)) {\n                            matched = true;\n                            node.children.push(copyChildNode);\n                        }\n                    }\n                }\n\n                if (matched) {\n                    return true;\n                }\n            }\n        },\n        isFilterMatched(node, { filterField, filterValue, filterConstraint, strict }) {\n            let matched = false;\n            let dataFieldValue = ObjectUtils.resolveFieldData(node.data, filterField);\n\n            if (filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\n                matched = true;\n            }\n\n            if (!matched || (strict && !this.isNodeLeaf(node))) {\n                matched = this.findFilteredNodes(node, { filterField, filterValue, filterConstraint, strict }) || matched;\n            }\n\n            return matched;\n        },\n        isNodeSelected(node) {\n            return this.selectionMode && this.selectionKeys ? this.selectionKeys[this.nodeKey(node)] === true : false;\n        },\n        isNodeLeaf(node) {\n            return node.leaf === false ? false : !(node.children && node.children.length);\n        },\n        createLazyLoadEvent(event) {\n            let filterMatchModes;\n\n            if (this.hasFilters()) {\n                filterMatchModes = {};\n                this.columns.forEach((col) => {\n                    if (this.columnProp(col, 'field')) {\n                        filterMatchModes[col.props.field] = this.columnProp(col, 'filterMatchMode');\n                    }\n                });\n            }\n\n            return {\n                originalEvent: event,\n                first: this.d_first,\n                rows: this.d_rows,\n                sortField: this.d_sortField,\n                sortOrder: this.d_sortOrder,\n                multiSortMeta: this.d_multiSortMeta,\n                filters: this.filters,\n                filterMatchModes: filterMatchModes\n            };\n        },\n        onColumnResizeStart(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n\n            this.resizeColumnElement = event.target.parentElement;\n            this.columnResizing = true;\n            this.lastResizeHelperX = event.pageX - containerLeft + this.$el.scrollLeft;\n\n            this.bindColumnResizeEvents();\n        },\n        onColumnResize(event) {\n            let containerLeft = DomHandler.getOffset(this.$el).left;\n\n            this.$el.setAttribute('data-p-unselectable-text', 'true');\n            !this.isUnstyled && DomHandler.addStyles(this.$el, { 'user-select': 'none' });\n            this.$refs.resizeHelper.style.height = this.$el.offsetHeight + 'px';\n            this.$refs.resizeHelper.style.top = 0 + 'px';\n            this.$refs.resizeHelper.style.left = event.pageX - containerLeft + this.$el.scrollLeft + 'px';\n\n            this.$refs.resizeHelper.style.display = 'block';\n        },\n        onColumnResizeEnd() {\n            let delta = this.$refs.resizeHelper.offsetLeft - this.lastResizeHelperX;\n            let columnWidth = this.resizeColumnElement.offsetWidth;\n            let newColumnWidth = columnWidth + delta;\n            let minWidth = this.resizeColumnElement.style.minWidth || 15;\n\n            if (columnWidth + delta > parseInt(minWidth, 10)) {\n                if (this.columnResizeMode === 'fit') {\n                    let nextColumn = this.resizeColumnElement.nextElementSibling;\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > 15) {\n                        this.resizeTableCells(newColumnWidth, nextColumnWidth);\n                    }\n                } else if (this.columnResizeMode === 'expand') {\n                    const tableWidth = this.$refs.table.offsetWidth + delta + 'px';\n\n                    const updateTableWidth = (el) => {\n                        !!el && (el.style.width = el.style.minWidth = tableWidth);\n                    };\n\n                    // Reasoning: resize table cells before updating the table width so that it can use existing computed cell widths and adjust only the one column.\n                    this.resizeTableCells(newColumnWidth);\n                    updateTableWidth(this.$refs.table);\n                }\n\n                this.$emit('column-resize-end', {\n                    element: this.resizeColumnElement,\n                    delta: delta\n                });\n            }\n\n            this.$refs.resizeHelper.style.display = 'none';\n            this.resizeColumn = null;\n            this.$el.removeAttribute('data-p-unselectable-text');\n            !this.isUnstyled && (this.$el.style['user-select'] = '');\n\n            this.unbindColumnResizeEvents();\n        },\n        resizeTableCells(newColumnWidth, nextColumnWidth) {\n            let colIndex = DomHandler.index(this.resizeColumnElement);\n            let widths = [];\n            let headers = DomHandler.find(this.$refs.table, 'thead[data-pc-section=\"thead\"] > tr > th');\n\n            headers.forEach((header) => widths.push(DomHandler.getOuterWidth(header)));\n\n            this.destroyStyleElement();\n            this.createStyleElement();\n\n            let innerHTML = '';\n            let selector = `[data-pc-name=\"treetable\"][${this.attributeSelector}] > [data-pc-section=\"tablecontainer\"] > table[data-pc-section=\"table\"]`;\n\n            widths.forEach((width, index) => {\n                let colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n                let style = `width: ${colWidth}px !important; max-width: ${colWidth}px !important`;\n\n                innerHTML += `\n                    ${selector} > thead[data-pc-section=\"thead\"] > tr > th:nth-child(${index + 1}),\n                    ${selector} > tbody[data-pc-section=\"tbody\"] > tr > td:nth-child(${index + 1}),\n                    ${selector} > tfoot[data-pc-section=\"tfoot\"] > tr > td:nth-child(${index + 1}) {\n                        ${style}\n                    }\n                `;\n            });\n\n            this.styleElement.innerHTML = innerHTML;\n        },\n        bindColumnResizeEvents() {\n            if (!this.documentColumnResizeListener) {\n                this.documentColumnResizeListener = document.addEventListener('mousemove', (event) => {\n                    if (this.columnResizing) {\n                        this.onColumnResize(event);\n                    }\n                });\n            }\n\n            if (!this.documentColumnResizeEndListener) {\n                this.documentColumnResizeEndListener = document.addEventListener('mouseup', () => {\n                    if (this.columnResizing) {\n                        this.columnResizing = false;\n                        this.onColumnResizeEnd();\n                    }\n                });\n            }\n        },\n        unbindColumnResizeEvents() {\n            if (this.documentColumnResizeListener) {\n                document.removeEventListener('document', this.documentColumnResizeListener);\n                this.documentColumnResizeListener = null;\n            }\n\n            if (this.documentColumnResizeEndListener) {\n                document.removeEventListener('document', this.documentColumnResizeEndListener);\n                this.documentColumnResizeEndListener = null;\n            }\n        },\n        onColumnKeyDown(event, col) {\n            if ((event.code === 'Enter' || event.code === 'NumpadEnter') && event.currentTarget.nodeName === 'TH' && DomHandler.getAttribute(event.currentTarget, 'data-p-sortable-column')) {\n                this.onColumnHeaderClick(event, col);\n            }\n        },\n        hasColumnFilter() {\n            if (this.columns) {\n                for (let col of this.columns) {\n                    if (col.children && col.children.filter) {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        },\n        hasFilters() {\n            return this.filters && Object.keys(this.filters).length > 0 && this.filters.constructor === Object;\n        },\n        hasGlobalFilter() {\n            return this.filters && Object.prototype.hasOwnProperty.call(this.filters, 'global');\n        },\n        getItemLabel(node) {\n            return node.data.name;\n        },\n        createStyleElement() {\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            DomHandler.setAttribute(this.styleElement, 'nonce', this.$primevue?.config?.csp?.nonce);\n            document.head.appendChild(this.styleElement);\n        },\n        destroyStyleElement() {\n            if (this.styleElement) {\n                document.head.removeChild(this.styleElement);\n                this.styleElement = null;\n            }\n        },\n        setTabindex(node, index) {\n            if (this.isNodeSelected(node)) {\n                this.hasASelectedNode = true;\n\n                return 0;\n            }\n\n            if (this.selectionMode) {\n                if (!this.isNodeSelected(node) && index === 0 && !this.hasASelectedNode) return 0;\n            } else if (!this.selectionMode && index === 0) {\n                return 0;\n            }\n\n            return -1;\n        }\n    },\n    computed: {\n        columns() {\n            return this.d_columns.get(this);\n        },\n        processedData() {\n            if (this.lazy) {\n                return this.value;\n            } else {\n                if (this.value && this.value.length) {\n                    let data = this.value;\n\n                    if (this.sorted) {\n                        if (this.sortMode === 'single') data = this.sortSingle(data);\n                        else if (this.sortMode === 'multiple') data = this.sortMultiple(data);\n                    }\n\n                    if (this.hasFilters()) {\n                        data = this.filter(data);\n                    }\n\n                    return data;\n                } else {\n                    return null;\n                }\n            }\n        },\n        dataToRender() {\n            const data = this.processedData;\n\n            if (this.paginator) {\n                const first = this.lazy ? 0 : this.d_first;\n\n                return data.slice(first, first + this.d_rows);\n            } else {\n                return data;\n            }\n        },\n        empty() {\n            const data = this.processedData;\n\n            return !data || data.length === 0;\n        },\n        sorted() {\n            return this.d_sortField || (this.d_multiSortMeta && this.d_multiSortMeta.length > 0);\n        },\n        hasFooter() {\n            let hasFooter = false;\n\n            for (let col of this.columns) {\n                if (this.columnProp(col, 'footer') || (col.children && col.children.footer)) {\n                    hasFooter = true;\n                    break;\n                }\n            }\n\n            return hasFooter;\n        },\n        paginatorTop() {\n            return this.paginator && (this.paginatorPosition !== 'bottom' || this.paginatorPosition === 'both');\n        },\n        paginatorBottom() {\n            return this.paginator && (this.paginatorPosition !== 'top' || this.paginatorPosition === 'both');\n        },\n        singleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'single';\n        },\n        multipleSelectionMode() {\n            return this.selectionMode && this.selectionMode === 'multiple';\n        },\n        rowSelectionMode() {\n            return this.singleSelectionMode || this.multipleSelectionMode;\n        },\n        totalRecordsLength() {\n            if (this.lazy) {\n                return this.totalRecords;\n            } else {\n                const data = this.processedData;\n\n                return data ? data.length : 0;\n            }\n        },\n        attributeSelector() {\n            return UniqueComponentId();\n        }\n    },\n    components: {\n        TTRow: TreeTableRow,\n        TTPaginator: Paginator,\n        TTHeaderCell: HeaderCell,\n        TTFooterCell: FooterCell,\n        SpinnerIcon: SpinnerIcon\n    }\n};\n</script>\n"],"names":["name","BaseComponent","props","value","type","dataKey","String","Function","expandedKeys","selectionKeys","selectionMode","metaKeySelection","Boolean","rows","Number","first","totalRecords","paginator","paginatorPosition","alwaysShowPaginator","paginatorTemplate","pageLinkSize","rowsPerPageOptions","Array","currentPageReportTemplate","lazy","loading","loadingIcon","undefined","loadingMode","rowHover","autoLayout","sortField","sortOrder","defaultSortOrder","multiSortMeta","sortMode","removableSort","filters","Object","filterMode","filterLocale","resizableColumns","columnResizeMode","indentation","showGridlines","scrollable","scrollHeight","size","tableStyle","tableClass","tableProps","style","TreeTableStyle","provide","$pcTreeTable","$parentInstance","hostName","column","index","data","styleObject","mounted","columnProp","updateStickyPosition","updated","methods","prop","ObjectUtils","getVNodeProp","getColumnPT","key","_this$$parentInstance","columnMetaData","parent","instance","$props","state","$data","context","frozen","mergeProps","ptm","concat","ptmo","getColumnProp","pt","align","right","next","DomHandler","getNextElementSibling","$el","getOuterWidth","parseFloat","left","prev","getPreviousElementSibling","computed","containerClass","cx","containerStyle","bodyStyle","columnStyle","_openBlock","_createElementBlock","_mergeProps","$options","role","_objectSpread","children","footer","_createBlock","_resolveDynamicComponent","_ctx","emits","sorted","isColumnSorted","resizable","filterRow","parentElement","nextElementSibling","onClick","event","$emit","originalEvent","onKeyDown","code","currentTarget","nodeName","getAttribute","preventDefault","onResizeStart","getMultiSortMetaIndex","i","length","meta","field","isMultiSorted","headerStyle","sortState","metaIndex","order","sortableColumnIcon","_this$sortState","SortAltIcon","SortAmountUpAltIcon","SortAmountDownIcon","ariaSort","_this$sortState2","components","Badge","apply","arguments","onKeydown","tabindex","onMousedown","_createElementVNode","header","sorticon","_component_Badge","node","level","leaf","expanded","checked","partialChecked","templates","toggle","selectable","rowSelectionMode","selected","$parent","getColumnCheckboxPT","resolveFieldData","rowData","toggleCheckbox","togglerStyle","marginLeft","visibility","checkboxSelectionMode","Checkbox","ChevronRightIcon","ChevronDownIcon","CheckIcon","MinusIcon","SpinnerIcon","directives","ripple","Ripple","_withDirectives","_Fragment","_component_SpinnerIcon","spin","rowtoggleicon","rowtogglericon","expandedIcon","collapsedIcon","_component_Checkbox","modelValue","binary","onChange","indeterminate","unstyled","icon","_withCtx","slotProps","_normalizeClass","body","_createTextVNode","_toDisplayString","parentNode","columns","ariaSetSize","ariaPosInset","nodeTouched","col","isClickable","target","tagName","setTabIndexForSelectionMode","onTouchEnd","nodeKey","item","onArrowDownKey","onArrowUpKey","onArrowLeftKey","onArrowRightKey","onHomeKey","onEndKey","onEnterKey","onTabKey","focusRowChange","previousElementSibling","_this","ishiddenIcon","findSingle","togglerElement","$refs","click","$nextTick","findBeforeClickableNode","findFirstElement","focus","nodes","find","_toConsumableArray","hasSelectedRow","some","row","forEach","tabIndex","selectedNodes","filter","firstFocusableRow","currentFocusedRow","prevNode","prevNodeButton","querySelector","_selectionKeys","_check","propagateDown","check","_iterator","_createForOfIteratorHelper","_step","s","n","done","child","err","e","f","propagateUp","checkedChildCount","childPartialSelected","_iterator2","_step2","onCheckboxChange","_iterator3","_step3","elements","every","element","styleClass","getAriaSelected","ptmOptions","TTBodyCell","BodyCell","ref","onTouchend","_renderList","_component_TTBodyCell","onNodeToggle","_cache","$event","onCheckboxToggle","childNode","_component_TreeTableRow","indexOf","onNodeClick","BaseTreeTable","inheritAttrs","$columns","d_columns","d_expandedKeys","d_first","d_rows","d_sortField","d_sortOrder","d_multiSortMeta","hasASelectedNode","HelperSet","documentColumnResizeListener","documentColumnResizeEndListener","lastResizeHelperX","resizeColumnElement","watch","newValue","setAttribute","attributeSelector","beforeUnmount","destroyStyleElement","clear","ptHeaderCellOptions","metaSelection","handleSelectionWithMetaKey","handleSelectionWithoutMetaKey","metaKey","ctrlKey","isNodeSelected","isSingleSelectionMode","isMultipleSelectionMode","onPage","pageEvent","createLazyLoadEvent","pageCount","page","resetPage","getFilterColumnHeaderClass","onColumnHeaderClick","targetNode","columnField","closest","clearSelection","addMultiSortField","findIndex","splice","push","sortSingle","sortNodesSingle","_nodes","comparer","localeComparator","sort","node1","node2","value1","value2","sortMultiple","sortNodesMultiple","_this2","multisortField","filteredNodes","strict","copyNode","localMatch","globalMatch","j","filterField","prototype","hasOwnProperty","call","filterMatchMode","filterValue","filterConstraint","FilterService","paramsWithoutNode","findFilteredNodes","isFilterMatched","hasGlobalFilter","copyNodeForGlobal","globalFilterParamsWithoutNode","matches","filterEvent","filteredValue","matched","childNodes","copyChildNode","_ref","dataFieldValue","isNodeLeaf","_this3","filterMatchModes","hasFilters","onColumnResizeStart","containerLeft","getOffset","columnResizing","pageX","scrollLeft","bindColumnResizeEvents","onColumnResize","isUnstyled","addStyles","resizeHelper","height","offsetHeight","top","display","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","newColumnWidth","minWidth","parseInt","nextColumn","nextColumnWidth","resizeTableCells","tableWidth","table","updateTableWidth","el","width","resizeColumn","removeAttribute","unbindColumnResizeEvents","colIndex","widths","headers","createStyleElement","innerHTML","selector","colWidth","styleElement","_this4","document","addEventListener","removeEventListener","onColumnKeyDown","hasColumnFilter","keys","constructor","getItemLabel","_this$$primevue","createElement","$primevue","config","csp","nonce","head","appendChild","removeChild","setTabindex","get","processedData","dataToRender","slice","empty","hasFooter","_iterator4","_step4","paginatorTop","paginatorBottom","singleSelectionMode","multipleSelectionMode","totalRecordsLength","UniqueComponentId","TTRow","TreeTableRow","TTPaginator","Paginator","TTHeaderCell","HeaderCell","TTFooterCell","FooterCell","ptmi","_renderSlot","$slots","_component_TTPaginator","template","position","alwaysShow","paginatorstart","paginatorend","paginatorfirstpagelinkicon","fn","paginatorprevpagelinkicon","paginatornextpagelinkicon","paginatorlastpagelinkicon","paginatorjumptopagedropdownicon","paginatorrowsperpagedropdownicon","sx","maxHeight","_component_TTHeaderCell","onColumnClick","onColumnResizestart","_component_TTRow","colspan","_component_TTFooterCell"],"mappings":"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"}